{"version":3,"file":"index.js","sources":["../src/library/sound.ts","../src/library/error.ts","../src/library/audio.ts","../src/library/request.ts","../src/library/core.ts"],"sourcesContent":["const SOUND_STATE_STOPPED = 'sound_state_stopped';\nconst SOUND_STATE_PAUSED = 'sound_state_paused';\nconst SOUND_STATE_PLAYING = 'sound_state_playing';\n\nexport type typeSoundStates = typeof SOUND_STATE_STOPPED | typeof SOUND_STATE_PAUSED | typeof SOUND_STATE_PLAYING;\n\nexport interface IOnProgress {\n    (progress: number, maximumValue: number, currentValue: number): void;\n}\n\nexport interface IOnEnded {\n    (willPlayNext: boolean): void;\n}\n\nexport interface IOnAnyAction {\n    (playTimeOffset: number): void;\n}\n\nexport interface ISoundSource {\n    url: string;\n    codec?: string;\n    isPreferred?: boolean;\n}\n\nexport interface ISoundAttributes {\n    // source(s) are NOT mandatory as user can provide an arrayBuffer\n    // and / or audioBuffer in which case the source url is not needed\n    source?: (ISoundSource)[] | ISoundSource;\n    id?: number | string;\n    loop?: boolean;\n    audioBuffer?: AudioBuffer;\n    arrayBuffer?: ArrayBuffer;\n    duration?: number;\n\n    // events\n    onLoading?: IOnProgress;\n    onPlaying?: IOnProgress;\n    onEnded?: IOnEnded;\n    onStarted?: IOnAnyAction;\n    onStopped?: IOnAnyAction;\n    onPaused?: IOnAnyAction;\n    onResumed?: IOnAnyAction;\n}\n\nexport interface ISound extends ISoundAttributes, ISoundSource {\n    sourceNode: AudioBufferSourceNode | MediaElementAudioSourceNode;\n    gainNode: GainNode;\n    isReadyToPLay: boolean;\n    isBuffered: boolean;\n    isBuffering: boolean;\n    audioElement: HTMLAudioElement;\n    audioBufferDate: Date;\n    playTimeOffset: number;\n    startTime: number;\n    playTime: number;\n    playedTimePercentage: number;\n    state: typeSoundStates;\n    loadingProgress: number;\n    firstTimePlayed: boolean;\n    getCurrentTime(): number;\n    getDuration(): number;\n}\n\nexport class PlayerSound implements ISound {\n\n    // static constants\n    static readonly SOUND_STATE_STOPPED = 'sound_state_stopped';\n    static readonly SOUND_STATE_PAUSED = 'sound_state_paused';\n    static readonly SOUND_STATE_PLAYING = 'sound_state_playing';\n\n    // properties\n    public source: (ISoundSource)[] | ISoundSource;\n    public url: string = null;\n    public codec: string = null;\n    public id: number | string;\n    public loop: boolean;\n    public sourceNode: AudioBufferSourceNode | MediaElementAudioSourceNode = null;\n    public gainNode: GainNode = null;\n    public isReadyToPLay = false;\n    public isBuffered = false;\n    public isBuffering = false;\n    public audioElement: HTMLAudioElement = null;\n    public audioBuffer: AudioBuffer = null;\n    public arrayBuffer: ArrayBuffer = null;\n    public audioBufferDate: Date = null;\n    public playTimeOffset = 0;\n    public startTime = 0;\n    public playTime = 0;\n    public playedTimePercentage = 0;\n    public state: typeSoundStates = SOUND_STATE_STOPPED;\n    public loadingProgress = 0;\n    public duration: number = null;\n    public firstTimePlayed = true;\n\n    // callbacks\n    public onLoading: IOnProgress;\n    public onPlaying: IOnProgress;\n    public onEnded: IOnEnded;\n    public onStarted: IOnAnyAction;\n    public onStopped: IOnAnyAction;\n    public onPaused: IOnAnyAction;\n    public onResumed: IOnAnyAction;\n\n    constructor(soundAttributes: ISoundAttributes) {\n\n        // user provided values\n        if (!Array.isArray(soundAttributes.source)) {\n            this.source = [soundAttributes.source];\n        } else {\n            this.source = soundAttributes.source;\n        }\n\n        if (typeof soundAttributes.id !== 'undefined') {\n            this.id = soundAttributes.id;\n        } else {\n            this.id = this._generateSoundId()\n        }\n\n        this.loop = soundAttributes.loop || false;\n\n        // the user can set the duration manually\n        // this is usefull if we need to convert the position percentage into seconds but don't want to preload the song\n        // to get the duration the song has to get preloaded as the duration is a property of the audioBuffer\n        this.duration = soundAttributes.duration || null;\n\n        if (typeof soundAttributes.onLoading === 'function') {\n            this.onLoading = soundAttributes.onLoading;\n        } else {\n            this.onLoading = null;\n        }\n\n        if (typeof soundAttributes.onPlaying === 'function') {\n            this.onPlaying = soundAttributes.onPlaying;\n        } else {\n            this.onPlaying = null;\n        }\n\n        if (typeof soundAttributes.onStarted === 'function') {\n            this.onStarted = soundAttributes.onStarted;\n        } else {\n            this.onStarted = null;\n        }\n\n        if (typeof soundAttributes.onEnded === 'function') {\n            this.onEnded = soundAttributes.onEnded;\n        } else {\n            this.onEnded = null;\n        }\n\n        if (typeof soundAttributes.onStopped === 'function') {\n            this.onStopped = soundAttributes.onStopped;\n        } else {\n            this.onStopped = null;\n        }\n\n        if (typeof soundAttributes.onPaused === 'function') {\n            this.onPaused = soundAttributes.onPaused;\n        } else {\n            this.onPaused = null;\n        }\n\n        if (typeof soundAttributes.onResumed === 'function') {\n            this.onResumed = soundAttributes.onResumed;\n        } else {\n            this.onResumed = null;\n        }\n\n        if (soundAttributes.arrayBuffer instanceof ArrayBuffer) {\n            this.arrayBuffer = soundAttributes.arrayBuffer;\n        }\n\n        if (soundAttributes.audioBuffer instanceof AudioBuffer) {\n            this.audioBuffer = soundAttributes.audioBuffer;\n            this.isBuffering = false;\n            this.isBuffered = true;\n            this.audioBufferDate = new Date();\n            this.duration = this.getDuration();\n        }\n\n    }\n\n    public getCurrentTime(): number {\n\n        let currentTime: number;\n\n        if (this.sourceNode !== null) {\n            if (this.sourceNode instanceof AudioBufferSourceNode) {\n                currentTime = this.sourceNode.context.currentTime;\n            } else if (this.sourceNode instanceof MediaElementAudioSourceNode) {\n                currentTime = this.audioElement.currentTime;\n            }\n        }\n\n        return currentTime;\n\n    }\n\n    public getDuration(): number {\n\n        let duration: number;\n\n        if (this.sourceNode !== null) {\n            if (this.sourceNode instanceof AudioBufferSourceNode) {\n                duration = this.sourceNode.buffer.duration;\n            } else if (this.sourceNode instanceof MediaElementAudioSourceNode) {\n                duration = this.audioElement.duration;\n            }\n        }\n\n        return duration;\n\n    }\n\n    protected _generateSoundId() {\n        return Date.now().toString(36) + Math.random().toString(36).substring(2)\n    }\n\n}\n","ï»¿export interface IPlayerError extends Error {\n    code: number | null;\n}\n\n// https://github.com/Microsoft/TypeScript/issues/12123\nexport class PlayerError extends Error {\n\n    public code: number;\n\n    constructor(message: string, code?: number) {\n\n        super(message);\n\n        this.code = code || null;\n\n        // Set the prototype explictilly\n        Object.setPrototypeOf(this, PlayerError.prototype);\n\n    }\n\n}\n","import { ISound } from './sound';\nimport { PlayerError } from './error';\n\nexport interface IAudioOptions {\n    audioContext: AudioContext;\n    createAudioContextOnFirstUserInteraction: boolean;\n    volume: number;\n    persistVolume: boolean;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/AudioNode\nexport interface IAudioNodes {\n    // https://developer.mozilla.org/en-US/docs/Web/API/GainNode\n    gainNode: GainNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\n    pannerNode?: PannerNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode\n    stereoPannerNode?: StereoPannerNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/DelayNode\n    delayNode?: DelayNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode\n    scriptProcessorNode?: ScriptProcessorNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode\n    analyserNode?: AnalyserNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\n    biquadFilterNode?: BiquadFilterNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode\n    channelMergeNode?: ChannelMergerNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode\n    channelSplitterNode?: ChannelSplitterNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode\n    convolverNode?: ConvolverNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode\n    dynamicCompressorNode?: DynamicsCompressorNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode\n    oscillatorNode?: OscillatorNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode\n    waveShaperNode?: WaveShaperNode;\n}\n\ninterface IOnSourceNodeEnded {\n    (event?: Event): void\n}\n\nexport interface IAudioBufferSourceOptions extends AudioBufferSourceOptions {\n    onSourceNodeEnded: IOnSourceNodeEnded;\n}\n\nexport interface IMediaElementAudioSourceOptions extends MediaElementAudioSourceOptions {\n    onSourceNodeEnded: IOnSourceNodeEnded;\n    // add a loop here to match AudioBufferSourceOptions which has a loop\n    loop: boolean;\n}\n\nexport class PlayerAudio {\n\n    protected _options;\n    protected _audioContext: AudioContext = null;\n    protected _volume: number = null;\n    protected _audioNodes: IAudioNodes = {\n        gainNode: null,\n    };\n\n    constructor(options: IAudioOptions) {\n\n        this._options = options;\n\n        this._initialize();\n\n    }\n\n    protected _initialize(): void {\n\n        if (this._options.createAudioContextOnFirstUserInteraction) {\n            this._addAutoCreateAudioContextOnFirstUserInteractionEventListeners();\n        }\n\n    }\n\n    public async decodeAudio(arrayBuffer: ArrayBuffer): Promise<AudioBuffer> {\n\n        const audioContext = await this.getAudioContext();\n\n        // Note to self:\n        // newer decodeAudioData returns promise, older accept as second\n        // and third parameter a success and an error callback funtion\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData\n\n        const audioBufferPromise = await audioContext.decodeAudioData(arrayBuffer);\n\n        // decodeAudioData returns a promise of type PromiseLike\n        // using resolve to return a promise of type Promise\n        return Promise.resolve(audioBufferPromise);\n\n    }\n\n    protected _createAudioContext(): Promise<void> {\n\n        return new Promise((resolve, reject) => {\n\n            // check if we already have an audio context\n            if (this._audioContext instanceof AudioContext) {\n                // if we do, no need to create a new one\n                resolve();\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const WebAudioContext: typeof AudioContext = window.AudioContext || (window as any).webkitAudioContext;\n\n            // initialize the audio context\n            try {\n                if (this._options.audioContext !== null) {\n                    this._audioContext = this._options.audioContext;\n                } else {\n                    this._audioContext = new WebAudioContext();\n                }\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n\n        });\n\n    }\n\n    protected _addAutoCreateAudioContextOnFirstUserInteractionEventListeners(): void {\n\n        if (this._options.createAudioContextOnFirstUserInteraction) {\n            document.addEventListener('touchstart', this.getAudioContext.bind(this));\n            document.addEventListener('touchend', this.getAudioContext.bind(this));\n            document.addEventListener('mousedown', this.getAudioContext.bind(this));\n        }\n\n    }\n\n    protected _removeAutoCreateAudioContextOnFirstUserInteractionEventListeners(): void {\n\n        if (this._options.createAudioContextOnFirstUserInteraction) {\n            document.removeEventListener('touchstart', this.getAudioContext.bind(this));\n            document.removeEventListener('touchend', this.getAudioContext.bind(this));\n            document.removeEventListener('mousedown', this.getAudioContext.bind(this));\n        }\n\n    }\n\n    public async getAudioContext(): Promise<AudioContext> {\n\n        if (this._audioContext === null) {\n            await this._createAudioContext();\n        } else if (this._audioContext.state === 'suspended') {\n            await this._unfreezeAudioContext();\n        }\n\n        return this._audioContext;\n\n    }\n\n    protected _unfreezeAudioContext(): Promise<void> {\n\n        // did resume get implemented\n        if (typeof this._audioContext.suspend === 'undefined') {\n\n            // this browser does not support resume\n            // just send back a promise as resume would do\n            return Promise.resolve();\n\n        } else {\n\n            // resume the audio hardware access\n            // audio context resume returns a promise\n            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume\n            return this._audioContext.resume();\n\n        }\n\n    }\n\n    public freezeAudioContext(): Promise<void> {\n\n        // did suspend get implemented\n        if (typeof this._audioContext.suspend === 'undefined') {\n\n            return Promise.resolve();\n\n        } else {\n\n            // halt the audio hardware access temporarily to reduce CPU and battery usage\n            return this._audioContext.suspend();\n\n        }\n\n    }\n\n    public detectAudioContextSupport(): boolean {\n\n        // basic audio context detection\n        let audioContextSupported = false;\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (typeof (window as any).webkitAudioContext !== 'undefined') {\n            audioContextSupported = true;\n        } else if (typeof AudioContext !== 'undefined') {\n            audioContextSupported = true;\n        }\n\n        return audioContextSupported;\n\n    }\n\n    public detectAudioElementSupport(): boolean {\n\n        // basic audio element detection\n        return !!document.createElement('audio').canPlayType;\n\n    }\n\n    public async shutDown(songsQueue: ISound[]): Promise<void> {\n\n        // I know, this is probably the longest function name you have ever seen ;)\n        this._removeAutoCreateAudioContextOnFirstUserInteractionEventListeners();\n\n        // if media element source also destroy the media element? (for each song?)\n        songsQueue.forEach((sound) => {\n            if (sound.sourceNode !== null) {\n                if (sound.sourceNode instanceof MediaElementAudioSourceNode) {\n                    if (typeof sound.sourceNode.mediaElement !== 'undefined') {\n                        sound.sourceNode.mediaElement.remove();\n                    }\n                }\n                // disconnect no matter if AudioBufferSourceNode\n                // or MediaElementAudioSourceNode\n                sound.sourceNode.disconnect();\n            }\n        });\n\n        this._disconnectPlayerGainNode();\n\n        await this._destroyAudioContext();\n\n    }\n\n    protected async _destroyAudioContext(): Promise<void> {\n\n        if (this._audioContext !== null) {\n            await this._audioContext.close();\n            this._audioContext = null;\n        }\n\n    }\n\n    public async createAudioBufferSourceNode(audioBufferSourceOptions: IAudioBufferSourceOptions, sound: ISound): Promise<void> {\n\n        const audioContext = await this.getAudioContext();\n\n        const audioBufferSourceNode: AudioBufferSourceNode = audioContext.createBufferSource();\n\n        sound.sourceNode = audioBufferSourceNode;\n\n        // do we loop this song\n        audioBufferSourceNode.loop = audioBufferSourceOptions.loop;\n\n        // create the sound gain node\n        sound.gainNode = audioBufferSourceNode.context.createGain();\n\n        // set the gain by default always to 1\n        // TODO: allow user to define a gain value for each sound via sound options\n        // TODO: future allow a sound gain to be faded out at end\n        // (faded in at start) without changing the main player gain\n        sound.gainNode.gain.value = 1;\n\n        // connect the source to the sound gain node\n        audioBufferSourceNode.connect(sound.gainNode);\n\n        // if the song ends destroy it's audioGraph as the source can't be reused anyway\n        // NOTE: the source nodes onended handler won't have any effect if the loop property is set to\n        // true, as the audio won't stop playing. To see the effect in this case you'd\n        // have to use AudioBufferSourceNode.stop()\n        audioBufferSourceNode.onended = (event: Event): void => {\n            audioBufferSourceOptions.onSourceNodeEnded(event);\n        };\n\n    }\n\n    public async createMediaElementSourceNode(sourceNodeOptions: IMediaElementAudioSourceOptions, sound: ISound): Promise<void> {\n\n        let mediaElementAudioSourceNode: MediaElementAudioSourceNode;\n\n        if (sound.sourceNode === null) {\n\n            const audioContext = await this.getAudioContext();\n\n            try {\n                // createMediaElementSource: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaElementSource\n                mediaElementAudioSourceNode = audioContext.createMediaElementSource(sourceNodeOptions.mediaElement) as MediaElementAudioSourceNode;\n            } catch (error) {\n                throw new PlayerError(error);\n            }\n\n            // do we loop this song\n            mediaElementAudioSourceNode.mediaElement.loop = sourceNodeOptions.loop;\n\n            // create the sound gain node\n            sound.gainNode = mediaElementAudioSourceNode.context.createGain();\n\n            sound.gainNode.gain.value = 1;\n\n            // connect the source to the sound gain node\n            mediaElementAudioSourceNode.connect(sound.gainNode);\n\n            // MediaElementSource: https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode/mediaElement\n\n            // NOTE: the source nodes onended handler won't have any effect if the loop property is set to\n            // true, as the audio won't stop playing. To see the effect in this case you'd\n            // have to use AudioBufferSourceNode.stop()\n            mediaElementAudioSourceNode.mediaElement.onended = async (): Promise<void> => {\n                sourceNodeOptions.onSourceNodeEnded();\n            };\n\n            sound.sourceNode = mediaElementAudioSourceNode;\n\n        }\n\n    }\n\n    protected async _getPlayerGainNode(): Promise<GainNode> {\n\n        // the player (master) gain node\n        let gainNode: GainNode;\n\n        if (this._audioNodes.gainNode instanceof GainNode) {\n\n            gainNode = this._audioNodes.gainNode;\n\n        } else {\n\n            const audioContext = await this.getAudioContext();\n\n            // Note: a volume control (GainNode) should always\n            // be the last node that gets connected\n            // so that volume changes take immediate effect\n            gainNode = audioContext.createGain();\n\n            // final step: connect the gain node to the audio destination node\n            gainNode.connect(audioContext.destination);\n\n            this._audioNodes.gainNode = gainNode;\n\n        }\n\n        this._initializeVolume()\n\n        return gainNode;\n\n    }\n\n    protected _disconnectPlayerGainNode(): void {\n\n        if (this._audioNodes.gainNode !== null) {\n            this._audioNodes.gainNode.disconnect();\n        }\n        \n        this._audioNodes.gainNode = null;\n\n    }\n\n    public async connectSound(sound: ISound): Promise<void> {\n\n        const playerGainNode = await this._getPlayerGainNode();\n        const soundGainNode = sound.gainNode;\n\n        if (soundGainNode !== null) {\n            soundGainNode.connect(playerGainNode);\n        }\n\n    }\n\n    public async cleanUpAudiBufferSourceNode(sound: ISound): Promise<void> {\n\n        if (sound.sourceNode instanceof AudioBufferSourceNode) {\n            // the audio buffer source node we set it to null, so that it gets destroyed\n            // by the garbage collector (as you can't reuse an audio buffer source node,\n            // after it got stopped) as specified in the specs\n            sound.sourceNode = null;\n        }\n\n    }\n\n    protected _changePlayerGainValue(gainValue: number): void {\n\n        if (this._audioNodes.gainNode instanceof GainNode) {\n            this._audioNodes.gainNode.gain.value = gainValue;\n        }\n\n    }\n\n    protected _roundGainTwoDecimals(rawGainValue: number): number {\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n        return Math.round((rawGainValue + Number.EPSILON) * 100) / 100\n\n    }\n\n    public setVolume(volume: number, forceUpdateUserVolume = true) {\n\n        // we sometimes change the volume, for a fade in/out or when muting, but\n        // in this cases we don't want to update the user's persisted volume, in\n        // which case forceUpdateUserVolume is false else it would be true\n        if (this._options.persistVolume && forceUpdateUserVolume) {\n            localStorage.setItem('WebAudioAPIPlayerVolume', volume.toString());\n        }\n\n        // the gain values we use range from 0 to 1\n        // so we need to divide the volume (in percent) by 100 to get the gain value\n        const gainValue = volume / 100;\n\n        if (this._audioNodes.gainNode instanceof GainNode) {\n\n            const roundedGain = this._roundGainTwoDecimals(this._audioNodes.gainNode.gain.value)\n\n            // check if the volume changed\n            if (roundedGain !== this._volume) {\n\n                // the gain value changes the amplitude of the sound wave\n                // a gain value of one does nothing\n                // values between 0 and 1 reduce the loudness, above one they amplify the loudness\n                // negative values work too, but they invert the waveform, so -1 is as loud as 1\n                this._changePlayerGainValue(gainValue);\n\n            }\n\n        }\n\n        this._volume = volume;\n\n    }\n\n    public getVolume(): number {\n\n        let volume: number\n\n        // check if volume has already been set\n        if (this._volume !== null) {\n            volume = this._volume\n        } else {\n            if (this._options.persistVolume) {\n                // if persist volume is enabled, check if there is a user volume in localstorage\n                const userVolumeInPercent = parseInt(localStorage.getItem('WebAudioAPIPlayerVolume'));\n    \n                if (!isNaN(userVolumeInPercent)) {\n                    volume = userVolumeInPercent\n                }\n            }\n\n            // if volume is not persisted or persited value not yet set\n            if (typeof volume === 'undefined') {\n                volume = this._options.volume\n            }\n        }\n\n        return volume\n\n    }\n\n    protected _initializeVolume(): void {\n\n        if (this._options.persistVolume) {\n            // if persist volume is enabled, check if there is a user volume in localstorage\n            const userVolumeInPercent = parseInt(localStorage.getItem('WebAudioAPIPlayerVolume'));\n\n            if (!isNaN(userVolumeInPercent)) {\n                this.setVolume(userVolumeInPercent, false);\n            }\n        }\n\n        // if no user volume take the default options volume\n        if (this._volume === null) {\n            this.setVolume(this._options.volume, false);\n        }\n\n    }\n\n}\n","import { PlayerError } from './error';\nimport { IOnProgress } from './sound';\n\nexport interface IRequested {\n    url: string;\n    loadingProgress: number;\n    onLoading?: IOnProgress;\n}\n\nexport class PlayerRequest {\n\n    // TODO: add possibility to abort http request\n\n    public getArrayBuffer(requested: IRequested): Promise<ArrayBuffer> {\n\n        return new Promise(function (resolve, reject) {\n\n            const xhr = new XMLHttpRequest();\n\n            // TODO: abort the request?\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort\n\n            // thirs parameter is for \"async\", default true but who knows if prefer to explicitly set it just in case\n            xhr.open('GET', requested.url, true);\n\n            // set the expected response type from the server to arraybuffer\n            xhr.responseType = 'arraybuffer';\n\n            xhr.onload = function (): void {\n\n                // gets called even on for example 404, so check the status\n                if (xhr.status === 200) {\n\n                    // successful request so now we can resolve the promise\n                    resolve(xhr.response);\n\n                } else {\n\n                    // something went wrong so we reject with an error\n                    reject(new PlayerError(xhr.statusText, xhr.status));\n\n                }\n\n            };\n\n            xhr.onprogress = function (event): void {\n\n                const percentage = 100 / (event.total / event.loaded);\n\n                // update value on sound object\n                requested.loadingProgress = percentage;\n\n                if (requested.onLoading !== null) {\n                    requested.onLoading(percentage, event.total, event.loaded);\n                }\n\n            };\n\n            // also reject for any kind of network errors\n            xhr.onerror = function (): void {\n\n                reject(new PlayerError('xhr network error'));\n\n            };\n\n            // now make the request\n            xhr.send();\n\n        });\n\n    }\n\n}\n","import { PlayerSound, ISound, ISoundAttributes, ISoundSource, typeSoundStates } from './sound';\nimport {\n    PlayerAudio,\n    IAudioOptions,\n    IAudioBufferSourceOptions,\n    IMediaElementAudioSourceOptions,\n} from './audio';\nimport { PlayerRequest } from './request';\nimport { PlayerError, IPlayerError } from './error';\n\nconst PLAYER_MODE_AUDIO = 'player_mode_audio';\nconst PLAYER_MODE_AJAX = 'player_mode_ajax';\nconst PLAYER_MODE_FETCH = 'player_mode_fetch';\n\nconst WHERE_IN_QUEUE_AT_START = 'prepend';\nconst WHERE_IN_QUEUE_AT_END = 'append';\n\ntype typePlayerMode = typeof PLAYER_MODE_AUDIO | typeof PLAYER_MODE_AJAX | typeof PLAYER_MODE_FETCH;\ntype typeWhereInQueue = typeof WHERE_IN_QUEUE_AT_START | typeof WHERE_IN_QUEUE_AT_END;\n\nexport interface ICoreOptions {\n    volume?: number;\n    loopQueue?: boolean;\n    loopSong?: boolean;\n    soundsBaseUrl?: string;\n    playingProgressIntervalTime?: number;\n    playNextOnEnded?: boolean;\n    stopOnReset?: boolean;\n    visibilityAutoMute?: boolean;\n    createAudioContextOnFirstUserInteraction?: boolean;\n    persistVolume?: boolean;\n    loadPlayerMode?: typePlayerMode;\n    audioContext?: AudioContext;\n}\n\nexport interface ISoundsQueueOptions {\n    soundAttributes: ISoundAttributes;\n    whereInQueue?: typeWhereInQueue;\n}\n\ninterface IDecodeSoundOptions {\n    sound: ISound;\n}\n\nexport interface IPlayOptions {\n    whichSound?: number | string | undefined;\n    playTimeOffset?: number;\n}\n\ninterface IFindSoundById {\n    soundId: string | number;\n}\n\ninterface IFindBestSourceResponse {\n    url: string;\n    codec?: string;\n}\n\ninterface IGetSoundFromQueue {\n    whichSound?: string | number;\n    updateIndex?: boolean;\n}\n\ninterface IBestSource {\n    url: string;\n    codec?: string;\n}\n\nexport class PlayerCore {\n\n    // the sounds queue\n    protected _queue: ISound[];\n    // the current sound in queue index\n    protected _currentIndex: number;\n    // instance of the audio library class\n    protected _playerAudio: PlayerAudio;\n    // playing progress animation frame request id\n    protected _playingProgressRequestId: number = null;\n    // playing progress animation frame previous timestamp\n    protected _playingProgressPreviousTimestamp: DOMHighResTimeStamp = 0;\n    // value of the volume before we muted\n    protected _postMuteVolume: number\n    // user player options\n    protected _options: ICoreOptions;\n\n    // constants\n    static readonly WHERE_IN_QUEUE_AT_END = 'append';\n    static readonly WHERE_IN_QUEUE_AT_START = 'prepend';\n\n    static readonly PLAY_SOUND_NEXT = 'next';\n    static readonly PLAY_SOUND_PREVIOUS = 'previous';\n    static readonly PLAY_SOUND_FIRST = 'first';\n    static readonly PLAY_SOUND_LAST = 'last';\n\n    static readonly CURRENT_SOUND = 'current';\n\n    static readonly PLAYER_MODE_AUDIO = 'player_mode_audio';\n    static readonly PLAYER_MODE_AJAX = 'player_mode_ajax';\n    static readonly PLAYER_MODE_FETCH = 'player_mode_fetch';\n\n    constructor(playerOptions: ICoreOptions = {}) {\n\n        const defaultOptions: ICoreOptions = {\n            volume: 80,\n            loopQueue: false,\n            loopSong: false,\n            soundsBaseUrl: '',\n            playingProgressIntervalTime: 200,\n            playNextOnEnded: true,\n            stopOnReset: true,\n            visibilityAutoMute: false,\n            createAudioContextOnFirstUserInteraction: true,\n            persistVolume: true,\n            loadPlayerMode: PLAYER_MODE_AUDIO,\n            audioContext: null,\n        };\n\n        const options = Object.assign({}, defaultOptions, playerOptions);\n\n        this._queue = [];\n        this._currentIndex = null;\n        this._options = options;\n\n        this._initialize();\n\n    }\n\n    protected _initialize(): void {\n\n        const audioOptions = this._audioOptions();\n\n        // player audio library instance\n        this._playerAudio = new PlayerAudio(audioOptions);\n\n        switch (this._options.loadPlayerMode) {\n            case PlayerCore.PLAYER_MODE_AUDIO:\n                if (!this._playerAudio.detectAudioContextSupport()) {\n                    throw new PlayerError('audio context is not supported by this device');\n                }\n                if (!this._playerAudio.detectAudioElementSupport()) {\n                    throw new PlayerError('audio element is not supported by this device');\n                }\n                break;\n            case PlayerCore.PLAYER_MODE_AJAX:\n                if (!this._playerAudio.detectAudioContextSupport()) {\n                    throw new PlayerError('audio context is not supported by this device');\n                }\n                break;\n        }\n\n    }\n\n    protected _audioOptions(): IAudioOptions {\n\n        const audioOptions: IAudioOptions = {\n            audioContext: this._options.audioContext,\n            createAudioContextOnFirstUserInteraction: this._options.createAudioContextOnFirstUserInteraction,\n            volume: this._options.volume,\n            persistVolume: this._options.persistVolume,\n        };\n\n        return audioOptions;\n\n    }\n\n    public addSoundToQueue({ soundAttributes, whereInQueue = WHERE_IN_QUEUE_AT_END }: ISoundsQueueOptions): ISound {\n\n        const sound: ISound = new PlayerSound(soundAttributes);\n\n        switch (whereInQueue) {\n            case PlayerCore.WHERE_IN_QUEUE_AT_END:\n                this._appendSoundToQueue(sound);\n                break;\n            case PlayerCore.WHERE_IN_QUEUE_AT_START:\n                this._prependSoundToQueue(sound);\n                break;\n        }\n\n        return sound;\n\n    }\n\n    public _appendSoundToQueue(sound: ISound): void {\n\n        this._queue.push(sound);\n\n    }\n\n    public _prependSoundToQueue(sound: ISound): void {\n\n        this._queue.unshift(sound);\n\n    }\n\n    public resetQueue(): void {\n\n        // check if sound should be stopped on reset\n        if (this._options.stopOnReset) {\n            this.stop();\n        }\n\n        // TODO: destroy all the sounds or clear the cached buffers manually\n        // or will garbage collector do it?\n\n        this._queue = [];\n\n    }\n\n    public reset(): void {\n\n        this.resetQueue();\n\n    }\n\n    public getQueue(): ISound[] {\n        \n        return this._queue;\n\n    }\n\n    public setVolume(volume: number): void {\n\n        this._playerAudio.setVolume(volume)\n\n    }\n\n    public getVolume(): number {\n\n        return this._playerAudio.getVolume();\n\n    }\n\n    public setLoopQueue(loppQueue: boolean): void {\n\n        this._options.loopQueue = loppQueue;\n\n    }\n\n    public getLoopQueue(): boolean {\n\n        return this._options.loopQueue;\n\n    }\n\n    public mute(): void {\n\n        const currentVolume = this.getVolume();\n\n        this._postMuteVolume = currentVolume;\n\n        this._playerAudio.setVolume(0, false);\n\n    }\n\n    public unMute(): void {\n\n        this._playerAudio.setVolume(this._postMuteVolume, false);\n\n        this._postMuteVolume = null;\n\n    }\n\n    public isMuted(): boolean {\n\n        return this._postMuteVolume === null ? true : false;\n\n    }\n\n    public setPosition(soundPositionInPercent: number): void {\n\n        // get the current sound if any\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        // if there is a sound currently being played\n        if (currentSound !== null) {\n\n            // if the duration did not get set manually\n            if (currentSound.duration === null || isNaN(currentSound.duration)) {\n\n                // the user can set the sound duration manually but if he didn't the sound has to\n                // get loaded as the duration is a property of the audioBuffer\n                this._loadSound(currentSound)\n                    .then((sound: ISound) => {\n\n                        // calculate the position in seconds\n                        const soundPositionInSeconds = (sound.duration / 100) * soundPositionInPercent;\n\n                        this.setPositionInSeconds(soundPositionInSeconds);\n\n                    }).catch((error: PlayerError) => {\n\n                        throw error;\n\n                    });\n\n            } else {\n\n                // calculate the position in seconds\n                const soundPositionInSeconds = (currentSound.duration / 100) * soundPositionInPercent;\n\n                this.setPositionInSeconds(soundPositionInSeconds);\n\n            }\n\n        }\n\n    }\n\n    public setPositionInSeconds(soundPositionInSeconds: number): void {\n\n        // get the current sound if any\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        // if there is a sound currently being played\n        if (currentSound !== null) {\n\n            // is the sound is being played\n            if (currentSound.state === PlayerSound.SOUND_STATE_PLAYING) {\n                // resume the playback at the given position\n                this.play({ whichSound: currentSound.id, playTimeOffset: soundPositionInSeconds });\n            } else {\n                // only set the sound position but don't play\n                currentSound.playTimeOffset = soundPositionInSeconds;\n            }\n\n        } else {\n\n            throw new PlayerError('position change called, but no current sound found');\n\n        }\n\n    }\n\n    protected _loadSound(sound: ISound): Promise<ISound | PlayerError> {\n\n        let loadSoundPromise;\n        let notImplementedError;\n\n        switch (this._options.loadPlayerMode) {\n            case PlayerCore.PLAYER_MODE_AUDIO:\n                loadSoundPromise = this._loadSoundUsingAudioElement(sound);\n                break;\n            case PlayerCore.PLAYER_MODE_AJAX:\n                loadSoundPromise = this._loadSoundUsingRequest(sound);\n                break;\n            case PlayerCore.PLAYER_MODE_FETCH:\n\n                // TODO: implement fetch\n\n                notImplementedError = new PlayerError(PlayerCore.PLAYER_MODE_FETCH + ' is not implemented yet', 1);\n\n                loadSoundPromise = Promise.reject(notImplementedError);\n\n                break;\n        }\n\n        return loadSoundPromise;\n\n    }\n\n    protected _loadSoundUsingAudioElement(sound: ISound): Promise<ISound | PlayerError> {\n\n        return new Promise((resolve, reject) => {\n\n            // if the audio element has already been created\n            // we are ready to play\n            /*if (sound.audioElement !== null) {\n                sound.isReadyToPLay = true;\n                resolve(sound);\n            }*/\n\n            // extract the url and codec from sources\n            const { url, codec = null } = this._findBestSource(sound.source);\n\n            sound.url = url;\n            sound.codec = codec;\n            sound.arrayBuffer = null;\n\n            if (sound.url !== null) {\n\n                const audioElement = new Audio();\n\n                // in chrome you will get this error message in the console:\n                // \"MediaElementAudioSource outputs zeroes due to CORS access restrictions\"\n                // to fix this put crossOrigin to anonymous or change the cors\n                // Access-Control-Allow-Origin header of the server to *\n                // \"crossOrigin\" has to be set before \"src\"\n                audioElement.crossOrigin = 'anonymous';\n\n                audioElement.src = sound.url;\n                audioElement.controls = false;\n                audioElement.autoplay = false;\n                audioElement.id = 'web_audio_api_player_sound_' + sound.id.toString();\n\n                document.body.appendChild(audioElement);\n\n                sound.audioElement = audioElement;\n                sound.isReadyToPLay = true;\n\n                this._initializeAudioElementListeners(sound);\n\n                const canplaythroughListener = () => {\n                    // we don't need the listener anymore\n                    sound.audioElement.removeEventListener('canplaythrough', canplaythroughListener);\n                    // duration should now be available as the sound has been fully loaded\n                    if (!isNaN(audioElement.duration)) {\n                        sound.duration = audioElement.duration;\n                    }\n                    resolve(sound);\n                };\n\n                sound.audioElement.addEventListener('canplaythrough', canplaythroughListener);\n\n                const errorListener = () => {\n                    sound.audioElement.removeEventListener('error', errorListener);\n                    const soundLoadingError = new PlayerError('loading sound failed');\n                    reject(soundLoadingError);\n                };\n\n                sound.audioElement.addEventListener('error', errorListener);\n\n            } else {\n\n                const noUrlError = new PlayerError('sound has no url', 1);\n\n                reject(noUrlError);\n\n            }\n\n        });\n\n    }\n\n    protected _loadSoundUsingRequest(sound: ISound): Promise<ISound | PlayerError> {\n\n        return new Promise((resolve, reject) => {\n\n            // extract the url and codec from sources\n            const { url, codec = null } = this._findBestSource(sound.source);\n\n            sound.url = url;\n            sound.codec = codec;\n\n            if (sound.url !== null) {\n\n                const request = new PlayerRequest();\n\n                // change buffering state\n                sound.isBuffering = true;\n\n                request.getArrayBuffer(sound).then((arrayBuffer) => {\n\n                    sound.arrayBuffer = arrayBuffer;\n\n                    this._decodeSound({ sound }).then((sound: ISound) => {\n                        resolve(sound);\n                    }).catch(reject)\n\n                }).catch((requestError) => {\n\n                    reject(requestError);\n\n                });\n\n            } else {\n\n                const noUrlError = new PlayerError('sound has no url', 1);\n\n                reject(noUrlError);\n\n            }\n\n        });\n\n    }\n\n    protected _initializeAudioElementListeners(sound: ISound): void {\n\n        sound.audioElement.addEventListener('progress', () => {\n            sound.loadingProgress = sound.audioElement.duration;\n        });\n\n        sound.audioElement.addEventListener('timeupdate', () => {\n            sound.duration = sound.audioElement.duration;\n        });\n\n    }\n\n    protected _decodeSound({ sound }: IDecodeSoundOptions): Promise<ISound> {\n\n        return this._playerAudio.decodeAudio(sound.arrayBuffer).then((audioBuffer) => {\n\n            sound.audioBuffer = audioBuffer;\n            sound.isBuffering = false;\n            sound.isBuffered = true;\n            sound.audioBufferDate = new Date();\n            sound.duration = audioBuffer.duration;\n            sound.isReadyToPLay = true;\n\n            return sound;\n\n        }).catch((decodeAudioError: IPlayerError) => {\n\n            throw decodeAudioError;\n\n        });\n\n    }\n\n    // source: https://stackoverflow.com/questions/43655953/web-audio-api-cloning-an-audiobuffer\n    protected _cloneAudioBuffer(fromAudioBuffer: AudioBuffer) {\n        const audioBuffer = new AudioBuffer({\n            length: fromAudioBuffer.length,\n            numberOfChannels: fromAudioBuffer.numberOfChannels,\n            sampleRate: fromAudioBuffer.sampleRate\n        });\n        for (let channelI = 0; channelI < audioBuffer.numberOfChannels; ++channelI) {\n            const samples = fromAudioBuffer.getChannelData(channelI);\n            audioBuffer.copyToChannel(samples, channelI);\n        }\n        return audioBuffer;\n    }\n\n    public play({ whichSound, playTimeOffset }: IPlayOptions = {}): Promise<void> {\n\n        return new Promise((resolve, reject) => {\n\n            // get the current sound if any\n            const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n            // whichSound is optional, if set it can be the sound id or if it's a string it can be next / previous / first / last\n            const sound = this._getSoundFromQueue({ whichSound, updateIndex: true });\n\n            // if there is no sound we could play, do nothing\n            if (sound === null) {\n                throw new Error('no more sounds in array');\n            }\n\n            // if there is a sound currently being played OR paused\n            // AND the current sound is NOT the same sound as the one that will now be played\n            // STOP the current sound\n            if (\n                currentSound !== null\n                && (currentSound.state === PlayerSound.SOUND_STATE_PLAYING || currentSound.state === PlayerSound.SOUND_STATE_PAUSED)\n                && (currentSound.id !== sound.id)\n            ) {\n                this._stop(currentSound, PlayerSound.SOUND_STATE_STOPPED);\n            }\n\n            // if there is a sound currently being played\n            // AND the current sound is the same sound as the one that will now be played\n            // PAUSE the current sound\n            if (\n                currentSound !== null\n                && (currentSound.state === PlayerSound.SOUND_STATE_PLAYING)\n                && (currentSound.id === sound.id)\n            ) {\n                this._stop(currentSound, PlayerSound.SOUND_STATE_PAUSED);\n            }\n\n            // if the current sound and the next one are not the same sound\n            // we set the firstTimePlayed to true to indicate it is a fresh start and not a resume after a pause\n            if (currentSound === null || (currentSound !== null && (currentSound.id !== sound.id))) {\n                sound.firstTimePlayed = true;\n            } else {\n                sound.firstTimePlayed = false;\n            }\n\n            // if the user wants to play the sound from a certain position\n            if (playTimeOffset !== undefined) {\n                sound.playTimeOffset = playTimeOffset;\n            }\n\n            // has the sound already been loaded?\n            if (!sound.isReadyToPLay) {\n\n                this._loadSound(sound).then(() => {\n\n                    this._play(sound).then(resolve).catch(reject);\n\n                }).catch(reject);\n\n            } else {\n\n                // avoid refetching the sound (getting the array buffer)\n                // by using a clone we avoid having to do the decoding again\n                if (sound.audioBuffer !== null) {\n                    sound.audioBuffer = this._cloneAudioBuffer(sound.audioBuffer)\n                }\n\n                this._play(sound).then(resolve).catch(reject);\n\n            }\n\n        });\n\n    }\n\n    protected async _play(sound: ISound): Promise<void> {\n\n        // start playing\n        if (sound.audioBuffer !== null) {\n            await this._playAudioBuffer(sound);\n        } else {\n            await this._playMediaElementAudio(sound);\n        }\n\n        // state is now playing\n        sound.state = PlayerSound.SOUND_STATE_PLAYING;\n\n        // the audio context time right now (since the audiocontext got created)\n        sound.startTime = sound.getCurrentTime();\n\n        sound = this._triggerSoundCallbacks(sound);\n\n    }\n\n    protected async _playAudioBuffer(sound: ISound): Promise<void> {\n\n        if (sound.sourceNode === null) {\n\n            // source node options\n            const sourceOptions: IAudioBufferSourceOptions = {\n                loop: sound.loop,\n                onSourceNodeEnded: (/*event: Event*/) => {\n                    this._onEnded()\n                }\n            };\n\n            try {\n                await this._playerAudio.createAudioBufferSourceNode(sourceOptions, sound);\n            } catch (error) {\n                throw new PlayerError(error);\n            }\n\n        }\n\n        // AudioBufferSourceNode type guard\n        if (sound.sourceNode instanceof AudioBufferSourceNode) {\n\n            // add the buffer to the source node\n            sound.sourceNode.buffer = sound.audioBuffer;\n\n            // connect the source to the graph node(s)\n            await this._playerAudio.connectSound(sound);\n\n            // start playback\n            // start(when, offset, duration)\n            try {\n                if (sound.playTimeOffset !== undefined) {\n                    sound.sourceNode.start(0, sound.playTimeOffset);\n                } else {\n                    sound.sourceNode.start();\n                }\n            } catch (error) {\n                throw new PlayerError(error);\n            }\n        }\n\n    }\n\n    protected async _playMediaElementAudio(sound: ISound): Promise<void> {\n\n        if (sound.sourceNode === null) {\n\n            // source node options\n            const sourceOptions: IMediaElementAudioSourceOptions = {\n                loop: sound.loop,\n                onSourceNodeEnded: (/**event: Event*/) => {\n                    this._onEnded()\n                },\n                mediaElement: sound.audioElement\n            };\n\n            // create an media element audio source node\n            try {\n                await this._playerAudio.createMediaElementSourceNode(sourceOptions, sound);\n            } catch (error) {\n                throw new PlayerError(error);\n            }\n\n        }\n\n        // MediaElementAudioSourceNode type guard\n        if (sound.sourceNode instanceof MediaElementAudioSourceNode) {\n\n            // connect the source to the graph node(s)\n            await this._playerAudio.connectSound(sound);\n\n            // if an offset is defined use to play from a defined position\n            if (sound.playTimeOffset !== undefined && !isNaN(sound.playTimeOffset)) {\n\n                // TODO: problem if sound has not loaded until for example 90% but position gets set to 90%\n                // the position will jump back\n                // need to wait for sound to have loaded that part, use events???\n\n                sound.audioElement.currentTime = sound.playTimeOffset;\n            }\n\n            try {\n                sound.sourceNode.mediaElement.play();\n            } catch (error) {\n                throw new PlayerError(error);\n            }\n\n        }\n\n    }\n\n    protected _triggerSoundCallbacks(sound: ISound): ISound {\n\n        // if there is an onResumed callback for the sound, trigger it\n        if (sound.onResumed !== null && !sound.firstTimePlayed) {\n            sound.onResumed(sound.playTimeOffset);\n        }\n\n        // if there is an onStarted callback for the sound, trigger it\n        if (sound.onStarted !== null && sound.firstTimePlayed) {\n            sound.onStarted(sound.playTimeOffset);\n        }\n\n        // if there is an onPlaying callback for the sound, trigger it\n        if (sound.onPlaying !== null) {\n            // on request animation frame callback set playing progress\n            // request animation frame callback has a argument, which\n            // is the timestamp when the callback gets called\n            this._playingProgressRequestId = window.requestAnimationFrame((timestamp) => {\n                this._progressTrigger(sound, timestamp)\n            });\n        } else {\n            this._playingProgressRequestId = null;\n        }\n\n        return sound;\n\n    }\n\n    protected _progressTrigger = (sound: ISound, timestamp: DOMHighResTimeStamp) => {\n        // throttle requests to not more than once every 200ms \n        if ((timestamp - this._playingProgressPreviousTimestamp) >= this._options.playingProgressIntervalTime) {\n            // execute playing progress callback\n            this._playingProgress(sound);\n            this._playingProgressPreviousTimestamp = timestamp;\n        }\n        // request animation frame loop\n        this._playingProgressRequestId = window.requestAnimationFrame((timestamp) => {\n            this._progressTrigger(sound, timestamp);\n        });\n    };\n\n    protected _onEnded(): void {\n\n        // get the current sound if any\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        // if there is a sound currently being played\n        if (currentSound !== null && currentSound.state === PlayerSound.SOUND_STATE_PLAYING) {\n\n            const nextSound = this._getSoundFromQueue({ whichSound: PlayerCore.PLAY_SOUND_NEXT, updateIndex: false });\n\n            if (currentSound.onEnded !== null) {\n\n                let willPlayNext = false;\n\n                // check if there is another sound in the queue and if playing\n                // the next one on ended is activated\n                if (nextSound !== null && this._options.playNextOnEnded) {\n                    willPlayNext = true;\n                }\n\n                // if loopQueue is enabled then willPlayNext is always true\n                if (this._options.loopQueue) {\n                    willPlayNext = true;\n                }\n\n                if (!willPlayNext) {\n                    this._playerAudio.freezeAudioContext();\n                }\n\n                currentSound.onEnded(willPlayNext);\n\n            }\n\n            // reset \"first time played\"\n            currentSound.firstTimePlayed = true;\n\n            // reset the \"play time offset\"\n            currentSound.playTimeOffset = 0;\n\n            this._stop(currentSound, PlayerSound.SOUND_STATE_STOPPED);\n\n            if (nextSound !== null) {\n\n                if (this._options.playNextOnEnded) {\n                    this.play({ whichSound: PlayerCore.PLAY_SOUND_NEXT });\n                }\n\n            } else {\n\n                // we reached the end of the queue set the currentIndex back to zero\n                this._currentIndex = 0;\n\n                // if queue loop is active then play\n                if (this._options.loopQueue) {\n                    this.play();\n                }\n\n            }\n\n        }\n\n    }\n\n    /**\n     * whichSound is optional, if set it can be the sound id or if it's\n     * a string it can be next / previous / first / last\n     */\n    protected _getSoundFromQueue({ whichSound, updateIndex = false }: IGetSoundFromQueue = {}): ISound {\n\n        let sound = null;\n        let soundIndex: number = null;\n\n        // check if the queue is empty\n        if (this._queue.length === 0) {\n            return sound;\n        }\n\n        // if which sound to play did not get specified\n        if (whichSound === undefined) {\n            // if whichSound is not defined\n            // AND the currentIndex is null\n            // we set it to first sound in queue\n            soundIndex = 0\n\n            // else we use currentIndex (so the current sound)\n            if (this._currentIndex !== null) {\n                soundIndex = this._currentIndex\n            }\n            sound = this._queue[soundIndex];\n        } else {\n            // if which sound to play is a constant\n            switch (whichSound) {\n                case PlayerCore.CURRENT_SOUND:\n                    if (this._currentIndex !== null) {\n                        sound = this._queue[this._currentIndex];\n                    }\n                    break;\n                case PlayerCore.PLAY_SOUND_NEXT:\n                    if (this._queue[this._currentIndex + 1] !== undefined) {\n                        soundIndex = this._currentIndex + 1;\n                        sound = this._queue[soundIndex];\n                    } else if (this._options.loopQueue) {\n                        // if last sound is playing and loop is enabled\n                        // on next we jump to first sound\n                        soundIndex = 0;\n                        sound = this._queue[soundIndex];\n                    }\n                    break;\n                case PlayerCore.PLAY_SOUND_PREVIOUS:\n                    if (this._queue[this._currentIndex - 1] !== undefined) {\n                        soundIndex = this._currentIndex - 1;\n                        sound = this._queue[soundIndex];\n                    } else if (this._options.loopQueue) {\n                        // if first sound is playing and loop is enabled\n                        // on previous we jump to last sound\n                        soundIndex = this._queue.length - 1;\n                        sound = this._queue[soundIndex];\n                    }\n                    break;\n                case PlayerCore.PLAY_SOUND_FIRST:\n                    if (this._queue.length > 0) {\n                        soundIndex = 0;\n                        sound = this._queue[soundIndex];\n                    }\n                    break;\n                case PlayerCore.PLAY_SOUND_LAST:\n                    if (this._queue.length > 0) {\n                        soundIndex = this._queue.length - 1;\n                        sound = this._queue[soundIndex];\n                    }\n                    break;\n                default:\n                    // if \"which sound to play\" (soundId) is a string or number\n                    [sound, soundIndex] = this._findSoundById({ soundId: whichSound });\n            }\n        }\n\n        if (soundIndex !== null && updateIndex) {\n            this._currentIndex = soundIndex;\n        }\n\n        return sound;\n\n    }\n\n    protected _findSoundById({ soundId }: IFindSoundById): [ISound, number] {\n\n        let sound: ISound = null;\n        let soundIndex = 0;\n\n        this._queue.some((soundFromQueue, index) => {\n\n            if (soundFromQueue.id === soundId) {\n                sound = soundFromQueue;\n                soundIndex = index;\n                return true;\n            }\n\n        });\n\n        return [sound, soundIndex];\n\n    }\n\n    protected _findBestSource(soundSource: (ISoundSource)[] | ISoundSource): IFindBestSourceResponse {\n\n        const bestSource: IBestSource = {\n            url: null,\n            codec: null\n        };\n\n        let sources: (ISoundSource)[];\n\n        // if the source is not an array but a single source object\n        // we first transform it into an array\n        if (!Array.isArray(soundSource)) {\n            sources = [soundSource];\n        } else {\n            sources = soundSource;\n        }\n\n        let i = 0;\n\n        while (i < sources.length) {\n\n            const source = sources[i]\n            let soundUrl = '';\n\n            // if the player had as option a baseUrl for sounds add it now\n            if (this._options.soundsBaseUrl !== '') {\n                soundUrl = this._options.soundsBaseUrl;\n            }\n\n            soundUrl += source.url;\n\n            // check if the codec (if any got specified) is supported\n            // by the device\n            let isCodecSupported = true;\n\n            if (source.codec !== null) {\n                isCodecSupported = this._checkCodecSupport(source.codec);\n            }\n\n            // only if the codec of the source is supported\n            if (isCodecSupported) {\n\n                if (source.isPreferred) {\n                    // if multiple sources but this one if preferred and if previous\n                    // sources also had a supported codec we still overwrite the\n                    // previous match\n                    bestSource.url = soundUrl;\n                    bestSource.codec = source.codec;\n                    // so the source is preferred and supported so we can exit early\n                    break;\n                } else {\n                    // if no best source has been found so far, we don't\n                    // care if it's preferred it's automatically chosen\n                    // as best\n                    bestSource.url = soundUrl;\n                    bestSource.codec = source.codec;\n                    // source is supported, but maybe there is preferred & supported\n                    // so we don't exit the loop just yet\n                }\n\n            }\n\n            i++;\n\n        }\n\n        return bestSource;\n\n    }\n\n    protected _checkCodecSupport(codec: string): boolean {\n\n        let mediaMimeTypes: string[];\n        let error = '';\n\n        switch (codec) {\n            case 'ogg':\n                mediaMimeTypes = ['audio/ogg; codecs=\"vorbis\"'];\n                break;\n            case 'oga':\n                mediaMimeTypes = ['audio/ogg; codecs=\"vorbis\"'];\n                break;\n            case 'mp3':\n                mediaMimeTypes = ['audio/mpeg; codecs=\"mp3\"'];\n                break;\n            case 'opus':\n                mediaMimeTypes = ['audio/ogg; codecs=\"opus\"', 'audio/webm; codecs=\"opus\"'];\n                break;\n            case 'wav':\n                mediaMimeTypes = ['audio/wav; codecs=\"1\"'];\n                break;\n            case 'm4a':\n                mediaMimeTypes = ['audio/m4a;', 'audio/x-m4a;'];\n                break;\n            case 'm4p':\n                mediaMimeTypes = ['audio/m4p;', 'audio/x-m4p;'];\n                break;\n            case 'caf':\n                mediaMimeTypes = ['audio/x-caf;'];\n                break;\n            case 'aac':\n                mediaMimeTypes = ['audio/aac;'];\n                break;\n            case 'weba':\n            case 'webm':\n                mediaMimeTypes = ['audio/webm; codecs=\"vorbis\"'];\n                break;\n            case 'flac':\n                mediaMimeTypes = ['audio/flac;', 'audio/x-flac;'];\n                break;\n            default:\n                error = 'unrecognised codec';\n                break;\n        }\n\n        if (error) {\n            throw new PlayerError(error);\n        }\n\n        return this._checkMimeTypesSupport(mediaMimeTypes);\n\n    }\n\n    protected _checkMimeTypesSupport(mediaMimeTypes: string[]): boolean {\n\n        const deviceAudio = new Audio();\n\n        let isSupported = false;\n\n        mediaMimeTypes.forEach((mediaMimeType) => {\n\n            const isMediaTypeSupported: string = deviceAudio.canPlayType(mediaMimeType).replace(/^no$/, '');\n\n            if (isMediaTypeSupported) {\n                isSupported = true;\n            }\n\n        });\n\n        return isSupported;\n\n    }\n\n    public pause(): void {\n\n        // get the current sound\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        if (currentSound === null) {\n            return;\n        }\n\n        if (currentSound.state === PlayerSound.SOUND_STATE_PAUSED) {\n            // TODO: just return or throw an error\n            return;\n        }\n\n        const timeAtPause = currentSound.getCurrentTime();\n\n        currentSound.playTimeOffset += timeAtPause - currentSound.startTime;\n\n        // trigger paused event\n        if (currentSound.onPaused !== null) {\n            currentSound.onPaused(currentSound.playTimeOffset);\n        }\n\n        this._stop(currentSound, PlayerSound.SOUND_STATE_PAUSED);\n\n    }\n\n    public stop(): void {\n\n        // get the current sound\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        if (currentSound === null) {\n            return;\n        }\n\n        // check if sound is already stopped\n        if (currentSound.state === PlayerSound.SOUND_STATE_STOPPED) {\n            // TODO: just return or throw an error\n            return;\n        }\n\n        // freeze the audio context\n        this._playerAudio.freezeAudioContext();\n\n        const timeAtStop = currentSound.getCurrentTime();\n\n        currentSound.playTimeOffset += timeAtStop - currentSound.startTime;\n\n        // trigger stopped event\n        if (currentSound.onStopped !== null) {\n            currentSound.onStopped(currentSound.playTimeOffset);\n        }\n\n        this._stop(currentSound, PlayerSound.SOUND_STATE_STOPPED);\n\n    }\n\n    protected _stop(sound: ISound, soundState: typeSoundStates): void {\n\n        // if it is fully stopped, not just paused\n        if (soundState === PlayerSound.SOUND_STATE_STOPPED) {\n            // reset the playTimeOffset\n            sound.playTimeOffset = 0;\n            // reset the \"is ready to pLay\"\n            //sound.isReadyToPLay = false;\n            // reset \"first time played\"\n            sound.firstTimePlayed = true;\n        }\n\n        if (sound.sourceNode !== null) {\n\n            if (sound.sourceNode instanceof AudioBufferSourceNode) {\n                // to stop playing if using the AudioBufferSourceNode use the stop method\n                sound.sourceNode.stop(0);\n            } else if (sound.sourceNode instanceof MediaElementAudioSourceNode) {\n                // to stop playing if using the MediaElementAudioSourceNode use the pause method\n                sound.sourceNode.mediaElement.pause();\n            }\n\n            this._playerAudio.cleanUpAudiBufferSourceNode(sound);\n\n            // state is now stopped\n            sound.state = soundState;\n\n            if (this._playingProgressRequestId !== null) {\n                cancelAnimationFrame(this._playingProgressRequestId);\n                this._playingProgressPreviousTimestamp = 0;\n            }\n\n        }\n\n    }\n\n    public next(): void {\n\n        // alias for play next\n        this.play({ whichSound: PlayerCore.PLAY_SOUND_NEXT });\n\n    }\n\n    public previous(): void {\n\n        // alias for play previous\n        this.play({ whichSound: PlayerCore.PLAY_SOUND_PREVIOUS });\n\n    }\n\n    public first(): void {\n\n        // alias for play first\n        this.play({ whichSound: PlayerCore.PLAY_SOUND_FIRST });\n\n    }\n\n    public last(): void {\n\n        // alias for play last\n        this.play({ whichSound: PlayerCore.PLAY_SOUND_LAST });\n\n    }\n\n    protected _playingProgress(sound: ISound): void {\n\n        const timeNow = sound.getCurrentTime();\n\n        sound.playTime = (timeNow - sound.startTime) + sound.playTimeOffset;\n\n        const duration = sound.getDuration();\n        const playingPercentage = (sound.playTime / duration) * 100;\n\n        sound.playedTimePercentage = playingPercentage;\n\n        sound.onPlaying(playingPercentage, duration, sound.playTime);\n\n    }\n\n    public setVisibilityAutoMute(visibilityAutoMute: boolean): void {\n\n        this._options.visibilityAutoMute = visibilityAutoMute;\n\n        if (visibilityAutoMute) {\n            document.addEventListener('visibilitychange', this._handleVisibilityChange.bind(this), false);\n        } else {\n            document.removeEventListener('visibilitychange', this._handleVisibilityChange.bind(this), false);\n        }\n\n    }\n\n    public getVisibilityAutoMute(): boolean {\n        return this._options.visibilityAutoMute;\n    }\n\n    protected _handleVisibilityChange(): void {\n\n        let hiddenKeyword: string;\n\n        if (typeof document.hidden !== 'undefined') { // Opera 12.10 and Firefox 18 and later support\n            hiddenKeyword = 'hidden';\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } else if (typeof (document as any).msHidden !== 'undefined') {\n            hiddenKeyword = 'msHidden';\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } else if (typeof (document as any).webkitHidden !== 'undefined') {\n            hiddenKeyword = 'webkitHidden';\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if ((document as any)[hiddenKeyword]) {\n            this.mute();\n        } else {\n            this.unMute();\n        }\n    }\n\n    public async disconnect(): Promise<void> {\n\n        // adding another check here to cancel animation frame because:\n        // a player can be disconnect while song is paused or playing\n        // which means the cancelAnimationFrame in _stop would never get triggered\n        if (this._playingProgressRequestId !== null) {\n            cancelAnimationFrame(this._playingProgressRequestId);\n        }\n\n        await this._playerAudio.shutDown(this._queue);\n\n    }\n\n    public async getAudioContext(): Promise<AudioContext> {\n\n        const audioContext = await this._playerAudio.getAudioContext();\n\n        return audioContext;\n\n    }\n\n}\n"],"names":[],"mappings":"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"}