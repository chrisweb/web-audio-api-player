{"version":3,"file":"index.min.js","sources":["../src/library/sound.ts","../src/library/audio.ts","../src/library/request.ts","../src/library/core.ts"],"sourcesContent":["const SOUND_STATE_STOPPED = 'sound_state_stopped';\nconst SOUND_STATE_PAUSED = 'sound_state_paused';\nconst SOUND_STATE_PLAYING = 'sound_state_playing';\nconst SOUND_STATE_SEEKING = 'sound_state_seeking';\n\nexport type typeSoundStates = typeof SOUND_STATE_STOPPED | typeof SOUND_STATE_PAUSED | typeof SOUND_STATE_PLAYING | typeof SOUND_STATE_SEEKING;\n\nexport interface IOnProgress {\n    (playingPercentage: number, duration: number, playTime: number): void;\n}\n\nexport interface IOnEnded {\n    (willPlayNext: boolean): void;\n}\n\nexport interface IOnStarted {\n    (playTimeOffset: number): void;\n}\n\nexport interface IOnPaused {\n    (playTime: number): void;\n}\n\nexport interface IOnResumed {\n    (playTime: number): void;\n}\n\nexport interface IOnStopped {\n    (playTime: number): void;\n}\n\nexport interface IOnSeeking {\n    (seekingPercentage: number, duration: number, playTime: number): void;\n}\n\nexport interface ISoundSource {\n    url: string;\n    codec?: string;\n    isPreferred?: boolean;\n}\n\nexport interface ISoundAttributes {\n    // source(s) are NOT mandatory as user can provide an arrayBuffer\n    // and / or audioBuffer in which case the source url is not needed\n    source?: (ISoundSource)[] | ISoundSource;\n    id?: number | string;\n    loop?: boolean;\n    audioBuffer?: AudioBuffer;\n    arrayBuffer?: ArrayBuffer;\n    duration?: number;\n    seekPercentage?: number;\n\n    // callbacks\n    onLoading?: IOnProgress;\n    onPlaying?: IOnProgress;\n    onEnded?: IOnEnded;\n    onStarted?: IOnStarted;\n    onStopped?: IOnStopped;\n    onPaused?: IOnPaused;\n    onResumed?: IOnResumed;\n    onSeeking?: IOnSeeking;\n}\n\nexport interface ISound extends ISoundAttributes, ISoundSource {\n    // public properties\n    sourceNode: AudioBufferSourceNode | MediaElementAudioSourceNode;\n    gainNode: GainNode;\n    isReadyToPLay: boolean;\n    isBuffered: boolean;\n    isBuffering: boolean;\n    audioElement: HTMLAudioElement;\n    audioBufferDate: Date;\n    playTimeOffset: number;\n    startTime: number;\n    playTime: number;\n    playedTimePercentage: number;\n    state: typeSoundStates;\n    loadingProgress: number;\n    firstTimePlayed: boolean;\n    isConnectToPlayerGain: boolean;\n    durationSetManually: boolean;\n    elapsedPlayTime: number;\n    // methods\n    getCurrentTime(): number;\n    getDuration(): number;\n    setDuration(duration: number): void;\n    setLoop(loop: boolean): void;\n    getLoop(): boolean;\n}\n\nexport class PlayerSound implements ISound {\n\n    // static constants\n    static readonly SOUND_STATE_STOPPED = 'sound_state_stopped';\n    static readonly SOUND_STATE_PAUSED = 'sound_state_paused';\n    static readonly SOUND_STATE_PLAYING = 'sound_state_playing';\n    static readonly SOUND_STATE_SEEKING = 'sound_state_seeking';\n\n    // public properties\n    public source: (ISoundSource)[] | ISoundSource;\n    public url: string = null;\n    public codec: string = null;\n    public id: number | string;\n    public loop: boolean = false;\n    public sourceNode: AudioBufferSourceNode | MediaElementAudioSourceNode = null;\n    public gainNode: GainNode = null;\n    public isReadyToPLay = false;\n    public isBuffered = false;\n    public isBuffering = false;\n    public audioElement: HTMLAudioElement = null;\n    public audioBuffer: AudioBuffer = null;\n    public arrayBuffer: ArrayBuffer = null;\n    public audioBufferDate: Date = null;\n    public playTimeOffset = 0;\n    public startTime = 0;\n    public playTime = 0;\n    public playedTimePercentage = 0;\n    public state: typeSoundStates = SOUND_STATE_STOPPED;\n    public loadingProgress = 0;\n    public duration: number = null;\n    public durationSetManually: boolean = false;\n    public firstTimePlayed = true;\n    public isConnectToPlayerGain = false;\n    // elapsedPlayTime is used to adjust the playtime\n    // when playing audio buffers\n    // on seek, pause or when there is a playTimeOffset\n    // see getCurrentTime function\n    public elapsedPlayTime = 0;\n    // the percentage to seek to\n    public seekPercentage = 0; \n    \n    // callbacks\n    public onLoading: IOnProgress;\n    public onPlaying: IOnProgress;\n    public onEnded: IOnEnded;\n    public onStarted: IOnStarted;\n    public onStopped: IOnStopped;\n    public onPaused: IOnPaused;\n    public onResumed: IOnResumed;\n    public onSeeking?: IOnSeeking;\n\n    constructor(soundAttributes: ISoundAttributes) {\n\n        if (!Array.isArray(soundAttributes.source)) {\n            this.source = [soundAttributes.source];\n        } else {\n            this.source = soundAttributes.source;\n        }\n\n        if (typeof soundAttributes.id !== 'undefined') {\n            this.id = soundAttributes.id;\n        } else {\n            this.id = this._generateSoundId()\n        }\n\n        this.loop = soundAttributes.loop || false;\n\n        this.seekPercentage = soundAttributes.seekPercentage || 0;\n\n        // the user can set the duration manually\n        // this is usefull if we need to convert the position percentage into seconds but don't want to preload the song\n        // to get the duration the song has to get preloaded as the duration is a property of the audioBuffer\n        if (!isNaN(soundAttributes.duration)) {\n            this.duration = soundAttributes.duration;\n            this.durationSetManually = true;\n        }\n\n        if (typeof soundAttributes.onLoading === 'function') {\n            this.onLoading = soundAttributes.onLoading;\n        } else {\n            this.onLoading = null;\n        }\n\n        if (typeof soundAttributes.onPlaying === 'function') {\n            this.onPlaying = soundAttributes.onPlaying;\n        } else {\n            this.onPlaying = null;\n        }\n\n        if (typeof soundAttributes.onStarted === 'function') {\n            this.onStarted = soundAttributes.onStarted;\n        } else {\n            this.onStarted = null;\n        }\n\n        if (typeof soundAttributes.onEnded === 'function') {\n            this.onEnded = soundAttributes.onEnded;\n        } else {\n            this.onEnded = null;\n        }\n\n        if (typeof soundAttributes.onStopped === 'function') {\n            this.onStopped = soundAttributes.onStopped;\n        } else {\n            this.onStopped = null;\n        }\n\n        if (typeof soundAttributes.onPaused === 'function') {\n            this.onPaused = soundAttributes.onPaused;\n        } else {\n            this.onPaused = null;\n        }\n\n        if (typeof soundAttributes.onResumed === 'function') {\n            this.onResumed = soundAttributes.onResumed;\n        } else {\n            this.onResumed = null;\n        }\n\n        if (typeof soundAttributes.onSeeking === 'function') {\n            this.onSeeking = soundAttributes.onSeeking;\n        } else {\n            this.onSeeking = null;\n        }\n\n        if (soundAttributes.arrayBuffer instanceof ArrayBuffer) {\n            this.arrayBuffer = soundAttributes.arrayBuffer;\n        }\n\n        if (soundAttributes.audioBuffer instanceof AudioBuffer) {\n            this.audioBuffer = soundAttributes.audioBuffer;\n            this.isBuffering = false;\n            this.isBuffered = true;\n            this.audioBufferDate = new Date();\n            // only update duration if it did not get set manually\n            if (!this.durationSetManually) {\n                this.duration = this.audioBuffer.duration;\n            }\n        }\n\n    }\n\n    public getCurrentTime(): number {\n\n        let currentTime: number;\n\n        if (this.sourceNode !== null) {\n            if (this.sourceNode instanceof AudioBufferSourceNode) {\n                currentTime = (this.sourceNode.context.currentTime - this.startTime) + this.elapsedPlayTime;\n            } else if (this.sourceNode instanceof MediaElementAudioSourceNode) {\n                currentTime = this.audioElement.currentTime;\n            }\n        }\n\n        return currentTime;\n\n    }\n\n    public getDuration(): number {\n\n        return this.duration;\n\n    }\n\n    public setDuration(duration: number): void {\n\n        if (!isNaN(duration)) {\n            this.duration = duration;\n            this.durationSetManually = true;\n        }\n\n    }\n\n    public setLoop(loop: boolean): void {\n\n        this.loop = loop;\n\n        if (this.state === PlayerSound.SOUND_STATE_PLAYING) {\n\n            if (this.sourceNode !== null) {\n                if (this.sourceNode instanceof AudioBufferSourceNode) {\n                    this.sourceNode.loop = loop;\n                } else if (this.sourceNode instanceof MediaElementAudioSourceNode) {\n                    this.sourceNode.mediaElement.loop = loop;\n                }\n            }\n\n        }\n\n    }\n\n    public getLoop(): boolean {\n\n        return this.loop;\n\n    }\n\n    protected _generateSoundId() {\n\n        return Date.now().toString(36) + Math.random().toString(36).substring(2)\n\n    }\n\n}\n","import { ISound } from './sound';\n\ntype OnEndedCallbackType = (event: Event) => void\n\nexport interface IAudioOptions {\n    audioContext: AudioContext;\n    unlockAudioOnFirstUserInteraction: boolean;\n    volume: number;\n    persistVolume: boolean;\n    loadPlayerMode: string;\n    addAudioElementsToDom: boolean;\n    volumeTransitionTime: number;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/AudioNode\nexport interface IAudioNodes {\n    // https://developer.mozilla.org/en-US/docs/Web/API/GainNode\n    gainNode: GainNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\n    pannerNode?: PannerNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode\n    stereoPannerNode?: StereoPannerNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/DelayNode\n    delayNode?: DelayNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode\n    scriptProcessorNode?: ScriptProcessorNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode\n    analyserNode?: AnalyserNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\n    biquadFilterNode?: BiquadFilterNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode\n    channelMergeNode?: ChannelMergerNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode\n    channelSplitterNode?: ChannelSplitterNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode\n    convolverNode?: ConvolverNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode\n    dynamicCompressorNode?: DynamicsCompressorNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode\n    oscillatorNode?: OscillatorNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode\n    waveShaperNode?: WaveShaperNode;\n}\n\nexport class PlayerAudio {\n\n    protected _options;\n    protected _audioContext: AudioContext = null;\n    protected _volume: number = null;\n    protected _audioNodes: IAudioNodes = {\n        gainNode: null,\n    };\n    protected _audioElement: HTMLAudioElement = null;\n    protected _mediaElementAudioSourceNode: MediaElementAudioSourceNode = null;\n    protected _isAudioUnlocked: boolean = false;\n    protected _isAudioUnlocking: boolean = false;\n\n    constructor(options: IAudioOptions) {\n\n        this._options = options;\n\n        this._initialize();\n\n    }\n\n    protected _initialize(): void {\n\n        // I was planning on using the \"first user interaction hack\" only (on mobile)\n        // to check if the autoplay policy prevents me from playing a sound\n        // programmatically (without user click)\n        // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getAutoplayPolicy\n        // but this feature is only implemented on firefox (as of 19.09.2023)\n\n        if (this._options.unlockAudioOnFirstUserInteraction) {\n            this._addFirstUserInteractionEventListeners();\n        }\n\n    }\n\n    public getAudioNodes() {\n        return this._audioNodes;\n    }\n\n    public async decodeAudio(arrayBuffer: ArrayBuffer): Promise<AudioBuffer> {\n\n        const audioContext = await this.getAudioContext();\n\n        // Note to self:\n        // the new decodeAudioData returns a promise, older versions accept as second\n        // and third parameter, which are a success and an error callback funtion\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData\n\n        return await audioContext.decodeAudioData(arrayBuffer);\n\n    }\n\n    protected _createAudioContext(): Promise<void> {\n\n        if (this._audioContext instanceof AudioContext) {\n            return;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const WebAudioContext: typeof AudioContext = window.AudioContext || (window as any).webkitAudioContext;\n\n        // initialize the audio context\n        if (this._options.audioContext !== null) {\n            this._audioContext = this._options.audioContext;\n        } else {\n            this._audioContext = new WebAudioContext();\n        }\n\n    }\n\n    protected _addFirstUserInteractionEventListeners(): void {\n\n        if (this._options.unlockAudioOnFirstUserInteraction) {\n            document.addEventListener('keydown', this.unlockAudio.bind(this));\n            document.addEventListener('mousedown', this.unlockAudio.bind(this));\n            document.addEventListener('pointerdown', this.unlockAudio.bind(this));\n            document.addEventListener('pointerup', this.unlockAudio.bind(this));\n            document.addEventListener('touchend', this.unlockAudio.bind(this));\n        }\n\n    }\n\n    protected _removeFirstUserInteractionEventListeners(): void {\n\n        if (this._options.unlockAudioOnFirstUserInteraction) {\n            document.removeEventListener('keydown', this.unlockAudio.bind(this));\n            document.removeEventListener('mousedown', this.unlockAudio.bind(this));\n            document.removeEventListener('pointerdown', this.unlockAudio.bind(this));\n            document.removeEventListener('pointerup', this.unlockAudio.bind(this));\n            document.removeEventListener('touchend', this.unlockAudio.bind(this));\n        }\n\n    }\n\n    public unlockAudio(): Promise<void> {\n\n        return new Promise((resolve, reject) => {\n\n            if (this._isAudioUnlocking) {\n                return resolve();\n            }\n\n            if (this._isAudioUnlocked) {\n                return resolve();\n            }\n\n            this._isAudioUnlocking = true;\n\n            // it is important to create the audio element before attempting\n            // to play the empty buffer, if creation is done after the\n            // element will get created but as no sound has been played\n            // it will not get unlocked\n            // meaning to unlock an audio element it is not enough to create\n            // one on user interaction but you also need to play a sound\n            if (this._options.loadPlayerMode === 'player_mode_audio') {\n\n                // force the creation to be sure we have a new audio element\n                // and don't use one that got created previously\n                const forceCreate = true;\n\n                // on iOS (mobile) the audio element you want to use needs to have been created\n                // as a direct result of an user interaction\n                // after it got unlocked we re-use that element for all sounds\n                this._createAudioElement(forceCreate).catch((error) => {\n                    console.error(error);\n                    this._isAudioUnlocking = false;\n                    return reject();\n                });\n\n            }\n\n            // make sure the audio context is not suspended\n            // on android this is what unlocks audio\n            this.getAudioContext().then(() => {\n\n                // create an (empty) buffer\n                const placeholderBuffer = this._audioContext.createBuffer(1, 1, 22050);\n\n                // https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBufferSource\n                let bufferSource = this._audioContext.createBufferSource();\n\n                bufferSource.onended = () => {\n\n                    bufferSource.disconnect(0);\n\n                    this._removeFirstUserInteractionEventListeners();\n\n                    bufferSource.disconnect(0);\n\n                    bufferSource.buffer = null;\n                    bufferSource = null;\n\n                    this._isAudioUnlocked = true;\n                    this._isAudioUnlocking = false;\n                    return resolve();\n\n                };\n\n                bufferSource.buffer = placeholderBuffer;\n                bufferSource.connect(this._audioContext.destination);\n                // attempt to play the empty buffer to check if there is an error\n                // or if it can be played, in which case audio is unlocked\n                bufferSource.start(0);\n\n            }).catch((error) => {\n                console.error(error);\n                this._isAudioUnlocking = false;\n                return reject();\n            });\n\n        });\n\n    }\n\n    protected async _createAudioElementAndSource(): Promise<void> {\n\n        await this._createAudioElement();\n\n        await this._createMediaElementAudioSourceNode();\n\n    }\n\n    protected async _createAudioElement(forceCreate?: boolean): Promise<void> {\n\n        if (this._audioElement === null || forceCreate === true) {\n\n            const audioElement = new Audio();\n\n            audioElement.controls = false;\n            audioElement.autoplay = false;\n            audioElement.preload = 'auto';\n            audioElement.volume = 1;\n            audioElement.id = 'web-audio-api-player';\n\n            this._audioElement = audioElement;\n\n            if (this._options.addAudioElementsToDom) {\n                document.body.appendChild(audioElement);\n            }\n\n        }\n\n    }\n\n    public async getAudioElement(): Promise<HTMLAudioElement> {\n\n        if (this._audioElement === null) {\n            await this._createAudioElementAndSource();\n        }\n\n        return this._audioElement;\n\n    }\n\n    public async getAudioContext(): Promise<AudioContext> {\n\n        if (this._audioContext === null || this._audioContext.state === 'closed') {\n            await this._createAudioContext();\n        } else if (this._audioContext.state === 'suspended') {\n            await this.unfreezeAudioContext();\n        }\n\n        return this._audioContext;\n\n    }\n\n    public unfreezeAudioContext(): Promise<void> {\n\n        // did resume get implemented\n        if (typeof this._audioContext.resume === 'undefined') {\n\n            // this browser does not support resume\n            // just send back a promise as resume would do\n            return Promise.resolve();\n\n        } else {\n\n            // resume the audio hardware access\n            // audio context resume returns a promise\n            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume\n            return this._audioContext.resume();\n\n        }\n\n    }\n\n    public freezeAudioContext(): Promise<void> {\n\n        // did suspend get implemented\n        if (typeof this._audioContext.suspend === 'undefined') {\n\n            return Promise.resolve();\n\n        } else {\n\n            // halt the audio hardware access temporarily to reduce CPU and battery usage\n            // especially useful on mobile to prevent battery drain\n            return this._audioContext.suspend();\n\n        }\n\n    }\n\n    public isAudioContextFrozen(): boolean {\n\n        return this._audioContext.state === 'suspended' ? true : false;\n\n    }\n\n    public detectAudioContextSupport(): boolean {\n\n        // basic audio context detection\n        let audioContextSupported = false;\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (typeof (window as any).webkitAudioContext !== 'undefined') {\n            audioContextSupported = true;\n        } else if (typeof AudioContext !== 'undefined') {\n            audioContextSupported = true;\n        }\n\n        return audioContextSupported;\n\n    }\n\n    public detectAudioElementSupport(): boolean {\n\n        // basic audio element detection\n        return !!document.createElement('audio').canPlayType;\n\n    }\n\n    protected async _createAudioBufferSourceNode(): Promise<AudioBufferSourceNode> {\n\n        const audioContext = await this.getAudioContext();\n\n        return audioContext.createBufferSource();\n\n    }\n\n    protected async _createMediaElementAudioSourceNode(): Promise<void> {\n\n        if (this._mediaElementAudioSourceNode === null && this._audioElement !== null) {\n\n            const audioContext = await this.getAudioContext();\n\n            // createMediaElementSource: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaElementSource\n            this._mediaElementAudioSourceNode = audioContext.createMediaElementSource(this._audioElement);\n\n        }\n\n    }\n\n    protected _destroyMediaElementAudioSourceNode(): void {\n\n        if (this._mediaElementAudioSourceNode !== null) {\n\n            if (typeof this._mediaElementAudioSourceNode.mediaElement !== 'undefined') {\n                this._mediaElementAudioSourceNode.mediaElement.remove();\n            }\n\n            this._mediaElementAudioSourceNode.disconnect();\n            this._mediaElementAudioSourceNode = null;\n        }\n\n    }\n\n    protected _destroyAudioBufferSourceNode(): void {\n\n        if (this._mediaElementAudioSourceNode !== null) {\n\n            this._mediaElementAudioSourceNode.disconnect();\n\n        }\n\n    }\n\n    protected async _destroyAudioContext(): Promise<void> {\n\n        if (this._audioContext !== null && this._audioContext.state !== 'closed') {\n            await this._audioContext.close();\n            this._audioContext = null;\n        }\n\n    }\n\n    public async shutDown(songsQueue: ISound[]): Promise<void> {\n\n        this._removeFirstUserInteractionEventListeners();\n\n        songsQueue.forEach((sound) => {\n            this.disconnectSound(sound);\n        });\n\n        this._destroyMediaElementAudioSourceNode();\n        this._destroyAudioBufferSourceNode();\n\n        this._disconnectPlayerGainNode();\n\n        await this._destroyAudioContext();\n\n    }\n\n\n    protected async _getPlayerGainNode(): Promise<GainNode> {\n\n        // the player (master) gain node\n        let gainNode: GainNode;\n\n        if (this._audioNodes.gainNode instanceof GainNode) {\n\n            gainNode = this._audioNodes.gainNode;\n\n        } else {\n\n            const audioContext = await this.getAudioContext();\n\n            // Note: a volume control (GainNode) should always\n            // be the last node that gets connected\n            // so that volume changes take immediate effect\n            gainNode = audioContext.createGain();\n\n            this._initializeVolume(gainNode);\n\n            // final audio graph step: connect the gain node to the audio destination node\n            gainNode.connect(audioContext.destination);\n\n            this._audioNodes.gainNode = gainNode;\n\n        }\n\n        return gainNode;\n\n    }\n\n    protected _disconnectPlayerGainNode(): void {\n\n        if (this._audioNodes.gainNode !== null) {\n            this._audioNodes.gainNode.disconnect();\n            this._audioNodes.gainNode = null;\n        }\n\n    }\n\n    public async connectSound(sound: ISound, onEndedCallback: OnEndedCallbackType): Promise<void> {\n\n        if (sound.isConnectToPlayerGain) {\n            return;\n        }\n\n        if (this._options.loadPlayerMode === 'player_mode_ajax') {\n\n            // get a new audio buffer source node\n            // Note: remember these are \"one use\" only\n            // https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode\n            const audioBufferSourceNode = await this._createAudioBufferSourceNode();\n\n            // create the sound gain node\n            sound.gainNode = audioBufferSourceNode.context.createGain();\n\n            // connect the source to the sound gain node\n            audioBufferSourceNode.connect(sound.gainNode);\n\n            // do we loop this song?\n            audioBufferSourceNode.loop = sound.loop;\n\n            // NOTE: the source nodes onended handler won't have any effect if the loop property\n            // is set to true, as the audio won't stop playing\n            audioBufferSourceNode.onended = onEndedCallback;\n\n            sound.sourceNode = audioBufferSourceNode;\n\n        } else if (this._options.loadPlayerMode === 'player_mode_audio') {\n\n            await this._createAudioElementAndSource();\n\n            // create the sound gain node\n            sound.gainNode = this._mediaElementAudioSourceNode.context.createGain();\n\n            // connect the source to the sound gain node\n            this._mediaElementAudioSourceNode.connect(sound.gainNode);\n\n            // do we loop this song\n            this._mediaElementAudioSourceNode.mediaElement.loop = sound.loop;\n\n            // NOTE: the source nodes onended handler won't have any effect if the loop property\n            // is set to true, as the audio won't stop playing\n            this._mediaElementAudioSourceNode.mediaElement.onended = onEndedCallback;\n\n            sound.sourceNode = this._mediaElementAudioSourceNode;\n\n        }\n\n        // set the gain by default always to 1\n        sound.gainNode.gain.value = 1;\n\n        const playerGainNode = await this._getPlayerGainNode();\n\n        sound.gainNode.connect(playerGainNode);\n        sound.isConnectToPlayerGain = true;\n\n    }\n\n    public async disconnectSound(sound: ISound): Promise<void> {\n\n        if (!sound.isConnectToPlayerGain) {\n            return;\n        }\n\n        if (sound.sourceNode !== null) {\n            sound.sourceNode.disconnect();\n            // we set the source node to null, so that it can get garbage collected\n            // as specified in the specs: you can't reuse an audio buffer source node,\n            // after it got stopped\n            sound.sourceNode = null;\n        }\n\n        if (sound.gainNode !== null) {\n            sound.gainNode.disconnect();\n            sound.gainNode = null;\n            sound.isConnectToPlayerGain = false;\n        }\n\n        if (sound.audioElement !== null) {\n            sound.audioElement = null;\n        }\n\n    }\n\n    protected async _changePlayerGainValue(gainValue: number): Promise<void> {\n\n        if (this._audioNodes.gainNode instanceof GainNode) {\n\n            const audioContext = await this.getAudioContext();\n            const timeConstantInMilliseconds = (!isNaN(this._options.volumeTransitionTime) && this._options.volumeTransitionTime > 0) ? this._options.volumeTransitionTime : 100\n            const timeConstantInSeconds = timeConstantInMilliseconds / 1000;\n\n            try {\n                this._audioNodes.gainNode.gain.setTargetAtTime(gainValue, audioContext.currentTime, timeConstantInSeconds);\n            } catch (error) {\n                console.error('gainValue: ' + gainValue + ' ' + error)\n            }\n\n        }\n\n    }\n\n    public async setVolume(volume: number, forceUpdateUserVolume = true): Promise<number> {\n\n        // we sometimes change the volume, for a fade in/out or when muting, but\n        // in this cases we don't want to update the user's persisted volume, in\n        // which case forceUpdateUserVolume is false else it would be true\n        if (this._options.persistVolume && forceUpdateUserVolume) {\n            localStorage.setItem('WebAudioAPIPlayerVolume', volume.toString());\n        }\n\n        // the gain values we use range from 0 to 1\n        // so we need to divide the volume (in percent) by 100 to get the gain value\n        const newGainValue = volume / 100;\n\n        if (this._audioNodes.gainNode instanceof GainNode) {\n\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n            const currentGainRounded = Math.round((this._audioNodes.gainNode.gain.value + Number.EPSILON) * 100) / 100;\n\n            // check if the volume changed\n            if (newGainValue !== currentGainRounded) {\n\n                // Note to self: the gain value changes the amplitude of the sound wave\n                // a gain value set to 1 does nothing\n                // values between 0 and 1 reduce the loudness, above 1 they amplify the loudness\n                // negative values work too, but they invert the waveform\n                // so -1 is as loud as 1 but with -1 the waveform is inverted\n                await this._changePlayerGainValue(newGainValue);\n\n            }\n\n        }\n\n        this._volume = volume;\n\n        return volume;\n\n    }\n\n    public getVolume(): number {\n\n        let volume: number;\n\n        // check if volume has already been set\n        if (this._volume !== null) {\n\n            volume = this._volume;\n\n        } else if (this._options.persistVolume) {\n\n            // if persist volume is enabled\n            // check if there already is a user volume in localstorage\n            const userVolumeInPercent = parseInt(localStorage.getItem('WebAudioAPIPlayerVolume'));\n\n            volume = userVolumeInPercent;\n\n        }\n\n        // if still no value, fallback to default options value\n        if (typeof volume === 'undefined' || isNaN(volume)) {\n\n            if (!isNaN(this._options.volume)) {\n                volume = this._options.volume;\n            } else {\n                volume = 80;\n                console.error('player options volume is not a number')\n            }\n            \n        }\n\n        this._volume = volume;\n\n        return volume;\n\n    }\n\n    protected _initializeVolume(gainNode: GainNode): void {\n\n        if (this._options.persistVolume) {\n            // if persist volume is enabled\n            // check if there already is a user volume in localstorage\n            const userVolumeInPercent = parseInt(localStorage.getItem('WebAudioAPIPlayerVolume'));\n            const gainValue = userVolumeInPercent / 100;\n\n            if (!isNaN(userVolumeInPercent)) {\n                gainNode.gain.value = gainValue;\n            }\n\n            this._volume = userVolumeInPercent;\n        }\n\n\n        // if no \"user volume\" got found\n        // take the default options volume\n        if (this._volume === null) {\n            const gainValue = this._options.volume / 100;\n            gainNode.gain.value = gainValue;\n            this._volume = this._options.volume;\n        }\n\n    }\n\n}\n","import { IOnProgress } from './sound';\n\nexport interface IRequested {\n    url: string;\n    loadingProgress: number;\n    onLoading?: IOnProgress;\n}\n\nexport class PlayerRequest {\n\n    public getArrayBuffer(requested: IRequested): Promise<ArrayBuffer> {\n\n        return new Promise(function (resolve, reject) {\n\n            const xhr = new XMLHttpRequest();\n\n            // third parameter is for \"async\", should already be \"true\" by default\n            // but who knows maybe a browser vendor decides to change it\n            // so I prefer to explicitly set it to \"true\" just in case\n            xhr.open('GET', requested.url, true);\n\n            // set the expected response type from the server to arraybuffer\n            xhr.responseType = 'arraybuffer';\n\n            xhr.onload = function (): void {\n\n                // gets called even for example a code 404, so check the status is in the 2xx range\n                if (xhr.status >= 200 && xhr.status <= 299) {\n                    resolve(xhr.response);\n                } else {\n                    // status code is not 2xx, reject with an error\n                    reject(new Error(xhr.statusText + '(status:' + xhr.status + ')'));\n                }\n\n            };\n\n            xhr.onprogress = function (event): void {\n\n                const loadingPercentageRaw = 100 / (event.total / event.loaded);\n                const loadingPercentage = Math.round(loadingPercentageRaw);\n\n                // update value on sound object\n                requested.loadingProgress = loadingPercentage;\n\n                if (requested.onLoading !== null) {\n                    requested.onLoading(loadingPercentage, event.total, event.loaded);\n                }\n\n            };\n\n            // also reject for any kind of network errors\n            xhr.onerror = function (error): void {\n\n                reject(error);\n\n            };\n\n            xhr.send();\n\n        });\n\n    }\n\n}\n","import { PlayerSound, ISound, ISoundAttributes, ISoundSource } from './sound';\nimport {\n    PlayerAudio,\n    IAudioOptions,\n} from './audio';\nimport { PlayerRequest } from './request';\n\nconst PLAYER_MODE_AUDIO = 'player_mode_audio';\nconst PLAYER_MODE_AJAX = 'player_mode_ajax';\nconst PLAYER_MODE_FETCH = 'player_mode_fetch';\n\nconst WHERE_IN_QUEUE_AT_START = 'prepend';\nconst WHERE_IN_QUEUE_AT_END = 'append';\n\nconst AFTER_LOADING_SEEK = 'after_loading_seek';\nconst AFTER_LOADING_PLAY = 'after_loading_play';\n\nconst VISIBILITY_HIDDEN_ACTION_MUTE = 'visibility_hidden_action_mute';\nconst VISIBILITY_HIDDEN_ACTION_PAUSE = 'visibility_hidden_action_pause';\n\ntype typePlayerMode = typeof PLAYER_MODE_AUDIO | typeof PLAYER_MODE_AJAX | typeof PLAYER_MODE_FETCH;\ntype typeWhereInQueue = typeof WHERE_IN_QUEUE_AT_START | typeof WHERE_IN_QUEUE_AT_END;\ntype typeAfterLoadingAction = typeof AFTER_LOADING_SEEK | typeof AFTER_LOADING_PLAY;\ntype typeVisibilityHiddenAction = typeof VISIBILITY_HIDDEN_ACTION_MUTE | typeof VISIBILITY_HIDDEN_ACTION_PAUSE;\n\nexport interface ICoreOptions {\n    volume?: number;\n    loopQueue?: boolean;\n    loopSong?: boolean;\n    soundsBaseUrl?: string;\n    playingProgressIntervalTime?: number;\n    playNextOnEnded?: boolean;\n    stopOnReset?: boolean;\n    visibilityWatch?: boolean;\n    visibilityHiddenAction?: typeVisibilityHiddenAction;\n    unlockAudioOnFirstUserInteraction?: boolean;\n    persistVolume?: boolean;\n    loadPlayerMode?: typePlayerMode;\n    audioContext?: AudioContext;\n    addAudioElementsToDom?: boolean;\n    volumeTransitionTime?: number;\n}\n\nexport interface ISoundsQueueOptions {\n    soundAttributes: ISoundAttributes;\n    whereInQueue?: typeWhereInQueue;\n}\n\nexport interface IPlayOptions {\n    whichSound?: number | string | undefined;\n    playTimeOffset?: number;\n}\n\ninterface IFindSoundById {\n    soundId: string | number;\n}\n\ninterface IFindBestSourceResponse {\n    url: string;\n    codec?: string;\n}\n\ninterface IGetSoundFromQueue {\n    whichSound?: string | number;\n    updateIndex?: boolean;\n}\n\ninterface IBestSource {\n    url: string;\n    codec?: string;\n}\n\nexport class PlayerCore {\n\n    // the sounds queue\n    protected _queue: ISound[];\n    // the queue index of the current sound\n    protected _currentIndex: number;\n    // instance of the audio library class\n    protected _playerAudio: PlayerAudio;\n    // playing progress animation frame request id\n    protected _playingProgressRequestId: number = null;\n    // time in milliseconds\n    protected _playingProgressPreviousTimestamp: DOMHighResTimeStamp;\n    // value of the volume before it got muted\n    protected _postMuteVolume: number = null;\n    // is playing before visibility is hidden event\n    protected _postVisibilityHiddenPlaying: boolean = null;\n    // user player options\n    protected _options: ICoreOptions;\n\n    // constants\n    static readonly WHERE_IN_QUEUE_AT_END = 'append';\n    static readonly WHERE_IN_QUEUE_AT_START = 'prepend';\n\n    static readonly AFTER_LOADING_SEEK = 'after_loading_seek';\n    static readonly AFTER_LOADING_PLAY = 'after_loading_play';\n\n    static readonly PLAY_SOUND_NEXT = 'next';\n    static readonly PLAY_SOUND_PREVIOUS = 'previous';\n    static readonly PLAY_SOUND_FIRST = 'first';\n    static readonly PLAY_SOUND_LAST = 'last';\n\n    static readonly CURRENT_SOUND = 'current';\n\n    static readonly PLAYER_MODE_AUDIO = 'player_mode_audio';\n    static readonly PLAYER_MODE_AJAX = 'player_mode_ajax';\n    static readonly PLAYER_MODE_FETCH = 'player_mode_fetch';\n\n    static readonly VISIBILITY_HIDDEN_ACTION_MUTE = 'visibility_hidden_action_mute';\n    static readonly VISIBILITY_HIDDEN_ACTION_PAUSE = 'visibility_hidden_action_pause';\n\n    constructor(playerOptions: ICoreOptions = {}) {\n\n        const defaultOptions: ICoreOptions = {\n            volume: 80,\n            loopQueue: false,\n            loopSong: false,\n            soundsBaseUrl: '',\n            playingProgressIntervalTime: 200,\n            playNextOnEnded: true,\n            stopOnReset: true,\n            visibilityWatch: false,\n            visibilityHiddenAction: VISIBILITY_HIDDEN_ACTION_PAUSE,\n            unlockAudioOnFirstUserInteraction: false,\n            persistVolume: true,\n            loadPlayerMode: PLAYER_MODE_AUDIO,\n            audioContext: null,\n            addAudioElementsToDom: false,\n            volumeTransitionTime: 100,\n        };\n\n        const options = Object.assign({}, defaultOptions, playerOptions);\n\n        this._queue = [];\n        this._currentIndex = 0;\n        this._options = options;\n        this._playingProgressPreviousTimestamp = 0;\n\n        this._initialize();\n\n    }\n\n    protected _initialize(): void {\n\n        const audioOptions = this._audioOptions();\n\n        this._playerAudio = new PlayerAudio(audioOptions);\n\n        switch (this._options.loadPlayerMode) {\n            case PlayerCore.PLAYER_MODE_AUDIO:\n                if (!this._playerAudio.detectAudioContextSupport()) {\n                    throw new Error('audio context is not supported by this device');\n                }\n                if (!this._playerAudio.detectAudioElementSupport()) {\n                    throw new Error('audio element is not supported by this device');\n                }\n                break;\n            case PlayerCore.PLAYER_MODE_AJAX:\n                if (!this._playerAudio.detectAudioContextSupport()) {\n                    throw new Error('audio context is not supported by this device');\n                }\n                break;\n        }\n\n    }\n\n    protected _audioOptions(): IAudioOptions {\n\n        const audioOptions: IAudioOptions = {\n            audioContext: this._options.audioContext,\n            unlockAudioOnFirstUserInteraction: this._options.unlockAudioOnFirstUserInteraction,\n            volume: this._options.volume,\n            persistVolume: this._options.persistVolume,\n            loadPlayerMode: this._options.loadPlayerMode,\n            addAudioElementsToDom: this._options.addAudioElementsToDom,\n            volumeTransitionTime: this._options.volumeTransitionTime,\n        };\n\n        return audioOptions;\n\n    }\n\n    public addSoundToQueue({ soundAttributes, whereInQueue = WHERE_IN_QUEUE_AT_END }: ISoundsQueueOptions): ISound {\n\n        const sound: ISound = new PlayerSound(soundAttributes);\n\n        switch (whereInQueue) {\n            case PlayerCore.WHERE_IN_QUEUE_AT_END:\n                this._appendSoundToQueue(sound);\n                break;\n            case PlayerCore.WHERE_IN_QUEUE_AT_START:\n                this._prependSoundToQueue(sound);\n                break;\n        }\n\n        return sound;\n\n    }\n\n    protected _appendSoundToQueue(sound: ISound): void {\n\n        this._queue.push(sound);\n\n    }\n\n    protected _prependSoundToQueue(sound: ISound): void {\n\n        this._queue.unshift(sound);\n\n    }\n\n    public async resetQueue(): Promise<void> {\n\n        if (this._options.stopOnReset) {\n            await this.stop();\n        }\n\n        this._queue.forEach((sound) => {\n            this._playerAudio.disconnectSound(sound);\n        });\n\n        this._queue = [];\n\n    }\n\n    public reset(): void {\n\n        this.resetQueue().catch((error) => {\n            console.error(error);\n        });\n\n    }\n\n    public getQueue(): ISound[] {\n\n        return this._queue;\n\n    }\n\n    public setVolume(volume: number): void {\n\n        this._playerAudio.setVolume(volume).catch((error) => {\n            console.error(error);\n        })\n\n    }\n\n    public getVolume(): number {\n\n        return this._playerAudio.getVolume();\n\n    }\n\n    public setLoopQueue(loppQueue: boolean): void {\n\n        this._options.loopQueue = loppQueue;\n\n    }\n\n    public getLoopQueue(): boolean {\n\n        return this._options.loopQueue;\n\n    }\n\n    public mute(): void {\n\n        const currentVolume = this.getVolume();\n\n        this._playerAudio.setVolume(0, false).catch((error) => {\n            console.error(error);\n        })\n\n        this._postMuteVolume = currentVolume;\n\n    }\n\n    public unMute(): void {\n\n        this._playerAudio.setVolume(this._postMuteVolume, false).catch((error) => {\n            console.error(error);\n        })\n\n        this._postMuteVolume = null;\n\n    }\n\n    public isMuted(): boolean {\n\n        return this._postMuteVolume === null ? false : true;\n\n    }\n\n    public async setPosition(soundPositionInPercent: number): Promise<void> {\n\n        if (soundPositionInPercent < 0 || soundPositionInPercent > 100) {\n            throw new Error('soundPositionInPercent must be a number >= 0 and <= 100');\n        }\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        if (currentSound !== null) {\n\n            currentSound.seekPercentage = Math.round(soundPositionInPercent);\n\n            const duration = currentSound.getDuration();\n\n            // if the duration did not get set manually or is not a number\n            if (duration === null || isNaN(duration)) {\n\n                // the user can set the sound duration manually but if he didn't the sound\n                // needs to get loaded first, to be able to know the duration it has\n                await this.loadSound(currentSound, PlayerCore.AFTER_LOADING_SEEK);\n\n            } else {\n\n                this._setPosition(currentSound);\n\n            }\n\n        }\n\n    }\n\n    protected _setPosition(sound: ISound): void {\n\n        const duration = sound.getDuration();\n\n        // calculate the position in seconds\n        const soundPositionInSeconds = (duration / 100) * sound.seekPercentage;\n\n        this.setPositionInSeconds(soundPositionInSeconds, sound);\n\n    }\n\n    public async setPositionInSeconds(soundPositionInSeconds: number, sound?: ISound): Promise<void> {\n\n        let currentSound: ISound = null;\n\n        if (typeof sound !== 'undefined') {\n            currentSound = sound;\n        } else {\n            currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n        }\n\n        if (currentSound !== null) {\n\n            // if the given position > duration, set position to duration\n            if (!isNaN(currentSound.duration) && (soundPositionInSeconds >= currentSound.duration)) {\n                // duration - 0.1 because in safari if currentTime = duration\n                // the onended event does not get triggered\n                soundPositionInSeconds = currentSound.duration - 0.1\n            }\n\n            const previousState = currentSound.state;\n\n            currentSound.state = PlayerSound.SOUND_STATE_SEEKING;\n\n            if (currentSound.onSeeking !== null) {\n\n                const playTime = soundPositionInSeconds;\n                const duration = currentSound.getDuration();\n                const seekingPercentageRaw = (playTime / duration) * 100;\n                const seekingPercentage = Math.round(seekingPercentageRaw);\n\n                currentSound.onSeeking(seekingPercentage, duration, playTime);\n\n            }\n\n            if (previousState === PlayerSound.SOUND_STATE_PLAYING) {\n\n                // already playing so just change the position\n                currentSound.playTime = soundPositionInSeconds;\n\n                if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX) {\n                    // in ajax mode (when source is AudioBufferSourceNode) we\n                    // need to stop the song and start again at new position\n                    currentSound.elapsedPlayTime = soundPositionInSeconds;\n                    await this._stop(currentSound);\n                } else if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AUDIO) {\n                    // in audio (element) mode it is easier we can just change the position\n                    await this._play(currentSound);\n                }\n\n            } else {\n\n                // setPositionInSeconds got called and sound is currently not playing\n                // only set the sound position but don't play\n                currentSound.playTime = soundPositionInSeconds;\n\n            }\n\n        }\n\n    }\n\n    public async loadSound(sound: ISound, afterLoadingAction?: typeAfterLoadingAction): Promise<ISound> {\n\n        switch (this._options.loadPlayerMode) {\n            case PlayerCore.PLAYER_MODE_AUDIO:\n                await this._loadSoundUsingAudioElement(sound, afterLoadingAction);\n                break;\n            case PlayerCore.PLAYER_MODE_AJAX:\n                await this._loadSoundUsingRequest(sound, afterLoadingAction);\n                break;\n            case PlayerCore.PLAYER_MODE_FETCH:\n                // TODO: implement fetch (?)\n                console.warn(PlayerCore.PLAYER_MODE_FETCH + ' is not implemented yet');\n                break;\n        }\n\n        return sound;\n\n    }\n\n    protected async _loadSoundUsingAudioElement(sound: ISound, afterLoadingAction?: typeAfterLoadingAction): Promise<void> {\n\n        // extract the url and codec from sources\n        const { url, codec = null } = this._findBestSource(sound.source);\n\n        sound.url = url;\n        sound.codec = codec;\n\n        if (sound.url !== null) {\n\n            sound.audioElement = await this._playerAudio.getAudioElement();\n\n            // loading progress\n            // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/progress_event\n            sound.audioElement.onprogress = () => {\n\n                if (sound.audioElement.buffered.length) {\n\n                    let loadingPercentage: number;\n\n                    const buffered = sound.audioElement.buffered.end(0);\n                    const duration = sound.getDuration();\n\n                    if (typeof duration !== 'undefined') {\n                        const loadingPercentageRaw = 100 / (duration / buffered);\n                        loadingPercentage = Math.round(loadingPercentageRaw);\n                    }\n\n                    sound.loadingProgress = loadingPercentage;\n\n                    if (sound.onLoading !== null) {\n                        sound.onLoading(loadingPercentage, duration, buffered);\n                    }\n\n                    if (loadingPercentage === 100) {\n                        sound.isBuffering = false;\n                        sound.isBuffered = true;\n                        sound.audioBufferDate = new Date();\n                    }\n\n                }\n\n            }\n\n            const canPlayThroughHandler = async () => {\n\n                // we don't need the listener anymore\n                sound.audioElement.removeEventListener('canplaythrough', canPlayThroughHandler);\n                sound.isReadyToPLay = true;\n                // duration should now be available\n                // if it got set manually don't overwrite it\n                if (!isNaN(sound.audioElement.duration) && !sound.durationSetManually) {\n                    sound.duration = sound.audioElement.duration;\n                }\n\n                switch (afterLoadingAction) {\n                    case PlayerCore.AFTER_LOADING_SEEK:\n                        this._setPosition(sound)\n                        break;\n                    case PlayerCore.AFTER_LOADING_PLAY:\n                        this._play(sound);\n                        break;\n                }\n                \n            }\n\n            sound.audioElement.addEventListener('canplaythrough', canPlayThroughHandler);\n\n            // in chrome you will get this error message in the console:\n            // \"MediaElementAudioSource outputs zeroes due to CORS access restrictions\"\n            // to fix this put crossOrigin to anonymous or change the cors\n            // Access-Control-Allow-Origin header of the server to *\n            // \"crossOrigin\" has to be set before \"src\"\n            sound.audioElement.crossOrigin = 'anonymous';\n\n            sound.audioElement.src = sound.url;\n\n            // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/load\n            sound.audioElement.load();\n\n        } else {\n\n            //reject(new Error('sound has no url'));\n            throw new Error('sound has no url');\n\n        }\n\n    }\n\n    protected async _loadSoundUsingRequest(sound: ISound, afterLoadingAction?: typeAfterLoadingAction): Promise<void> {\n\n        // check for audio buffer before array buffer, because if one exist the other\n        // should exist too and is better for performance to reuse audio buffer then\n        // to redecode array buffer into an audio buffer\n        // user provided audio buffer\n        // decoding an array buffer is an expensive task even on modern hardware\n        // TODO: commented out for now, there is a weird bug when reusing the\n        // audio buffer, somehow the onended callback gets triggered in a loop\n        /*if (sound.audioBuffer !== null) {\n            return;\n        }*/\n\n        // user provided array buffer\n        if (sound.arrayBuffer !== null) {\n            return await this._decodeSound(sound);\n        }\n\n        // extract the url and codec from sources\n        const { url, codec = null } = this._findBestSource(sound.source);\n\n        sound.url = url;\n        sound.codec = codec;\n\n        if (sound.url !== null) {\n\n            const request = new PlayerRequest();\n\n            sound.isBuffering = true;\n            const arrayBuffer = await request.getArrayBuffer(sound);\n            sound.arrayBuffer = arrayBuffer;\n\n            await this._decodeSound(sound, afterLoadingAction);\n\n        } else {\n\n            throw new Error('sound has no url');\n\n        }\n\n    }\n\n    protected async _decodeSound(sound: ISound, afterLoadingAction?: typeAfterLoadingAction): Promise<void> {\n\n        // make a copy of the array buffer first\n        // because the decoding will detach the array buffer\n        // https://github.com/WebAudio/web-audio-api/issues/1175\n        const arrayBufferCopy = sound.arrayBuffer.slice(0);\n\n        const audioBuffer = await this._playerAudio.decodeAudio(arrayBufferCopy);\n\n        // duration should now be available\n        // if it got set manually don't overwrite it\n        if (!isNaN(audioBuffer.duration) && !sound.durationSetManually) {\n            sound.duration = audioBuffer.duration;\n        }\n\n        sound.audioBuffer = audioBuffer;\n        sound.isBuffering = false;\n        sound.isBuffered = true;\n        sound.audioBufferDate = new Date();\n        sound.isReadyToPLay = true;\n\n        switch (afterLoadingAction) {\n            case PlayerCore.AFTER_LOADING_SEEK:\n                this._setPosition(sound)\n                break;\n            case PlayerCore.AFTER_LOADING_PLAY:\n                this._play(sound);\n                break;\n        }\n\n    }\n\n    public async play({ whichSound, playTimeOffset }: IPlayOptions = {}): Promise<ISound> {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        // whichSound is optional, if set it can be the sound id (string or number)\n        // or it can be these 4 constants: PLAY_SOUND_NEXT, PLAY_SOUND_PREVIOUS,\n        // PLAY_SOUND_FIRST, PLAY_SOUND_LAST\n        const sound = this._getSoundFromQueue({ whichSound, updateIndex: true });\n\n        // if there is no sound we could play, do nothing\n        if (sound === null) {\n            return sound;\n        }\n\n        // if there is a sound currently being played\n        // AND the current sound is the same sound as the one that will now be played\n        if (\n            currentSound !== null\n            && (currentSound.state === PlayerSound.SOUND_STATE_PLAYING)\n            && (currentSound.id === sound.id)\n        ) {\n            if (!isNaN(playTimeOffset)) {\n                // sound is already playing but a playTimeOffset got set\n                // so we just need to seek\n                this.setPositionInSeconds(playTimeOffset);\n                return sound;\n            } else {\n                // sound is already playing, do nothing\n                return sound;\n            }\n        }\n\n        // if there is a sound currently being played OR paused\n        // AND the current sound is NOT the same sound as the one that will now be played\n        if (\n            currentSound !== null\n            && (currentSound.state === PlayerSound.SOUND_STATE_PLAYING || currentSound.state === PlayerSound.SOUND_STATE_PAUSED)\n            && (currentSound.id !== sound.id)\n        ) {\n            // stop the current sound\n            currentSound.state = PlayerSound.SOUND_STATE_STOPPED;\n            await this._stop(currentSound);\n        }\n\n        // if the user wants to play the sound from a certain position\n        // then playTimeOffset should be a number and not undefined\n        if (!isNaN(playTimeOffset)) {\n            sound.playTimeOffset = playTimeOffset;\n        } else {\n            sound.playTimeOffset = 0;\n        }\n\n        if (sound.sourceNode === null) {\n            // connect the source to the gain (graph) node\n            await this._playerAudio.connectSound(sound, () => {\n                this._onEnded();\n            });\n        }\n\n        if (!sound.isReadyToPLay) {\n\n            await this.loadSound(sound, PlayerCore.AFTER_LOADING_PLAY);\n\n        } else {\n\n            await this._play(sound);\n\n        }\n\n        return sound;\n\n    }\n\n    protected async _play(sound: ISound): Promise<void> {\n\n        if (sound.state === PlayerSound.SOUND_STATE_PLAYING) {\n            return;\n        }\n\n        if (this._playerAudio.isAudioContextFrozen()) {\n            await this._playerAudio.unfreezeAudioContext();\n        }\n\n        if (sound.playTimeOffset > 0) {\n            sound.playTime = sound.playTimeOffset;\n        }\n\n        if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX) {\n            await this._playAudioBuffer(sound);\n        } else if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AUDIO) {\n            await this._playMediaElementAudio(sound);\n        }\n\n        // the AudioBufferSourceNode does not have events (other than onended)\n        // the playbackState got removed:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Migrating_from_webkitAudioContext#changes_to_determining_playback_state\n        // for the AudioElement we could use the play event to trigger the next two lines!?\n        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement#events\n        sound.state = PlayerSound.SOUND_STATE_PLAYING;\n\n        this._triggerSoundCallbacks(sound);\n\n    }\n\n    protected async _playAudioBuffer(sound: ISound): Promise<void> {\n\n        // AudioBufferSourceNode type guard\n        if (sound.sourceNode instanceof AudioBufferSourceNode) {\n\n            // on play, seek, pause, always reset the sound startTime (current context time)\n            sound.startTime = sound.sourceNode.context.currentTime;\n\n            // add the audio buffer to the source node\n            sound.sourceNode.buffer = sound.audioBuffer;\n\n            // start playback\n            // start(when, offset, duration)\n            try {\n                if (sound.state === PlayerSound.SOUND_STATE_SEEKING) {\n                    sound.sourceNode.start(0, sound.playTime);\n                } else if (sound.state === PlayerSound.SOUND_STATE_PAUSED && sound.playTimeOffset === 0) {\n                    sound.sourceNode.start(0, sound.playTime);\n                } else {\n                    if (sound.playTimeOffset > 0) {\n                        // round duration up as numbers are not integers\n                        // so sometimes it is a tiny bit above\n                        if (sound.playTimeOffset > Math.ceil(sound.duration)) {\n                            console.warn('playTimeOffset > sound duration');\n                        }\n                        // if an offset is defined start playing at that position\n                        sound.elapsedPlayTime = sound.playTimeOffset;\n                        sound.sourceNode.start(0, sound.playTimeOffset);\n                    } else {\n                        sound.sourceNode.start();\n                    }\n                }\n\n            } catch (error) {\n                throw new Error(error);\n            }\n        }\n\n    }\n\n    protected async _playMediaElementAudio(sound: ISound): Promise<void> {\n\n        // MediaElementAudioSourceNode type guard\n        if (sound.sourceNode instanceof MediaElementAudioSourceNode) {\n\n            if (sound.state === PlayerSound.SOUND_STATE_SEEKING) {\n                sound.audioElement.currentTime = sound.playTime;\n            } else if (sound.state === PlayerSound.SOUND_STATE_PAUSED && sound.playTimeOffset === 0) {\n                sound.audioElement.currentTime = sound.playTime;\n            } else {\n                // if an offset is defined start playing at that position\n                if (sound.playTimeOffset > 0) {\n                    // round duration up as numbers are not integers\n                    // so sometimes it is a tiny bit above\n                    if (sound.playTimeOffset > Math.ceil(sound.duration)) {\n                        console.warn('playTimeOffset > duration');\n                    }\n                    sound.audioElement.currentTime = sound.playTimeOffset;\n                } else {\n                    sound.audioElement.currentTime = 0;\n                }\n            }\n\n            return await sound.audioElement.play();\n\n        }\n\n    }\n\n    protected _triggerSoundCallbacks(sound: ISound) {\n\n        if (sound.onResumed !== null && !sound.firstTimePlayed) {\n            sound.onResumed(sound.playTime);\n        }\n\n        if (sound.onStarted !== null && sound.firstTimePlayed) {\n            sound.firstTimePlayed = false;\n            sound.onStarted(sound.playTimeOffset);\n        }\n\n        if (sound.onPlaying !== null) {\n            // reset progress timestamp\n            this._playingProgressPreviousTimestamp = 0;\n            // \"request animation frame\" callback has an argument, which\n            // is the timestamp when the callback gets called\n            // as this is the first call set timestamp manually to zero\n            this._progressTrigger(sound, 0);\n        } else {\n            this._playingProgressRequestId = null;\n        }\n\n        return;\n\n    }\n\n    protected _progressTrigger = (sound: ISound, timestamp: DOMHighResTimeStamp) => {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        // I had a lot of trouble cancelling the animation frame\n        // this is why I added this check\n        // often onended would get called by even though I do\n        // a cancel in _stop() the animation frame would still repeat\n        if (sound.id !== currentSound.id || currentSound.state !== PlayerSound.SOUND_STATE_PLAYING) {\n            return;\n        }\n\n        // throttle requests, use time set in options and\n        // make sure that at least that amount is elapsed \n        if ((timestamp - this._playingProgressPreviousTimestamp) >= this._options.playingProgressIntervalTime) {\n\n            const currentTime = sound.getCurrentTime();\n            const duration = sound.getDuration();\n\n            if (!isNaN(currentTime) && !isNaN(duration)) {\n\n                let playingPercentage = 0;\n\n                if (currentTime !== 0) {\n                    const playingPercentageRaw = (currentTime / duration) * 100;\n                    playingPercentage = Math.round(playingPercentageRaw);\n                }\n\n                sound.playedTimePercentage = playingPercentage;\n                sound.playTime = currentTime;\n\n                // execute playing progress callback\n                sound.onPlaying(playingPercentage, duration, currentTime);\n\n                this._playingProgressPreviousTimestamp = timestamp;\n            }\n\n        }\n\n        // request animation frame loop\n        this._playingProgressRequestId = window.requestAnimationFrame((timestamp) => {\n            this._progressTrigger(sound, timestamp);\n        });\n\n    }\n\n    protected async _onEnded(): Promise<void> {\n\n        if (this._options.playNextOnEnded) {\n\n            const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n            if (currentSound !== null) {\n\n                // when we set the sound to paused...\n                // audio buffer will trigger onEnded because we actually stop the song\n                // audio element will not trigger onEnded as we pause the song\n                // this is why, for audio buffer (ajax) sounds we check if they have\n                // the playing state before triggering the next sound\n                // if stopped, seeking or pause we do nothing\n                if (\n                    this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AUDIO ||\n                    (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX && currentSound.state === PlayerSound.SOUND_STATE_PLAYING)\n                ) {\n\n                    const nextSound = this._getSoundFromQueue({ whichSound: PlayerCore.PLAY_SOUND_NEXT });\n\n                    let willPlayNext = false;\n\n                    // check if there is another sound in the queue\n                    if (nextSound !== null) {\n                        willPlayNext = true;\n                    }\n\n                    if (!willPlayNext) {\n                        await this._playerAudio.freezeAudioContext();\n                    }\n\n                    if (currentSound.onEnded !== null) {\n                        currentSound.onEnded(willPlayNext);\n                    }\n\n                    try {\n                        if (willPlayNext) {\n                            await this.next();\n                        }\n                    } catch (error) {\n                        console.error(error)\n                    }\n\n                }\n\n                if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX && currentSound.state === PlayerSound.SOUND_STATE_SEEKING) {\n                    try {\n                        // audio buffer source nodes get destroyed on stop\n                        // this is why in ajax mode we need to do a fresh start when seeking\n                        await this.play(currentSound);\n                    } catch (error) {\n                        console.error(error)\n                    }\n                }\n\n            }\n\n        }\n\n    }\n\n    protected _getSoundFromQueue({ whichSound, updateIndex = false }: IGetSoundFromQueue = {}): ISound {\n\n        let sound = null;\n        let soundIndex: number = null;\n\n        // check if the queue is empty\n        if (this._queue.length === 0) {\n            return sound;\n        }\n\n        // if which sound to play did not get specified\n        // we set it to the current sound by default\n        if (typeof whichSound === 'undefined') {\n            whichSound = PlayerCore.CURRENT_SOUND;\n        }\n\n        switch (whichSound) {\n            case PlayerCore.CURRENT_SOUND:\n                soundIndex = this._currentIndex\n                sound = this._queue[soundIndex];\n                break;\n            case PlayerCore.PLAY_SOUND_NEXT:\n                if (this._queue[this._currentIndex + 1] !== undefined) {\n                    soundIndex = this._currentIndex + 1;\n                    sound = this._queue[soundIndex];\n                } else if (this._options.loopQueue) {\n                    // if last sound is playing and loop queue is enabled\n                    // then on onEnded we go from last to first sound\n                    soundIndex = 0;\n                    sound = this._queue[soundIndex];\n                }\n                break;\n            case PlayerCore.PLAY_SOUND_PREVIOUS:\n                if (this._queue[this._currentIndex - 1] !== undefined) {\n                    soundIndex = this._currentIndex - 1;\n                    sound = this._queue[soundIndex];\n                } else if (this._options.loopQueue) {\n                    // if first sound of the queue is playing and loop queue is enabled\n                    // then if previous() gets used, we jump to last sound in queue\n                    soundIndex = this._queue.length - 1;\n                    sound = this._queue[soundIndex];\n                }\n                break;\n            case PlayerCore.PLAY_SOUND_FIRST:\n                if (this._queue.length > 0) {\n                    soundIndex = 0;\n                    sound = this._queue[soundIndex];\n                }\n                break;\n            case PlayerCore.PLAY_SOUND_LAST:\n                if (this._queue.length > 0) {\n                    soundIndex = this._queue.length - 1;\n                    sound = this._queue[soundIndex];\n                }\n                break;\n            default:\n                // if \"which sound to play\" is a soundId\n                // Note: soundId can be a string or number\n                [sound, soundIndex] = this._findSoundById({ soundId: whichSound });\n        }\n\n        if (soundIndex !== null && updateIndex) {\n            this._currentIndex = soundIndex;\n        }\n\n        return sound;\n\n    }\n\n    protected _findSoundById({ soundId }: IFindSoundById): [ISound, number] {\n\n        let sound: ISound = null;\n        let soundIndex = 0;\n\n        this._queue.some((soundFromQueue, index) => {\n\n            if (soundFromQueue.id === soundId) {\n                sound = soundFromQueue;\n                soundIndex = index;\n                return true;\n            }\n\n        });\n\n        return [sound, soundIndex];\n\n    }\n\n    protected _findBestSource(soundSource: (ISoundSource)[] | ISoundSource): IFindBestSourceResponse {\n\n        const bestSource: IBestSource = {\n            url: null,\n            codec: null\n        };\n\n        let sources: (ISoundSource)[];\n\n        // if the source is not an array but a single source object\n        // we first transform it into an array\n        if (!Array.isArray(soundSource)) {\n            sources = [soundSource];\n        } else {\n            sources = soundSource;\n        }\n\n        let i = 0;\n\n        while (i < sources.length) {\n\n            const source = sources[i]\n            let soundUrl = '';\n\n            // if the player has set the baseUrl option for sounds, use it now\n            if (this._options.soundsBaseUrl !== '') {\n                soundUrl = this._options.soundsBaseUrl;\n            }\n\n            soundUrl += source.url;\n\n            // check if the codec (if any got specified) is supported\n            // by the device\n            let isCodecSupported = true;\n\n            if (source.codec !== null) {\n                isCodecSupported = this._checkCodecSupport(source.codec);\n            }\n\n            if (isCodecSupported) {\n\n                if (source.isPreferred) {\n                    // if multiple sources but this one if preferred and if previous\n                    // sources also had a supported codec we still overwrite the\n                    // previous match\n                    bestSource.url = soundUrl;\n                    bestSource.codec = source.codec;\n                    // as the source is marked as preferred and it is supported\n                    // so we can exit early\n                    break;\n                } else {\n                    // if no best source has been found so far, we don't\n                    // care if it's preferred it's automatically chosen\n                    // as being the best\n                    bestSource.url = soundUrl;\n                    bestSource.codec = source.codec;\n                    // source is supported, but maybe there is preferred & supported\n                    // so we don't exit the loop just yet and continue searching\n                }\n\n            }\n\n            i++;\n\n        }\n\n        return bestSource;\n\n    }\n\n    protected _checkCodecSupport(codec: string): boolean {\n\n        let mediaMimeTypes: string[];\n        let error = '';\n\n        switch (codec) {\n            case 'ogg':\n                mediaMimeTypes = ['audio/ogg; codecs=\"vorbis\"'];\n                break;\n            case 'oga':\n                mediaMimeTypes = ['audio/ogg; codecs=\"vorbis\"'];\n                break;\n            case 'mp3':\n                mediaMimeTypes = ['audio/mpeg; codecs=\"mp3\"'];\n                break;\n            case 'opus':\n                mediaMimeTypes = ['audio/ogg; codecs=\"opus\"', 'audio/webm; codecs=\"opus\"'];\n                break;\n            case 'wav':\n                mediaMimeTypes = ['audio/wav; codecs=\"1\"'];\n                break;\n            case 'm4a':\n                mediaMimeTypes = ['audio/m4a;', 'audio/x-m4a;'];\n                break;\n            case 'm4p':\n                mediaMimeTypes = ['audio/m4p;', 'audio/x-m4p;'];\n                break;\n            case 'caf':\n                mediaMimeTypes = ['audio/x-caf;'];\n                break;\n            case 'aac':\n                mediaMimeTypes = ['audio/aac;'];\n                break;\n            case 'weba':\n            case 'webm':\n                mediaMimeTypes = ['audio/webm; codecs=\"vorbis\"'];\n                break;\n            case 'flac':\n                mediaMimeTypes = ['audio/flac;', 'audio/x-flac;'];\n                break;\n            default:\n                error = 'unrecognised codec';\n                break;\n        }\n\n        if (error) {\n            throw new Error(error);\n        }\n\n        return this._checkMimeTypesSupport(mediaMimeTypes);\n\n    }\n\n    protected _checkMimeTypesSupport(mediaMimeTypes: string[]): boolean {\n\n        const deviceAudio = new Audio();\n\n        let isSupported = false;\n\n        mediaMimeTypes.forEach((mediaMimeType) => {\n\n            const isMediaTypeSupported: string = deviceAudio.canPlayType(mediaMimeType).replace(/^no$/, '');\n\n            if (isMediaTypeSupported) {\n                isSupported = true;\n            }\n\n        });\n\n        return isSupported;\n\n    }\n\n    public async pause(): Promise<ISound> {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        if (currentSound === null) {\n            return;\n        }\n\n        if (currentSound.state === PlayerSound.SOUND_STATE_PAUSED) {\n            return;\n        }\n\n        const currentTime = currentSound.getCurrentTime();\n\n        currentSound.playTime = currentTime;\n\n        if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX) {\n            currentSound.elapsedPlayTime = currentTime;\n        }\n\n        if (currentSound.onPaused !== null) {\n            currentSound.onPaused(currentSound.playTime);\n        }\n\n        currentSound.state = PlayerSound.SOUND_STATE_PAUSED;\n\n        await this._stop(currentSound);\n\n        return currentSound;\n\n    }\n\n    public async stop(): Promise<ISound> {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        if (currentSound === null) {\n            return;\n        }\n\n        if (currentSound.state === PlayerSound.SOUND_STATE_STOPPED) {\n            return;\n        }\n\n        // on stop we freeze the audio context\n        // as we assume it won't be needed right away\n        await this._playerAudio.freezeAudioContext();\n\n        if (currentSound.onStopped !== null) {\n            currentSound.onStopped(currentSound.playTime);\n        }\n\n        currentSound.state = PlayerSound.SOUND_STATE_STOPPED;\n\n        await this._stop(currentSound);\n\n        return currentSound;\n\n    }\n\n    protected async _stop(sound: ISound): Promise<void> {\n\n        if (this._playingProgressRequestId !== null) {\n            cancelAnimationFrame(this._playingProgressRequestId);\n            this._playingProgressRequestId = null;\n        }\n\n        if (sound.sourceNode !== null) {\n\n            if (sound.sourceNode instanceof AudioBufferSourceNode) {\n                // if using the AudioBufferSourceNode use the stop method\n                sound.sourceNode.stop(0);\n                // the \"audio buffer\" CAN be reused for multiple plays\n                // however the \"audio buffer source\" CAN NOT, so we disconnect\n                await this._playerAudio.disconnectSound(sound);\n            }\n\n            if (sound.sourceNode instanceof MediaElementAudioSourceNode) {\n                // if using the MediaElementAudioSourceNode use the pause method\n                sound.audioElement.pause();\n            }\n\n        }\n\n        // if it is fully stopped, not just paused (or seeking)\n        if (sound.state === PlayerSound.SOUND_STATE_STOPPED) {\n            // reset sound values\n            sound.isReadyToPLay = false;\n            sound.firstTimePlayed = true;\n            sound.startTime = 0;\n            sound.elapsedPlayTime = 0;\n            sound.playTime = 0;\n            sound.playedTimePercentage = 0;\n            // disconnect the sound\n            await this._playerAudio.disconnectSound(sound);\n        }\n\n    }\n\n    public async next(): Promise<ISound> {\n\n        return await this.play({ whichSound: PlayerCore.PLAY_SOUND_NEXT });\n\n    }\n\n    public async previous(): Promise<ISound> {\n\n        return await this.play({ whichSound: PlayerCore.PLAY_SOUND_PREVIOUS });\n\n    }\n\n    public async first(): Promise<ISound> {\n\n        return await this.play({ whichSound: PlayerCore.PLAY_SOUND_FIRST });\n\n    }\n\n    public async last(): Promise<ISound> {\n\n        return await this.play({ whichSound: PlayerCore.PLAY_SOUND_LAST });\n\n    }\n\n    public setVisibilityWatch(visibilityWatch: boolean): void {\n\n        this._options.visibilityWatch = visibilityWatch;\n\n        if (visibilityWatch) {\n            document.addEventListener('visibilitychange', this._handleVisibilityChange.bind(this), false);\n        } else {\n            document.removeEventListener('visibilitychange', this._handleVisibilityChange.bind(this), false);\n        }\n\n    }\n\n    public getVisibilityWatch(): boolean {\n        return this._options.visibilityWatch;\n    }\n\n    public setVisibilityHiddenAction(visibilityHiddenAction: typeVisibilityHiddenAction): void {\n        this._options.visibilityHiddenAction = visibilityHiddenAction;\n    }\n\n    public getVisibilityHiddenAction(): typeVisibilityHiddenAction {\n        return this._options.visibilityHiddenAction;\n    }\n\n    protected _handleVisibilityChange(): void {\n\n        let hiddenKeyword: string;\n\n        if (typeof document.hidden !== 'undefined') {\n            // Opera 12.10 and Firefox 18 and later support\n            hiddenKeyword = 'hidden';\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } else if (typeof (document as any).msHidden !== 'undefined') {\n            hiddenKeyword = 'msHidden';\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } else if (typeof (document as any).webkitHidden !== 'undefined') {\n            hiddenKeyword = 'webkitHidden';\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if ((document as any)[hiddenKeyword]) {\n\n            if (this._options.visibilityHiddenAction === PlayerCore.VISIBILITY_HIDDEN_ACTION_PAUSE) {\n\n                const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n                if (currentSound === null) {\n                    return;\n                }\n        \n                if (currentSound.state === PlayerSound.SOUND_STATE_PLAYING) {\n                    this.pause();\n                    this._postVisibilityHiddenPlaying = true;\n                } else {\n                    this._postVisibilityHiddenPlaying = false;\n                }\n\n            } else if (this._options.visibilityHiddenAction === PlayerCore.VISIBILITY_HIDDEN_ACTION_MUTE) {\n                this.mute();\n            }\n        } else {\n            if (this._options.visibilityHiddenAction === PlayerCore.VISIBILITY_HIDDEN_ACTION_PAUSE && this._postVisibilityHiddenPlaying === true) {\n                this.play();\n            } else if (this._options.visibilityHiddenAction === PlayerCore.VISIBILITY_HIDDEN_ACTION_MUTE) {\n                this.unMute();\n            }\n        }\n\n    }\n\n    public async manuallyUnlockAudio() {\n\n        await this._playerAudio.unlockAudio();\n\n    }\n\n    public async disconnect(): Promise<void> {\n\n        // adding another check here to cancel animation frame because:\n        // a player can be disconnect while song is paused or playing\n        // which means the cancelAnimationFrame in _stop would never get triggered\n        if (this._playingProgressRequestId !== null) {\n            cancelAnimationFrame(this._playingProgressRequestId);\n            this._playingProgressRequestId = null;\n        }\n\n        await this._playerAudio.shutDown(this._queue);\n\n    }\n\n    public async getAudioContext(): Promise<AudioContext> {\n\n        const audioContext = await this._playerAudio.getAudioContext();\n\n        return audioContext;\n\n    }\n\n    public getCurrentSound(): ISound {\n\n        return this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n    }\n\n}\n"],"names":["PlayerSound","constructor","soundAttributes","this","url","codec","loop","sourceNode","gainNode","isReadyToPLay","isBuffered","isBuffering","audioElement","audioBuffer","arrayBuffer","audioBufferDate","playTimeOffset","startTime","playTime","playedTimePercentage","state","loadingProgress","duration","durationSetManually","firstTimePlayed","isConnectToPlayerGain","elapsedPlayTime","seekPercentage","Array","isArray","source","id","_generateSoundId","isNaN","onLoading","onPlaying","onStarted","onEnded","onStopped","onPaused","onResumed","onSeeking","ArrayBuffer","AudioBuffer","Date","getCurrentTime","currentTime","AudioBufferSourceNode","context","MediaElementAudioSourceNode","getDuration","setDuration","setLoop","SOUND_STATE_PLAYING","mediaElement","getLoop","now","toString","Math","random","substring","SOUND_STATE_STOPPED","SOUND_STATE_PAUSED","SOUND_STATE_SEEKING","PlayerAudio","options","_audioContext","_volume","_audioNodes","_audioElement","_mediaElementAudioSourceNode","_isAudioUnlocked","_isAudioUnlocking","_options","_initialize","unlockAudioOnFirstUserInteraction","_addFirstUserInteractionEventListeners","getAudioNodes","decodeAudio","audioContext","getAudioContext","decodeAudioData","_createAudioContext","AudioContext","WebAudioContext","window","webkitAudioContext","document","addEventListener","unlockAudio","bind","_removeFirstUserInteractionEventListeners","removeEventListener","Promise","resolve","reject","loadPlayerMode","forceCreate","_createAudioElement","catch","error","then","placeholderBuffer","createBuffer","bufferSource","createBufferSource","onended","disconnect","buffer","connect","destination","start","_createAudioElementAndSource","_createMediaElementAudioSourceNode","Audio","controls","autoplay","preload","volume","addAudioElementsToDom","body","appendChild","getAudioElement","unfreezeAudioContext","resume","freezeAudioContext","suspend","isAudioContextFrozen","detectAudioContextSupport","audioContextSupported","detectAudioElementSupport","createElement","canPlayType","_createAudioBufferSourceNode","createMediaElementSource","_destroyMediaElementAudioSourceNode","remove","_destroyAudioBufferSourceNode","_destroyAudioContext","close","shutDown","songsQueue","forEach","sound","disconnectSound","_disconnectPlayerGainNode","_getPlayerGainNode","GainNode","createGain","_initializeVolume","connectSound","onEndedCallback","audioBufferSourceNode","gain","value","playerGainNode","_changePlayerGainValue","gainValue","timeConstantInSeconds","volumeTransitionTime","setTargetAtTime","setVolume","volume_1","forceUpdateUserVolume","persistVolume","localStorage","setItem","newGainValue","round","Number","EPSILON","getVolume","parseInt","getItem","userVolumeInPercent","PlayerRequest","getArrayBuffer","requested","xhr","XMLHttpRequest","open","responseType","onload","status","response","Error","statusText","onprogress","event","loadingPercentageRaw","total","loaded","loadingPercentage","onerror","send","PlayerCore","playerOptions","_playingProgressRequestId","_postMuteVolume","_postVisibilityHiddenPlaying","_progressTrigger","timestamp","currentSound","_getSoundFromQueue","whichSound","CURRENT_SOUND","_playingProgressPreviousTimestamp","playingProgressIntervalTime","playingPercentage","playingPercentageRaw","requestAnimationFrame","defaultOptions","loopQueue","loopSong","soundsBaseUrl","playNextOnEnded","stopOnReset","visibilityWatch","visibilityHiddenAction","Object","assign","_queue","_currentIndex","audioOptions","_audioOptions","_playerAudio","PLAYER_MODE_AUDIO","PLAYER_MODE_AJAX","addSoundToQueue","whereInQueue","WHERE_IN_QUEUE_AT_END","_appendSoundToQueue","WHERE_IN_QUEUE_AT_START","_prependSoundToQueue","push","unshift","resetQueue","stop","reset","getQueue","setLoopQueue","loppQueue","getLoopQueue","mute","currentVolume","unMute","isMuted","setPosition","soundPositionInPercent","loadSound","AFTER_LOADING_SEEK","_setPosition","soundPositionInSeconds","setPositionInSeconds","previousState","seekingPercentageRaw","seekingPercentage","_stop","_play","afterLoadingAction","_loadSoundUsingAudioElement","_loadSoundUsingRequest","PLAYER_MODE_FETCH","_findBestSource","buffered","length","end","canPlayThroughHandler","__awaiter","AFTER_LOADING_PLAY","crossOrigin","src","load","_decodeSound","request","arrayBufferCopy","slice","play","arguments","updateIndex","_onEnded","_playAudioBuffer","_playMediaElementAudio","_triggerSoundCallbacks","ceil","willPlayNext","PLAY_SOUND_NEXT","next","soundIndex","undefined","PLAY_SOUND_PREVIOUS","PLAY_SOUND_FIRST","PLAY_SOUND_LAST","_findSoundById","soundId","some","soundFromQueue","index","soundSource","bestSource","sources","i","soundUrl","isCodecSupported","_checkCodecSupport","isPreferred","mediaMimeTypes","_checkMimeTypesSupport","deviceAudio","isSupported","mediaMimeType","replace","pause","cancelAnimationFrame","previous","first","last","setVisibilityWatch","_handleVisibilityChange","getVisibilityWatch","setVisibilityHiddenAction","getVisibilityHiddenAction","hiddenKeyword","hidden","msHidden","webkitHidden","VISIBILITY_HIDDEN_ACTION_PAUSE","VISIBILITY_HIDDEN_ACTION_MUTE","manuallyUnlockAudio","getCurrentSound"],"mappings":"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"}