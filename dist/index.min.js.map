{"version":3,"file":"index.min.js","sources":["../src/library/sound.ts","../src/library/audio.ts","../src/library/request.ts","../src/library/core.ts"],"sourcesContent":["const SOUND_STATE_STOPPED = 'sound_state_stopped';\nconst SOUND_STATE_PAUSED = 'sound_state_paused';\nconst SOUND_STATE_PLAYING = 'sound_state_playing';\nconst SOUND_STATE_SEEKING = 'sound_state_seeking';\n\nexport type typeSoundStates = typeof SOUND_STATE_STOPPED | typeof SOUND_STATE_PAUSED | typeof SOUND_STATE_PLAYING | typeof SOUND_STATE_SEEKING;\n\nexport interface IOnProgress {\n    (playingPercentage: number, duration: number, playTime: number): void;\n}\n\nexport interface IOnEnded {\n    (willPlayNext: boolean): void;\n}\n\nexport interface IOnStarted {\n    (playTimeOffset: number): void;\n}\n\nexport interface IOnPaused {\n    (playTime: number): void;\n}\n\nexport interface IOnResumed {\n    (playTime: number): void;\n}\n\nexport interface IOnStopped {\n    (playTime: number): void;\n}\n\nexport interface IOnSeeking {\n    (seekingPercentage: number, duration: number, playTime: number): void;\n}\n\nexport interface ISoundSource {\n    url: string;\n    codec?: string;\n    isPreferred?: boolean;\n}\n\nexport interface ISoundAttributes {\n    // source(s) are NOT mandatory as user can provide an arrayBuffer\n    // and / or audioBuffer in which case the source url is not needed\n    source?: (ISoundSource)[] | ISoundSource;\n    id?: number | string;\n    loop?: boolean;\n    audioBuffer?: AudioBuffer;\n    arrayBuffer?: ArrayBuffer;\n    duration?: number;\n\n    // events\n    onLoading?: IOnProgress;\n    onPlaying?: IOnProgress;\n    onEnded?: IOnEnded;\n    onStarted?: IOnStarted;\n    onStopped?: IOnStopped;\n    onPaused?: IOnPaused;\n    onResumed?: IOnResumed;\n    onSeeking?: IOnSeeking;\n}\n\nexport interface ISound extends ISoundAttributes, ISoundSource {\n    sourceNode: AudioBufferSourceNode | MediaElementAudioSourceNode;\n    gainNode: GainNode;\n    isReadyToPLay: boolean;\n    isBuffered: boolean;\n    isBuffering: boolean;\n    audioElement: HTMLAudioElement;\n    audioBufferDate: Date;\n    playTimeOffset: number;\n    startTime: number;\n    playTime: number;\n    elapsedPlayTime: number;\n    playedTimePercentage: number;\n    state: typeSoundStates;\n    loadingProgress: number;\n    firstTimePlayed: boolean;\n    isConnectToPlayerGain: boolean;\n    getCurrentTime(): number;\n    getDuration(): number;\n}\n\nexport class PlayerSound implements ISound {\n\n    // static constants\n    static readonly SOUND_STATE_STOPPED = 'sound_state_stopped';\n    static readonly SOUND_STATE_PAUSED = 'sound_state_paused';\n    static readonly SOUND_STATE_PLAYING = 'sound_state_playing';\n    static readonly SOUND_STATE_SEEKING = 'sound_state_seeking';\n\n    // properties\n    public source: (ISoundSource)[] | ISoundSource;\n    public url: string = null;\n    public codec: string = null;\n    public id: number | string;\n    public loop: boolean = false;\n    public sourceNode: AudioBufferSourceNode | MediaElementAudioSourceNode = null;\n    public gainNode: GainNode = null;\n    public isReadyToPLay = false;\n    public isBuffered = false;\n    public isBuffering = false;\n    public audioElement: HTMLAudioElement = null;\n    public audioBuffer: AudioBuffer = null;\n    public arrayBuffer: ArrayBuffer = null;\n    public audioBufferDate: Date = null;\n    public playTimeOffset = 0;\n    public startTime = 0;\n    // elapsedPlayTime is used to adjust the playtime\n    // when playing audio buffers\n    // on seek, pause or when there is a playTimeOffset\n    // see getCurrentTime function\n    public elapsedPlayTime = 0;\n    public playTime = 0;\n    public playedTimePercentage = 0;\n    public state: typeSoundStates = SOUND_STATE_STOPPED;\n    public loadingProgress = 0;\n    public duration: number = null;\n    public firstTimePlayed = true;\n    public isConnectToPlayerGain = false;\n\n    // callbacks\n    public onLoading: IOnProgress;\n    public onPlaying: IOnProgress;\n    public onEnded: IOnEnded;\n    public onStarted: IOnStarted;\n    public onStopped: IOnStopped;\n    public onPaused: IOnPaused;\n    public onResumed: IOnResumed;\n    public onSeeking?: IOnSeeking;\n\n    constructor(soundAttributes: ISoundAttributes) {\n\n        // user provided values\n        if (!Array.isArray(soundAttributes.source)) {\n            this.source = [soundAttributes.source];\n        } else {\n            this.source = soundAttributes.source;\n        }\n\n        if (typeof soundAttributes.id !== 'undefined') {\n            this.id = soundAttributes.id;\n        } else {\n            this.id = this._generateSoundId()\n        }\n\n        this.loop = soundAttributes.loop || false;\n\n        // the user can set the duration manually\n        // this is usefull if we need to convert the position percentage into seconds but don't want to preload the song\n        // to get the duration the song has to get preloaded as the duration is a property of the audioBuffer\n        this.duration = soundAttributes.duration || null;\n\n        if (typeof soundAttributes.onLoading === 'function') {\n            this.onLoading = soundAttributes.onLoading;\n        } else {\n            this.onLoading = null;\n        }\n\n        if (typeof soundAttributes.onPlaying === 'function') {\n            this.onPlaying = soundAttributes.onPlaying;\n        } else {\n            this.onPlaying = null;\n        }\n\n        if (typeof soundAttributes.onStarted === 'function') {\n            this.onStarted = soundAttributes.onStarted;\n        } else {\n            this.onStarted = null;\n        }\n\n        if (typeof soundAttributes.onEnded === 'function') {\n            this.onEnded = soundAttributes.onEnded;\n        } else {\n            this.onEnded = null;\n        }\n\n        if (typeof soundAttributes.onStopped === 'function') {\n            this.onStopped = soundAttributes.onStopped;\n        } else {\n            this.onStopped = null;\n        }\n\n        if (typeof soundAttributes.onPaused === 'function') {\n            this.onPaused = soundAttributes.onPaused;\n        } else {\n            this.onPaused = null;\n        }\n\n        if (typeof soundAttributes.onResumed === 'function') {\n            this.onResumed = soundAttributes.onResumed;\n        } else {\n            this.onResumed = null;\n        }\n\n        if (typeof soundAttributes.onSeeking === 'function') {\n            this.onSeeking = soundAttributes.onSeeking;\n        } else {\n            this.onSeeking = null;\n        }\n\n        if (soundAttributes.arrayBuffer instanceof ArrayBuffer) {\n            this.arrayBuffer = soundAttributes.arrayBuffer;\n        }\n\n        if (soundAttributes.audioBuffer instanceof AudioBuffer) {\n            this.audioBuffer = soundAttributes.audioBuffer;\n            this.isBuffering = false;\n            this.isBuffered = true;\n            this.audioBufferDate = new Date();\n            this.duration = this.getDuration();\n        }\n\n    }\n\n    public getCurrentTime(): number {\n\n        let currentTime: number;\n\n        if (this.sourceNode !== null) {\n            if (this.sourceNode instanceof AudioBufferSourceNode) {\n                currentTime = (this.sourceNode.context.currentTime - this.startTime) + this.elapsedPlayTime;\n            } else if (this.sourceNode instanceof MediaElementAudioSourceNode) {\n                currentTime = this.audioElement.currentTime;\n            }\n        }\n\n        \n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n        const currentTimeRounded = Math.round((currentTime + Number.EPSILON) * 100) / 100;\n\n        return currentTimeRounded;\n\n    }\n\n    public getDuration(): number {\n\n        let duration: number;\n\n        if (this.sourceNode !== null) {\n            if (this.sourceNode instanceof AudioBufferSourceNode) {\n                duration = this.audioBuffer.duration;\n            } else if (this.sourceNode instanceof MediaElementAudioSourceNode) {\n                duration = this.audioElement.duration;\n            }\n        }\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n        const durationRounded = Math.round((duration + Number.EPSILON) * 100) / 100;\n\n        return durationRounded;\n\n    }\n\n    protected _generateSoundId() {\n        return Date.now().toString(36) + Math.random().toString(36).substring(2)\n    }\n\n}\n","import { ISound } from './sound';\n\ntype OnEndedCallbackType = (event: Event) => void\n\nexport interface IAudioOptions {\n    audioContext: AudioContext;\n    createAudioContextOnFirstUserInteraction: boolean;\n    volume: number;\n    persistVolume: boolean;\n    loadPlayerMode: string;\n    addAudioElementsToDom: boolean;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/AudioNode\nexport interface IAudioNodes {\n    // https://developer.mozilla.org/en-US/docs/Web/API/GainNode\n    gainNode: GainNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\n    pannerNode?: PannerNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode\n    stereoPannerNode?: StereoPannerNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/DelayNode\n    delayNode?: DelayNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode\n    scriptProcessorNode?: ScriptProcessorNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode\n    analyserNode?: AnalyserNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\n    biquadFilterNode?: BiquadFilterNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode\n    channelMergeNode?: ChannelMergerNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode\n    channelSplitterNode?: ChannelSplitterNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode\n    convolverNode?: ConvolverNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode\n    dynamicCompressorNode?: DynamicsCompressorNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode\n    oscillatorNode?: OscillatorNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode\n    waveShaperNode?: WaveShaperNode;\n}\n\nexport class PlayerAudio {\n\n    protected _options;\n    protected _audioContext: AudioContext = null;\n    protected _volume: number = null;\n    protected _audioNodes: IAudioNodes = {\n        gainNode: null,\n    };\n    protected _audioElement: HTMLAudioElement = null;\n    protected _mediaElementAudioSourceNode: MediaElementAudioSourceNode = null;\n    protected _isAudioUnlocked: boolean = false;\n\n    constructor(options: IAudioOptions) {\n\n        this._options = options;\n\n        this._initialize();\n\n    }\n\n    protected _initialize(): void {\n\n        // I was planning on using the \"first user interaction hack\" only (on mobile)\n        // for this I would have checked the if the autoplay policy prevents me\n        // from playing a sound programmatically (without user click)\n        // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getAutoplayPolicy\n        // but this feature is only implemented on firefox (as of 19.09.2023)\n\n        if (this._options.createAudioContextOnFirstUserInteraction) {\n            this._addFirstUserInteractionEventListeners();\n        }\n\n    }\n\n    public getAudioNodes() {\n        return this._audioNodes;\n    }\n\n    public async decodeAudio(arrayBuffer: ArrayBuffer): Promise<AudioBuffer> {\n\n        const audioContext = await this.getAudioContext();\n\n        // Note to self:\n        // the new decodeAudioData returns a promise, older versions accept as second\n        // and third parameter, which are a success and an error callback funtion\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData\n\n        return await audioContext.decodeAudioData(arrayBuffer);\n\n    }\n\n    protected _createAudioContext(): Promise<void> {\n\n        if (this._audioContext instanceof AudioContext) {\n            // if already created, no need to create a new one\n            return;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const WebAudioContext: typeof AudioContext = window.AudioContext || (window as any).webkitAudioContext;\n\n        // initialize the audio context\n        if (this._options.audioContext !== null) {\n            this._audioContext = this._options.audioContext;\n        } else {\n            this._audioContext = new WebAudioContext();\n        }\n\n    }\n\n    protected _addFirstUserInteractionEventListeners(): void {\n\n        if (this._options.createAudioContextOnFirstUserInteraction) {\n            document.addEventListener('touchstart', this._unlockAudio.bind(this));\n            document.addEventListener('touchend', this._unlockAudio.bind(this));\n            document.addEventListener('mousedown', this._unlockAudio.bind(this));\n        }\n\n    }\n\n    protected _removeFirstUserInteractionEventListeners(): void {\n\n        if (this._options.createAudioContextOnFirstUserInteraction) {\n            document.removeEventListener('touchstart', this._unlockAudio.bind(this));\n            document.removeEventListener('touchend', this._unlockAudio.bind(this));\n            document.removeEventListener('mousedown', this._unlockAudio.bind(this));\n        }\n\n    }\n\n    protected async _unlockAudio() {\n\n        if (this._isAudioUnlocked) {\n            return;\n        }\n\n        // make sure the audio context is not suspended\n        // on android this is what unlocks audio\n        await this.getAudioContext();\n\n        // create an (empty) buffer\n        const placeholderBuffer = this._audioContext.createBuffer(1, 1, 22050);\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBufferSource\n        let bufferSource = this._audioContext.createBufferSource();\n\n        bufferSource.onended = () => {\n\n            bufferSource.disconnect(0);\n\n            this._isAudioUnlocked = true;\n\n            this._removeFirstUserInteractionEventListeners();\n\n            bufferSource.disconnect(0);\n\n            bufferSource.buffer = null;\n            bufferSource = null;\n\n        };\n\n        bufferSource.buffer = placeholderBuffer;\n        bufferSource.connect(this._audioContext.destination);\n        bufferSource.start(0);\n\n        if (this._options.loadPlayerMode === 'player_mode_audio') {\n\n            // on iOS (mobile) the audio element you want to use needs to have been created\n            // as a direct result of an user interaction\n            // after it got unlocked we re-use that element for all sounds\n            this._createAudioElement();\n            this._createMediaElementAudioSourceNode();\n        }\n\n    }\n\n    protected async _createAudioElement() {\n\n        if (this._audioElement === null) {\n\n            const audioElement = new Audio();\n\n            audioElement.controls = false;\n            audioElement.autoplay = false;\n            audioElement.preload = 'metadata';\n            audioElement.volume = 1;\n            audioElement.id = 'web-audio-api-player';\n\n            this._audioElement = audioElement;\n\n            if (this._options.addAudioElementsToDom) {\n                document.body.appendChild(audioElement);\n            }\n\n        }\n\n    }\n\n    public getAudioElement(): HTMLAudioElement {\n\n        return this._audioElement;\n\n    }\n\n    public async getAudioContext(): Promise<AudioContext> {\n\n        if (this._audioContext === null || this._audioContext.state === 'closed') {\n            await this._createAudioContext();\n        } else if (this._audioContext.state === 'suspended') {\n            await this.unfreezeAudioContext();\n        }\n\n        return this._audioContext;\n\n    }\n\n    public unfreezeAudioContext(): Promise<void> {\n\n        // did resume get implemented\n        if (typeof this._audioContext.resume === 'undefined') {\n\n            // this browser does not support resume\n            // just send back a promise as resume would do\n            return Promise.resolve();\n\n        } else {\n\n            // resume the audio hardware access\n            // audio context resume returns a promise\n            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume\n            return this._audioContext.resume();\n\n        }\n\n    }\n\n    public freezeAudioContext(): Promise<void> {\n\n        // did suspend get implemented\n        if (typeof this._audioContext.suspend === 'undefined') {\n\n            return Promise.resolve();\n\n        } else {\n\n            // halt the audio hardware access temporarily to reduce CPU and battery usage\n            return this._audioContext.suspend();\n\n        }\n\n    }\n\n    public isAudioContextFrozen(): boolean {\n\n        return this._audioContext.state === 'suspended' ? true : false;\n\n    }\n\n    public detectAudioContextSupport(): boolean {\n\n        // basic audio context detection\n        let audioContextSupported = false;\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (typeof (window as any).webkitAudioContext !== 'undefined') {\n            audioContextSupported = true;\n        } else if (typeof AudioContext !== 'undefined') {\n            audioContextSupported = true;\n        }\n\n        return audioContextSupported;\n\n    }\n\n    public detectAudioElementSupport(): boolean {\n\n        // basic audio element detection\n        return !!document.createElement('audio').canPlayType;\n\n    }\n\n    protected async _createAudioBufferSourceNode(): Promise<AudioBufferSourceNode> {\n\n        const audioContext = await this.getAudioContext();\n\n        return audioContext.createBufferSource();\n\n    }\n\n    protected async _createMediaElementAudioSourceNode(): Promise<void> {\n\n        if (this._mediaElementAudioSourceNode === null) {\n\n            const audioContext = await this.getAudioContext();\n\n            // createMediaElementSource: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaElementSource\n            this._mediaElementAudioSourceNode = audioContext.createMediaElementSource(this._audioElement);\n\n        }\n\n    }\n\n    protected _destroyMediaElementAudioSourceNode(): void {\n\n        if (this._mediaElementAudioSourceNode !== null) {\n\n            if (typeof this._mediaElementAudioSourceNode.mediaElement !== 'undefined') {\n                this._mediaElementAudioSourceNode.mediaElement.remove();\n            }\n\n            this._mediaElementAudioSourceNode.disconnect();\n            this._mediaElementAudioSourceNode = null;\n        }\n\n    }\n\n    protected _destroyAudioBufferSourceNode(): void {\n\n        if (this._mediaElementAudioSourceNode !== null) {\n\n            this._mediaElementAudioSourceNode.disconnect();\n\n        }\n\n    }\n\n    protected async _destroyAudioContext(): Promise<void> {\n\n        if (this._audioContext !== null && this._audioContext.state !== 'closed') {\n            await this._audioContext.close();\n            this._audioContext = null;\n        }\n\n    }\n\n    public async shutDown(songsQueue: ISound[]): Promise<void> {\n\n        this._removeFirstUserInteractionEventListeners();\n\n        songsQueue.forEach((sound) => {\n            this.disconnectSound(sound);\n        });\n\n        this._destroyMediaElementAudioSourceNode();\n        this._destroyAudioBufferSourceNode();\n\n        this._disconnectPlayerGainNode();\n\n        await this._destroyAudioContext();\n\n    }\n\n\n    protected async _getPlayerGainNode(): Promise<GainNode> {\n\n        // the player (master) gain node\n        let gainNode: GainNode;\n\n        if (this._audioNodes.gainNode instanceof GainNode) {\n\n            gainNode = this._audioNodes.gainNode;\n\n        } else {\n\n            const audioContext = await this.getAudioContext();\n\n            // Note: a volume control (GainNode) should always\n            // be the last node that gets connected\n            // so that volume changes take immediate effect\n            gainNode = audioContext.createGain();\n\n            this._initializeVolume(gainNode);\n\n            // final step: connect the gain node to the audio destination node\n            gainNode.connect(audioContext.destination);\n\n            this._audioNodes.gainNode = gainNode;\n\n        }\n\n        return gainNode;\n\n    }\n\n    protected _disconnectPlayerGainNode(): void {\n\n        if (this._audioNodes.gainNode !== null) {\n            this._audioNodes.gainNode.disconnect();\n            this._audioNodes.gainNode = null;\n        }\n\n    }\n\n    public async connectSound(sound: ISound, onEndedCallback: OnEndedCallbackType): Promise<void> {\n\n        if (sound.isConnectToPlayerGain) {\n            return;\n        }\n\n        if (this._options.loadPlayerMode === 'player_mode_ajax') {\n\n            // get a new audio buffer source node\n            // Note: remember these are one use only\n            // https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode\n            const audioBufferSourceNode = await this._createAudioBufferSourceNode();\n\n            // create the sound gain node\n            sound.gainNode = audioBufferSourceNode.context.createGain();\n\n            // connect the source to the sound gain node\n            audioBufferSourceNode.connect(sound.gainNode);\n\n            // do we loop this song\n            audioBufferSourceNode.loop = sound.loop;\n\n            // NOTE: the source nodes onended handler won't have any effect if the loop property\n            // is set to true, as the audio won't stop playing\n            audioBufferSourceNode.onended = onEndedCallback;\n\n            sound.sourceNode = audioBufferSourceNode;\n\n        } else if (this._options.loadPlayerMode === 'player_mode_audio') {\n\n            // create the sound gain node\n            sound.gainNode = this._mediaElementAudioSourceNode.context.createGain();\n\n            // connect the source to the sound gain node\n            this._mediaElementAudioSourceNode.connect(sound.gainNode);\n\n            // do we loop this song\n            this._mediaElementAudioSourceNode.mediaElement.loop = sound.loop;\n\n            // NOTE: the source nodes onended handler won't have any effect if the loop property\n            // is set to true, as the audio won't stop playing\n            this._mediaElementAudioSourceNode.mediaElement.onended = onEndedCallback;\n\n            sound.sourceNode = this._mediaElementAudioSourceNode;\n\n        }\n\n        // set the gain by default always to 1\n        // TODO: allow user to define a gain value for each sound via sound options\n        // this allows to normalize the gain of all sounds in a playlist\n        // TODO: in future allow a sound gain to be faded in or out\n        // without having to change the main player gain\n        sound.gainNode.gain.value = 1;\n\n        const playerGainNode = await this._getPlayerGainNode();\n\n        sound.gainNode.connect(playerGainNode);\n        sound.isConnectToPlayerGain = true;\n\n    }\n\n    public async disconnectSound(sound: ISound): Promise<void> {\n\n        if (!sound.isConnectToPlayerGain) {\n            return;\n        }\n\n        if (sound.sourceNode !== null) {\n            sound.sourceNode.disconnect();\n            // we set the source node to null, so that it can get garbage collected\n            // as specified in the specs: you can't reuse an audio buffer source node,\n            // after it got stopped\n            sound.sourceNode = null;\n        }\n\n        if (sound.gainNode !== null) {\n            sound.gainNode.disconnect();\n            sound.gainNode = null;\n            sound.isConnectToPlayerGain = false;\n        }\n\n        if (sound.audioElement !== null) {\n            sound.audioElement = null;\n        }\n\n    }\n\n    protected async _changePlayerGainValue(gainValue: number): Promise<void> {\n\n        if (this._audioNodes.gainNode instanceof GainNode) {\n            const audioContext = await this.getAudioContext();\n            this._audioNodes.gainNode.gain.setTargetAtTime(gainValue, audioContext.currentTime, 0.1);\n        }\n\n    }\n\n    public async setVolume(volume: number, forceUpdateUserVolume = true): Promise<number> {\n\n        // we sometimes change the volume, for a fade in/out or when muting, but\n        // in this cases we don't want to update the user's persisted volume, in\n        // which case forceUpdateUserVolume is false else it would be true\n        if (this._options.persistVolume && forceUpdateUserVolume) {\n            localStorage.setItem('WebAudioAPIPlayerVolume', volume.toString());\n        }\n\n        // the gain values we use range from 0 to 1\n        // so we need to divide the volume (in percent) by 100 to get the gain value\n        const newGainValue = volume / 100;\n\n        if (this._audioNodes.gainNode instanceof GainNode) {\n\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n            const currentGainRounded = Math.round((this._audioNodes.gainNode.gain.value + Number.EPSILON) * 100) / 100;\n\n            // check if the volume changed\n            if (newGainValue !== currentGainRounded) {\n\n                // the gain value changes the amplitude of the sound wave\n                // a gain value of one does nothing\n                // values between 0 and 1 reduce the loudness, above one they amplify the loudness\n                // negative values work too, but they invert the waveform, so -1 is as loud as 1\n                await this._changePlayerGainValue(newGainValue);\n\n            }\n\n        }\n\n        this._volume = volume;\n\n        return volume;\n\n    }\n\n    public getVolume(): number {\n\n        let volume: number;\n\n        // check if volume has already been set\n        if (this._volume !== null) {\n            volume = this._volume;\n        } else {\n            if (this._options.persistVolume) {\n                // if persist volume is enabled, check if there is a user volume in localstorage\n                const userVolumeInPercent = parseInt(localStorage.getItem('WebAudioAPIPlayerVolume'));\n\n                if (!isNaN(userVolumeInPercent)) {\n                    volume = userVolumeInPercent;\n                }\n            }\n\n            // if volume is not persisted or persited value not yet set\n            if (typeof volume === 'undefined') {\n                volume = this._options.volume;\n            }\n            this._volume = volume;\n        }\n\n        return volume;\n\n    }\n\n    protected _initializeVolume(gainNode: GainNode): void {\n\n        if (this._options.persistVolume) {\n            // if persist volume is enabled, check if there is a user volume in localstorage\n            const userVolumeInPercent = parseInt(localStorage.getItem('WebAudioAPIPlayerVolume'));\n            const gainValue = userVolumeInPercent / 100;\n\n            if (!isNaN(userVolumeInPercent)) {\n                gainNode.gain.value = gainValue;\n            }\n\n            this._volume = userVolumeInPercent;\n        }\n\n\n        // if no user volume take the default options volume\n        if (this._volume === null) {\n            const gainValue = this._options.volume / 100;\n            gainNode.gain.value = gainValue;\n            this._volume = this._options.volume;\n        }\n\n    }\n\n}\n","import { IOnProgress } from './sound';\n\nexport interface IRequested {\n    url: string;\n    loadingProgress: number;\n    onLoading?: IOnProgress;\n}\n\nexport class PlayerRequest {\n\n    public getArrayBuffer(requested: IRequested): Promise<ArrayBuffer> {\n\n        return new Promise(function (resolve, reject) {\n\n            const xhr = new XMLHttpRequest();\n\n            // TODO: abort the request?\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort\n\n            // thirs parameter is for \"async\", default true but who knows if prefer to explicitly set it just in case\n            xhr.open('GET', requested.url, true);\n\n            // set the expected response type from the server to arraybuffer\n            xhr.responseType = 'arraybuffer';\n\n            xhr.onload = function (): void {\n\n                // gets called even on for example 404, so check the status\n                if (xhr.status === 200) {\n\n                    // successful request so now we can resolve the promise\n                    resolve(xhr.response);\n\n                } else {\n\n                    // something went wrong so we reject with an error\n                    reject(new Error(xhr.statusText + '(status:' + xhr.status + ')'));\n\n                }\n\n            };\n\n            xhr.onprogress = function (event): void {\n\n                const percentage = 100 / (event.total / event.loaded);\n\n                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n                const percentageRounded = Math.round((percentage + Number.EPSILON) * 100) / 100;\n\n                // update value on sound object\n                requested.loadingProgress = percentageRounded;\n\n                if (requested.onLoading !== null) {\n                    requested.onLoading(percentageRounded, event.total, event.loaded);\n                }\n\n            };\n\n            // also reject for any kind of network errors\n            xhr.onerror = function (error): void {\n\n                reject(error);\n\n            };\n\n            // now make the request\n            xhr.send();\n\n        });\n\n    }\n\n}\n","import { PlayerSound, ISound, ISoundAttributes, ISoundSource, typeSoundStates } from './sound';\nimport {\n    PlayerAudio,\n    IAudioOptions,\n} from './audio';\nimport { PlayerRequest } from './request';\n\nconst PLAYER_MODE_AUDIO = 'player_mode_audio';\nconst PLAYER_MODE_AJAX = 'player_mode_ajax';\nconst PLAYER_MODE_FETCH = 'player_mode_fetch';\n\nconst WHERE_IN_QUEUE_AT_START = 'prepend';\nconst WHERE_IN_QUEUE_AT_END = 'append';\n\ntype typePlayerMode = typeof PLAYER_MODE_AUDIO | typeof PLAYER_MODE_AJAX | typeof PLAYER_MODE_FETCH;\ntype typeWhereInQueue = typeof WHERE_IN_QUEUE_AT_START | typeof WHERE_IN_QUEUE_AT_END;\n\nexport interface ICoreOptions {\n    volume?: number;\n    loopQueue?: boolean;\n    loopSong?: boolean;\n    soundsBaseUrl?: string;\n    playingProgressIntervalTime?: number;\n    playNextOnEnded?: boolean;\n    stopOnReset?: boolean;\n    visibilityAutoMute?: boolean;\n    createAudioContextOnFirstUserInteraction?: boolean;\n    persistVolume?: boolean;\n    loadPlayerMode?: typePlayerMode;\n    audioContext?: AudioContext;\n    addAudioElementsToDom?: boolean;\n}\n\nexport interface ISoundsQueueOptions {\n    soundAttributes: ISoundAttributes;\n    whereInQueue?: typeWhereInQueue;\n}\n\ninterface IDecodeSoundOptions {\n    sound: ISound;\n}\n\nexport interface IPlayOptions {\n    whichSound?: number | string | undefined;\n    playTimeOffset?: number;\n}\n\ninterface IFindSoundById {\n    soundId: string | number;\n}\n\ninterface IFindBestSourceResponse {\n    url: string;\n    codec?: string;\n}\n\ninterface IGetSoundFromQueue {\n    whichSound?: string | number;\n    updateIndex?: boolean;\n}\n\ninterface IBestSource {\n    url: string;\n    codec?: string;\n}\n\nexport class PlayerCore {\n\n    // the sounds queue\n    protected _queue: ISound[];\n    // the queue index of the current sound\n    protected _currentIndex: number;\n    // instance of the audio library class\n    protected _playerAudio: PlayerAudio;\n    // playing progress animation frame request id\n    protected _playingProgressRequestId: number = null;\n    // time in milliseconds\n    protected _playingProgressPreviousTimestamp: DOMHighResTimeStamp;\n    // value of the volume before we muted\n    protected _postMuteVolume: number = null;\n    // user player options\n    protected _options: ICoreOptions;\n\n    // constants\n    static readonly WHERE_IN_QUEUE_AT_END = 'append';\n    static readonly WHERE_IN_QUEUE_AT_START = 'prepend';\n\n    static readonly PLAY_SOUND_NEXT = 'next';\n    static readonly PLAY_SOUND_PREVIOUS = 'previous';\n    static readonly PLAY_SOUND_FIRST = 'first';\n    static readonly PLAY_SOUND_LAST = 'last';\n\n    static readonly CURRENT_SOUND = 'current';\n\n    static readonly PLAYER_MODE_AUDIO = 'player_mode_audio';\n    static readonly PLAYER_MODE_AJAX = 'player_mode_ajax';\n    static readonly PLAYER_MODE_FETCH = 'player_mode_fetch';\n\n    constructor(playerOptions: ICoreOptions = {}) {\n\n        const defaultOptions: ICoreOptions = {\n            volume: 80,\n            loopQueue: false,\n            loopSong: false,\n            soundsBaseUrl: '',\n            playingProgressIntervalTime: 200,\n            playNextOnEnded: true,\n            stopOnReset: true,\n            visibilityAutoMute: false,\n            createAudioContextOnFirstUserInteraction: true,\n            persistVolume: true,\n            loadPlayerMode: PLAYER_MODE_AUDIO,\n            audioContext: null,\n            addAudioElementsToDom: false,\n        };\n\n        const options = Object.assign({}, defaultOptions, playerOptions);\n\n        this._queue = [];\n        this._currentIndex = 0;\n        this._options = options;\n        this._playingProgressPreviousTimestamp = 0;\n\n        this._initialize();\n\n    }\n\n    protected _initialize(): void {\n\n        const audioOptions = this._audioOptions();\n\n        // player audio library instance\n        this._playerAudio = new PlayerAudio(audioOptions);\n\n        switch (this._options.loadPlayerMode) {\n            case PlayerCore.PLAYER_MODE_AUDIO:\n                if (!this._playerAudio.detectAudioContextSupport()) {\n                    throw new Error('audio context is not supported by this device');\n                }\n                if (!this._playerAudio.detectAudioElementSupport()) {\n                    throw new Error('audio element is not supported by this device');\n                }\n                break;\n            case PlayerCore.PLAYER_MODE_AJAX:\n                if (!this._playerAudio.detectAudioContextSupport()) {\n                    throw new Error('audio context is not supported by this device');\n                }\n                break;\n        }\n\n    }\n\n    protected _audioOptions(): IAudioOptions {\n\n        const audioOptions: IAudioOptions = {\n            audioContext: this._options.audioContext,\n            createAudioContextOnFirstUserInteraction: this._options.createAudioContextOnFirstUserInteraction,\n            volume: this._options.volume,\n            persistVolume: this._options.persistVolume,\n            loadPlayerMode: this._options.loadPlayerMode,\n            addAudioElementsToDom: this._options.addAudioElementsToDom,\n        };\n\n        return audioOptions;\n\n    }\n\n    public addSoundToQueue({ soundAttributes, whereInQueue = WHERE_IN_QUEUE_AT_END }: ISoundsQueueOptions): ISound {\n\n        const sound: ISound = new PlayerSound(soundAttributes);\n\n        switch (whereInQueue) {\n            case PlayerCore.WHERE_IN_QUEUE_AT_END:\n                this._appendSoundToQueue(sound);\n                break;\n            case PlayerCore.WHERE_IN_QUEUE_AT_START:\n                this._prependSoundToQueue(sound);\n                break;\n        }\n\n        return sound;\n\n    }\n\n    protected _appendSoundToQueue(sound: ISound): void {\n\n        this._queue.push(sound);\n\n    }\n\n    protected _prependSoundToQueue(sound: ISound): void {\n\n        this._queue.unshift(sound);\n\n    }\n\n    public async resetQueue(): Promise<void> {\n\n        // check if sound should be stopped on reset\n        if (this._options.stopOnReset) {\n            await this.stop();\n        }\n\n        this._queue.forEach((sound) => {\n            this._playerAudio.disconnectSound(sound);\n        });\n\n        this._queue = [];\n\n    }\n\n    public reset(): void {\n\n        this.resetQueue().catch((error) => {\n            console.error(error);\n        });\n\n    }\n\n    public getQueue(): ISound[] {\n\n        return this._queue;\n\n    }\n\n    public setVolume(volume: number): void {\n\n        this._playerAudio.setVolume(volume).catch((error) => {\n            console.error(error);\n        })\n\n    }\n\n    public getVolume(): number {\n\n        return this._playerAudio.getVolume();\n\n    }\n\n    public setLoopQueue(loppQueue: boolean): void {\n\n        this._options.loopQueue = loppQueue;\n\n    }\n\n    public getLoopQueue(): boolean {\n\n        return this._options.loopQueue;\n\n    }\n\n    public mute(): void {\n\n        const currentVolume = this.getVolume();\n\n        this._playerAudio.setVolume(0, false).catch((error) => {\n            console.error(error);\n        })\n\n        this._postMuteVolume = currentVolume;\n\n    }\n\n    public unMute(): void {\n\n        this._playerAudio.setVolume(this._postMuteVolume, false).catch((error) => {\n            console.error(error);\n        })\n\n        this._postMuteVolume = null;\n\n    }\n\n    public isMuted(): boolean {\n\n        return this._postMuteVolume === null ? false : true;\n\n    }\n\n    public async setPosition(soundPositionInPercent: number): Promise<void> {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        if (currentSound !== null) {\n\n            let duration = currentSound.getDuration();\n\n            // if the duration did not get set manually or is not a number\n            if (duration === null || isNaN(duration)) {\n\n                // the user can set the sound duration manually but if he didn't the sound\n                // needs to get loaded first, to be able to know the duration it has\n                await this._loadSound(currentSound);\n\n                duration = currentSound.getDuration();\n\n            }\n\n            // calculate the position in seconds\n            const soundPositionInSeconds = (duration / 100) * soundPositionInPercent;\n\n            this.setPositionInSeconds(soundPositionInSeconds);\n\n        }\n\n    }\n\n    public async setPositionInSeconds(soundPositionInSeconds: number): Promise<void> {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        // if there is a sound currently being played\n        if (currentSound !== null) {\n\n            if (currentSound.onSeeking !== null) {\n\n                const playTime = soundPositionInSeconds;\n                const duration = currentSound.getDuration();\n                const seekingPercentageRaw = (playTime / duration) * 100;\n                const seekingPercentage = Math.round(seekingPercentageRaw);\n\n                currentSound.onSeeking(seekingPercentage, duration, playTime);\n\n            }\n\n            // is the sound is being played\n            if (currentSound.state === PlayerSound.SOUND_STATE_PLAYING) {\n\n                currentSound.playTime = soundPositionInSeconds;\n\n                if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX) {\n                    currentSound.elapsedPlayTime = soundPositionInSeconds;\n                    await this._stop(currentSound, PlayerSound.SOUND_STATE_SEEKING);\n                } else if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AUDIO) {\n                    currentSound.state = PlayerSound.SOUND_STATE_SEEKING;\n                    await this._play(currentSound);\n                }\n\n            } else {\n\n                // only set the sound position but don't play\n                currentSound.playTime = soundPositionInSeconds;\n                currentSound.state = PlayerSound.SOUND_STATE_SEEKING;\n\n            }\n\n        }\n\n    }\n\n    protected async _loadSound(sound: ISound): Promise<void> {\n\n        switch (this._options.loadPlayerMode) {\n            case PlayerCore.PLAYER_MODE_AUDIO:\n                await this._loadSoundUsingAudioElement(sound);\n                break;\n            case PlayerCore.PLAYER_MODE_AJAX:\n                await this._loadSoundUsingRequest(sound);\n                break;\n            case PlayerCore.PLAYER_MODE_FETCH:\n                // TODO: implement fetch (?)\n                console.warn(PlayerCore.PLAYER_MODE_FETCH + ' is not implemented yet');\n        }\n\n    }\n\n    protected _loadSoundUsingAudioElement(sound: ISound): Promise<void> {\n\n        return new Promise((resolve, reject) => {\n\n            // extract the url and codec from sources\n            const { url, codec = null } = this._findBestSource(sound.source);\n\n            sound.url = url;\n            sound.codec = codec;\n\n            if (sound.url !== null) {\n\n                sound.audioElement = this._playerAudio.getAudioElement();\n\n                const canPlayThroughHandler = async () => {\n\n                    // we don't need the listener anymore\n                    sound.audioElement.removeEventListener('canplaythrough', canPlayThroughHandler);\n                    // call onready callback\n                    sound.isReadyToPLay = true;\n                    // duration should now be available\n                    if (!isNaN(sound.audioElement.duration)) {\n                        sound.duration = sound.audioElement.duration;\n                    }\n\n                    resolve();\n\n                }\n\n                sound.audioElement.addEventListener('canplaythrough', canPlayThroughHandler);\n\n                // loading progress\n                // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/progress_event\n                sound.audioElement.onprogress = () => {\n                    if (sound.audioElement.buffered.length) {\n                        const duration = sound.getDuration()\n                        const buffered = sound.audioElement.buffered.end(0)\n                        const percentage = 100 / (duration / buffered);\n                        sound.loadingProgress = percentage;\n                        if (sound.onLoading !== null) {\n                            sound.onLoading(percentage, duration, buffered);\n                        }\n                        sound.duration = sound.audioElement.duration;\n                        if (percentage === 100) {\n                            sound.isBuffering = false;\n                            sound.isBuffered = true;\n                            sound.audioBufferDate = new Date();\n                        }\n                    }\n                }\n\n                // in chrome you will get this error message in the console:\n                // \"MediaElementAudioSource outputs zeroes due to CORS access restrictions\"\n                // to fix this put crossOrigin to anonymous or change the cors\n                // Access-Control-Allow-Origin header of the server to *\n                // \"crossOrigin\" has to be set before \"src\"\n                sound.audioElement.crossOrigin = 'anonymous';\n\n                sound.audioElement.src = sound.url;\n\n                // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/load\n                sound.audioElement.load();\n\n            } else {\n\n                reject(new Error('sound has no url'));\n\n            }\n\n        });\n\n    }\n\n    protected async _loadSoundUsingRequest(sound: ISound): Promise<void> {\n\n\n        // check for audio buffer before array buffer, because if one exist the other\n        // should exist too and is better for performance to reuse audio buffer then\n        // to redecode array buffer into an audio buffer\n        // user provided audio buffer\n        // decoding an array buffer is an expensive task even on modern hardware\n        // TODO: commented out for now, there is a weird bug when reusing the\n        // audio buffer, somehow the onended callback gets triggered in a loop\n        /*if (sound.audioBuffer !== null) {\n            return;\n        }*/\n\n        // user provided array buffer\n        if (sound.arrayBuffer !== null) {\n            return await this._decodeSound({ sound });\n        }\n\n        // extract the url and codec from sources\n        const { url, codec = null } = this._findBestSource(sound.source);\n\n        sound.url = url;\n        sound.codec = codec;\n\n        if (sound.url !== null) {\n\n            const request = new PlayerRequest();\n\n            // change buffering state\n            sound.isBuffering = true;\n\n            const arrayBuffer = await request.getArrayBuffer(sound);\n\n            sound.arrayBuffer = arrayBuffer;\n\n            await this._decodeSound({ sound });\n\n        } else {\n\n            throw new Error('sound has no url');\n\n        }\n\n    }\n\n    protected async _decodeSound({ sound }: IDecodeSoundOptions): Promise<void> {\n\n        // make a copy of the array buffer first\n        // because the decoding will detach the array buffer\n        // https://github.com/WebAudio/web-audio-api/issues/1175\n        const arrayBufferCopy = sound.arrayBuffer.slice(0);\n\n        const audioBuffer = await this._playerAudio.decodeAudio(arrayBufferCopy);\n\n        sound.audioBuffer = audioBuffer;\n        sound.isBuffering = false;\n        sound.isBuffered = true;\n        sound.audioBufferDate = new Date();\n        sound.duration = audioBuffer.duration;\n        sound.isReadyToPLay = true;\n\n    }\n\n    public async play({ whichSound, playTimeOffset }: IPlayOptions = {}): Promise<ISound> {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        // whichSound is optional, if set it can be the sound id (string or number)\n        // or it can be these 4 constants: PLAY_SOUND_NEXT, PLAY_SOUND_PREVIOUS,\n        // PLAY_SOUND_FIRST, PLAY_SOUND_LAST\n        const sound = this._getSoundFromQueue({ whichSound, updateIndex: true });\n\n        // if there is no sound we could play, do nothing\n        if (sound === null) {\n            console.warn('no more sounds in array');\n            return sound;\n        }\n\n        // if there is a sound currently being played\n        // AND the current sound is the same sound as the one that will now be played\n        // PAUSE the current sound\n        if (\n            currentSound !== null\n            && (currentSound.state === PlayerSound.SOUND_STATE_PLAYING)\n            && (currentSound.id === sound.id)\n        ) {\n            if (!isNaN(playTimeOffset)) {\n                // sound is already playing but a playTimeOffset got set\n                // so we just need to seek\n                this.setPositionInSeconds(playTimeOffset);\n                return sound;\n            } else {\n                // sound is already playing, do nothing\n                return sound;\n            }\n        }\n\n        // if there is a sound currently being played OR paused\n        // AND the current sound is NOT the same sound as the one that will now be played\n        // STOP the current sound\n        if (\n            currentSound !== null\n            && (currentSound.state === PlayerSound.SOUND_STATE_PLAYING || currentSound.state === PlayerSound.SOUND_STATE_PAUSED)\n            && (currentSound.id !== sound.id)\n        ) {\n            await this._stop(currentSound, PlayerSound.SOUND_STATE_STOPPED);\n        }\n\n        // if the user wants to play the sound from a certain position\n        // then playTimeOffset should be a number and not undefined\n        if (!isNaN(playTimeOffset)) {\n            sound.playTimeOffset = playTimeOffset;\n        } else {\n            sound.playTimeOffset = 0;\n        }\n\n        if (sound.sourceNode === null) {\n            // connect the source to the graph node(s)\n            await this._playerAudio.connectSound(sound, () => {\n                this._onEnded();\n            });\n        }\n\n        // has the sound already been loaded?\n        if (!sound.isReadyToPLay) {\n\n            await this._loadSound(sound);\n\n            await this._play(sound);\n\n        } else {\n\n            await this._play(sound);\n\n        }\n\n        return sound;\n\n    }\n\n    protected async _play(sound: ISound): Promise<void> {\n\n        if (this._playerAudio.isAudioContextFrozen()) {\n            await this._playerAudio.unfreezeAudioContext();\n        }\n\n        if (sound.playTimeOffset > 0) {\n            sound.playTime = sound.playTimeOffset;\n        }\n\n        // start playing\n        if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX) {\n            await this._playAudioBuffer(sound);\n        } else if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AUDIO) {\n            await this._playMediaElementAudio(sound);\n        }\n\n        // state is now playing\n        sound.state = PlayerSound.SOUND_STATE_PLAYING;\n\n        this._triggerSoundCallbacks(sound);\n\n    }\n\n    protected async _playAudioBuffer(sound: ISound): Promise<void> {\n\n        // AudioBufferSourceNode type guard\n        if (sound.sourceNode instanceof AudioBufferSourceNode) {\n\n            // on play, seek, pause, always reset the sound startTime (current context time)\n            sound.startTime = sound.sourceNode.context.currentTime;\n\n            // add the audio buffer to the source node\n            sound.sourceNode.buffer = sound.audioBuffer;\n\n            // start playback\n            // start(when, offset, duration)\n            try {\n                if (sound.state === PlayerSound.SOUND_STATE_SEEKING) {\n                    sound.sourceNode.start(0, sound.playTime);\n                } else if (sound.state === PlayerSound.SOUND_STATE_PAUSED && sound.playTimeOffset === 0) {\n                    sound.sourceNode.start(0, sound.playTime);\n                } else {\n                    if (sound.playTimeOffset > 0) {\n                        sound.elapsedPlayTime = sound.playTimeOffset;\n                        sound.sourceNode.start(0, sound.playTimeOffset);\n                    } else {\n                        sound.sourceNode.start();\n                    }\n                }\n            } catch (error) {\n                throw new Error(error);\n            }\n        }\n\n    }\n\n    protected async _playMediaElementAudio(sound: ISound): Promise<void> {\n\n        // MediaElementAudioSourceNode type guard\n        if (sound.sourceNode instanceof MediaElementAudioSourceNode) {\n\n            if (sound.state === PlayerSound.SOUND_STATE_SEEKING) {\n                sound.audioElement.currentTime = sound.playTime;\n            } else if (sound.state === PlayerSound.SOUND_STATE_PAUSED && sound.playTimeOffset === 0) {\n                sound.audioElement.currentTime = sound.playTime;\n            } else {\n                // if an offset is defined use to play from a defined position\n                if (sound.playTimeOffset > 0) {\n                    sound.audioElement.currentTime = sound.playTimeOffset;\n                } else {\n                    sound.audioElement.currentTime = 0;\n                }\n            }\n\n            await sound.audioElement.play();\n\n        }\n\n    }\n\n    protected _triggerSoundCallbacks(sound: ISound) {\n\n        // if there is an onResumed callback for the sound, trigger it\n        if (sound.onResumed !== null && !sound.firstTimePlayed) {\n            sound.onResumed(sound.playTime);\n        }\n\n        // if there is an onStarted callback for the sound, trigger it\n        if (sound.onStarted !== null && sound.firstTimePlayed) {\n            sound.firstTimePlayed = false;\n            sound.onStarted(sound.playTimeOffset);\n        }\n\n        // if there is an onPlaying callback for the sound, trigger it\n        if (sound.onPlaying !== null) {\n            // reset progress timestamp\n            this._playingProgressPreviousTimestamp = 0;\n            // on request animation frame callback set playing progress\n            // request animation frame callback has a argument, which\n            // is the timestamp when the callback gets called\n            this._progressTrigger(sound, 0);\n        } else {\n            this._playingProgressRequestId = null;\n        }\n\n        return;\n\n    }\n\n    protected _progressTrigger = (sound: ISound, timestamp: DOMHighResTimeStamp) => {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        // I had a lot of trouble cancelling the animation frame\n        // this is why I added this check\n        // often onended would get called by even though I do\n        // a cancel in _stop() the animation frame would still repeat\n        if (sound.id !== currentSound.id || currentSound.state !== PlayerSound.SOUND_STATE_PLAYING) {\n            return;\n        }\n\n        // throttle requests to not more than once every 200ms \n        if ((timestamp - this._playingProgressPreviousTimestamp) >= this._options.playingProgressIntervalTime) {\n\n            const currentTime = sound.getCurrentTime();\n            const duration = sound.getDuration();\n\n            if (!isNaN(currentTime) && !isNaN(duration)) {\n\n                let playingPercentage = 0;\n\n                if (currentTime !== 0) {\n                    const playingPercentageRaw = (currentTime / duration) * 100;\n                    playingPercentage = Math.round(playingPercentageRaw);\n                }\n\n                sound.playedTimePercentage = playingPercentage;\n                sound.playTime = currentTime;\n\n                // execute playing progress callback\n                sound.onPlaying(playingPercentage, duration, currentTime);\n\n                this._playingProgressPreviousTimestamp = timestamp;\n            }\n\n        }\n\n        // request animation frame loop\n        this._playingProgressRequestId = window.requestAnimationFrame((timestamp) => {\n            this._progressTrigger(sound, timestamp);\n        });\n\n    }\n\n    protected async _onEnded(): Promise<void> {\n\n        if (this._options.playNextOnEnded) {\n\n            const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n            if (currentSound !== null) {\n\n                // when we set the sound to paused...\n                // audio buffer will trigger onEnded because we actually stop the song\n                // audio element will not trigger onEnded as we pause the song\n                // this is why, for audio buffer (ajax) sounds we check if they have\n                // the playing state before triggering the next sound\n                // if stopped, seeking or pause we do nothing\n                if (\n                    this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AUDIO ||\n                    (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX && currentSound.state === PlayerSound.SOUND_STATE_PLAYING)\n                ) {\n\n                    const nextSound = this._getSoundFromQueue({ whichSound: PlayerCore.PLAY_SOUND_NEXT });\n\n                    let willPlayNext = false;\n\n                    // check if there is another sound in the queue\n                    if (nextSound !== null) {\n                        willPlayNext = true;\n                    }\n\n                    if (!willPlayNext) {\n                        await this._playerAudio.freezeAudioContext();\n                    }\n\n                    if (currentSound.onEnded !== null) {\n                        currentSound.onEnded(willPlayNext);\n                    }\n\n                    try {\n                        await this.next();\n                    } catch (error) {\n                        console.error(error)\n                    }\n\n                }\n\n                if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX && currentSound.state === PlayerSound.SOUND_STATE_SEEKING) {\n                    try {\n                        // audio buffer source nodes get destroyed on stop\n                        // this is why in ajax mode we need to do a fresh start when seeking\n                        await this.play(currentSound);\n                    } catch (error) {\n                        console.error(error)\n                    }\n                }\n\n            }\n\n        }\n\n    }\n\n    protected _getSoundFromQueue({ whichSound, updateIndex = false }: IGetSoundFromQueue = {}): ISound {\n\n        let sound = null;\n        let soundIndex: number = null;\n\n        // check if the queue is empty\n        if (this._queue.length === 0) {\n            return sound;\n        }\n\n        // if which sound to play did not get specified\n        // we set it to the current sound by default\n        if (typeof whichSound === 'undefined') {\n            whichSound = PlayerCore.CURRENT_SOUND;\n        }\n\n        // if which sound to play is a constant\n        switch (whichSound) {\n            case PlayerCore.CURRENT_SOUND:\n                soundIndex = this._currentIndex\n                sound = this._queue[soundIndex];\n                break;\n            case PlayerCore.PLAY_SOUND_NEXT:\n                if (this._queue[this._currentIndex + 1] !== undefined) {\n                    soundIndex = this._currentIndex + 1;\n                    sound = this._queue[soundIndex];\n                } else if (this._options.loopQueue) {\n                    // if last sound is playing and loop is enabled\n                    // on next we jump to first sound\n                    soundIndex = 0;\n                    sound = this._queue[soundIndex];\n                }\n                break;\n            case PlayerCore.PLAY_SOUND_PREVIOUS:\n                if (this._queue[this._currentIndex - 1] !== undefined) {\n                    soundIndex = this._currentIndex - 1;\n                    sound = this._queue[soundIndex];\n                } else if (this._options.loopQueue) {\n                    // if first sound is playing and loop is enabled\n                    // on previous we jump to last sound\n                    soundIndex = this._queue.length - 1;\n                    sound = this._queue[soundIndex];\n                }\n                break;\n            case PlayerCore.PLAY_SOUND_FIRST:\n                if (this._queue.length > 0) {\n                    soundIndex = 0;\n                    sound = this._queue[soundIndex];\n                }\n                break;\n            case PlayerCore.PLAY_SOUND_LAST:\n                if (this._queue.length > 0) {\n                    soundIndex = this._queue.length - 1;\n                    sound = this._queue[soundIndex];\n                }\n                break;\n            default:\n                // if \"which sound to play\" (soundId) is a string or number\n                [sound, soundIndex] = this._findSoundById({ soundId: whichSound });\n        }\n\n        if (soundIndex !== null && updateIndex) {\n            this._currentIndex = soundIndex;\n        }\n\n        return sound;\n\n    }\n\n    protected _findSoundById({ soundId }: IFindSoundById): [ISound, number] {\n\n        let sound: ISound = null;\n        let soundIndex = 0;\n\n        this._queue.some((soundFromQueue, index) => {\n\n            if (soundFromQueue.id === soundId) {\n                sound = soundFromQueue;\n                soundIndex = index;\n                return true;\n            }\n\n        });\n\n        return [sound, soundIndex];\n\n    }\n\n    protected _findBestSource(soundSource: (ISoundSource)[] | ISoundSource): IFindBestSourceResponse {\n\n        const bestSource: IBestSource = {\n            url: null,\n            codec: null\n        };\n\n        let sources: (ISoundSource)[];\n\n        // if the source is not an array but a single source object\n        // we first transform it into an array\n        if (!Array.isArray(soundSource)) {\n            sources = [soundSource];\n        } else {\n            sources = soundSource;\n        }\n\n        let i = 0;\n\n        while (i < sources.length) {\n\n            const source = sources[i]\n            let soundUrl = '';\n\n            // if the player had as option a baseUrl for sounds add it now\n            if (this._options.soundsBaseUrl !== '') {\n                soundUrl = this._options.soundsBaseUrl;\n            }\n\n            soundUrl += source.url;\n\n            // check if the codec (if any got specified) is supported\n            // by the device\n            let isCodecSupported = true;\n\n            if (source.codec !== null) {\n                isCodecSupported = this._checkCodecSupport(source.codec);\n            }\n\n            // only if the codec of the source is supported\n            if (isCodecSupported) {\n\n                if (source.isPreferred) {\n                    // if multiple sources but this one if preferred and if previous\n                    // sources also had a supported codec we still overwrite the\n                    // previous match\n                    bestSource.url = soundUrl;\n                    bestSource.codec = source.codec;\n                    // so the source is preferred and supported so we can exit early\n                    break;\n                } else {\n                    // if no best source has been found so far, we don't\n                    // care if it's preferred it's automatically chosen\n                    // as best\n                    bestSource.url = soundUrl;\n                    bestSource.codec = source.codec;\n                    // source is supported, but maybe there is preferred & supported\n                    // so we don't exit the loop just yet\n                }\n\n            }\n\n            i++;\n\n        }\n\n        return bestSource;\n\n    }\n\n    protected _checkCodecSupport(codec: string): boolean {\n\n        let mediaMimeTypes: string[];\n        let error = '';\n\n        switch (codec) {\n            case 'ogg':\n                mediaMimeTypes = ['audio/ogg; codecs=\"vorbis\"'];\n                break;\n            case 'oga':\n                mediaMimeTypes = ['audio/ogg; codecs=\"vorbis\"'];\n                break;\n            case 'mp3':\n                mediaMimeTypes = ['audio/mpeg; codecs=\"mp3\"'];\n                break;\n            case 'opus':\n                mediaMimeTypes = ['audio/ogg; codecs=\"opus\"', 'audio/webm; codecs=\"opus\"'];\n                break;\n            case 'wav':\n                mediaMimeTypes = ['audio/wav; codecs=\"1\"'];\n                break;\n            case 'm4a':\n                mediaMimeTypes = ['audio/m4a;', 'audio/x-m4a;'];\n                break;\n            case 'm4p':\n                mediaMimeTypes = ['audio/m4p;', 'audio/x-m4p;'];\n                break;\n            case 'caf':\n                mediaMimeTypes = ['audio/x-caf;'];\n                break;\n            case 'aac':\n                mediaMimeTypes = ['audio/aac;'];\n                break;\n            case 'weba':\n            case 'webm':\n                mediaMimeTypes = ['audio/webm; codecs=\"vorbis\"'];\n                break;\n            case 'flac':\n                mediaMimeTypes = ['audio/flac;', 'audio/x-flac;'];\n                break;\n            default:\n                error = 'unrecognised codec';\n                break;\n        }\n\n        if (error) {\n            throw new Error(error);\n        }\n\n        return this._checkMimeTypesSupport(mediaMimeTypes);\n\n    }\n\n    protected _checkMimeTypesSupport(mediaMimeTypes: string[]): boolean {\n\n        const deviceAudio = new Audio();\n\n        let isSupported = false;\n\n        mediaMimeTypes.forEach((mediaMimeType) => {\n\n            const isMediaTypeSupported: string = deviceAudio.canPlayType(mediaMimeType).replace(/^no$/, '');\n\n            if (isMediaTypeSupported) {\n                isSupported = true;\n            }\n\n        });\n\n        return isSupported;\n\n    }\n\n    public async pause(): Promise<ISound> {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        if (currentSound === null) {\n            return;\n        }\n\n        if (currentSound.state === PlayerSound.SOUND_STATE_PAUSED) {\n            return;\n        }\n\n        const currentTime = currentSound.getCurrentTime();\n\n        currentSound.playTime = currentTime;\n\n        if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX) {\n            currentSound.elapsedPlayTime = currentTime;\n        }\n\n        // trigger onpaused callback\n        if (currentSound.onPaused !== null) {\n            currentSound.onPaused(currentSound.playTime);\n        }\n\n        await this._stop(currentSound, PlayerSound.SOUND_STATE_PAUSED);\n\n        return currentSound;\n\n    }\n\n    public async stop(): Promise<ISound> {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        if (currentSound === null) {\n            return;\n        }\n\n        // check if sound is already stopped\n        if (currentSound.state === PlayerSound.SOUND_STATE_STOPPED) {\n            return;\n        }\n\n        // freeze the audio context\n        await this._playerAudio.freezeAudioContext();\n\n        // trigger stopped callback\n        if (currentSound.onStopped !== null) {\n            currentSound.onStopped(currentSound.playTime);\n        }\n\n        await this._stop(currentSound, PlayerSound.SOUND_STATE_STOPPED);\n\n        return currentSound;\n\n    }\n\n    protected async _stop(sound: ISound, soundState: typeSoundStates): Promise<void> {\n\n        if (this._playingProgressRequestId !== null) {\n            cancelAnimationFrame(this._playingProgressRequestId);\n            this._playingProgressRequestId = null;\n        }\n\n        sound.state = soundState;\n\n        if (sound.sourceNode !== null) {\n\n            if (sound.sourceNode instanceof AudioBufferSourceNode) {\n                // if using the AudioBufferSourceNode use the stop method\n                sound.sourceNode.stop(0);\n                // the audio buffer can be reused for multiple plays\n                // however the audio buffer source can not\n                await this._playerAudio.disconnectSound(sound);\n            }\n\n            if (sound.sourceNode instanceof MediaElementAudioSourceNode) {\n                // if using the MediaElementAudioSourceNode use the pause method\n                sound.audioElement.pause();\n            }\n\n        }\n\n        // if it is fully stopped, not just paused\n        if (soundState === PlayerSound.SOUND_STATE_STOPPED) {\n            // reset sound values\n            sound.isReadyToPLay = false;\n            sound.firstTimePlayed = true;\n            sound.startTime = 0;\n            sound.elapsedPlayTime = 0;\n            sound.playTime = 0;\n            sound.playedTimePercentage = 0;\n            // disconnect the sound\n            await this._playerAudio.disconnectSound(sound);\n        }\n\n    }\n\n    public async next(): Promise<ISound> {\n\n        // alias for play next\n        return await this.play({ whichSound: PlayerCore.PLAY_SOUND_NEXT });\n\n    }\n\n    public async previous(): Promise<ISound> {\n\n        // alias for play previous\n        return await this.play({ whichSound: PlayerCore.PLAY_SOUND_PREVIOUS });\n\n    }\n\n    public async first(): Promise<ISound> {\n\n        // alias for play first\n        return await this.play({ whichSound: PlayerCore.PLAY_SOUND_FIRST });\n\n    }\n\n    public async last(): Promise<ISound> {\n\n        // alias for play last\n        return await this.play({ whichSound: PlayerCore.PLAY_SOUND_LAST });\n\n    }\n\n    public setVisibilityAutoMute(visibilityAutoMute: boolean): void {\n\n        this._options.visibilityAutoMute = visibilityAutoMute;\n\n        if (visibilityAutoMute) {\n            document.addEventListener('visibilitychange', this._handleVisibilityChange.bind(this), false);\n        } else {\n            document.removeEventListener('visibilitychange', this._handleVisibilityChange.bind(this), false);\n        }\n\n    }\n\n    public getVisibilityAutoMute(): boolean {\n        return this._options.visibilityAutoMute;\n    }\n\n    protected _handleVisibilityChange(): void {\n\n        let hiddenKeyword: string;\n\n        if (typeof document.hidden !== 'undefined') { // Opera 12.10 and Firefox 18 and later support\n            hiddenKeyword = 'hidden';\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } else if (typeof (document as any).msHidden !== 'undefined') {\n            hiddenKeyword = 'msHidden';\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } else if (typeof (document as any).webkitHidden !== 'undefined') {\n            hiddenKeyword = 'webkitHidden';\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if ((document as any)[hiddenKeyword]) {\n            this.mute();\n        } else {\n            this.unMute();\n        }\n    }\n\n    public async disconnect(): Promise<void> {\n\n        // adding another check here to cancel animation frame because:\n        // a player can be disconnect while song is paused or playing\n        // which means the cancelAnimationFrame in _stop would never get triggered\n        if (this._playingProgressRequestId !== null) {\n            cancelAnimationFrame(this._playingProgressRequestId);\n            this._playingProgressRequestId = null;\n        }\n\n        await this._playerAudio.shutDown(this._queue);\n\n    }\n\n    public async getAudioContext(): Promise<AudioContext> {\n\n        const audioContext = await this._playerAudio.getAudioContext();\n\n        return audioContext;\n\n    }\n\n}\n"],"names":["PlayerSound","constructor","soundAttributes","this","url","codec","loop","sourceNode","gainNode","isReadyToPLay","isBuffered","isBuffering","audioElement","audioBuffer","arrayBuffer","audioBufferDate","playTimeOffset","startTime","elapsedPlayTime","playTime","playedTimePercentage","state","loadingProgress","duration","firstTimePlayed","isConnectToPlayerGain","Array","isArray","source","id","_generateSoundId","onLoading","onPlaying","onStarted","onEnded","onStopped","onPaused","onResumed","onSeeking","ArrayBuffer","AudioBuffer","Date","getDuration","getCurrentTime","currentTime","AudioBufferSourceNode","context","MediaElementAudioSourceNode","Math","round","Number","EPSILON","now","toString","random","substring","SOUND_STATE_STOPPED","SOUND_STATE_PAUSED","SOUND_STATE_PLAYING","SOUND_STATE_SEEKING","PlayerAudio","options","_audioContext","_volume","_audioNodes","_audioElement","_mediaElementAudioSourceNode","_isAudioUnlocked","_options","_initialize","createAudioContextOnFirstUserInteraction","_addFirstUserInteractionEventListeners","getAudioNodes","decodeAudio","audioContext","getAudioContext","decodeAudioData","_createAudioContext","AudioContext","WebAudioContext","window","webkitAudioContext","document","addEventListener","_unlockAudio","bind","_removeFirstUserInteractionEventListeners","removeEventListener","placeholderBuffer","createBuffer","bufferSource","createBufferSource","onended","disconnect","buffer","connect","destination","start","loadPlayerMode","_createAudioElement","_createMediaElementAudioSourceNode","Audio","controls","autoplay","preload","volume","addAudioElementsToDom","body","appendChild","getAudioElement","unfreezeAudioContext","resume","Promise","resolve","freezeAudioContext","suspend","isAudioContextFrozen","detectAudioContextSupport","audioContextSupported","detectAudioElementSupport","createElement","canPlayType","_createAudioBufferSourceNode","createMediaElementSource","_destroyMediaElementAudioSourceNode","mediaElement","remove","_destroyAudioBufferSourceNode","_destroyAudioContext","close","shutDown","songsQueue","forEach","sound","disconnectSound","_disconnectPlayerGainNode","_getPlayerGainNode","GainNode","createGain","_initializeVolume","connectSound","onEndedCallback","audioBufferSourceNode","gain","value","playerGainNode","_changePlayerGainValue","gainValue","setTargetAtTime","setVolume","forceUpdateUserVolume","persistVolume","localStorage","setItem","newGainValue","getVolume","userVolumeInPercent","parseInt","getItem","isNaN","PlayerRequest","getArrayBuffer","requested","reject","xhr","XMLHttpRequest","open","responseType","onload","status","response","Error","statusText","onprogress","event","percentage","total","loaded","percentageRounded","onerror","error","send","PlayerCore","playerOptions","_playingProgressRequestId","_postMuteVolume","_progressTrigger","timestamp","currentSound","_getSoundFromQueue","whichSound","CURRENT_SOUND","_playingProgressPreviousTimestamp","playingProgressIntervalTime","playingPercentage","playingPercentageRaw","requestAnimationFrame","defaultOptions","loopQueue","loopSong","soundsBaseUrl","playNextOnEnded","stopOnReset","visibilityAutoMute","Object","assign","_queue","_currentIndex","audioOptions","_audioOptions","_playerAudio","PLAYER_MODE_AUDIO","PLAYER_MODE_AJAX","addSoundToQueue","whereInQueue","WHERE_IN_QUEUE_AT_END","_appendSoundToQueue","WHERE_IN_QUEUE_AT_START","_prependSoundToQueue","push","unshift","resetQueue","stop","reset","catch","getQueue","setLoopQueue","loppQueue","getLoopQueue","mute","currentVolume","unMute","isMuted","setPosition","soundPositionInPercent","_loadSound","soundPositionInSeconds","setPositionInSeconds","seekingPercentageRaw","seekingPercentage","_stop","_play","_loadSoundUsingAudioElement","_loadSoundUsingRequest","PLAYER_MODE_FETCH","_findBestSource","canPlayThroughHandler","__awaiter","buffered","length","end","crossOrigin","src","load","_decodeSound","request","arrayBufferCopy","slice","play","updateIndex","_onEnded","_playAudioBuffer","_playMediaElementAudio","_triggerSoundCallbacks","willPlayNext","PLAY_SOUND_NEXT","next","soundIndex","undefined","PLAY_SOUND_PREVIOUS","PLAY_SOUND_FIRST","PLAY_SOUND_LAST","_findSoundById","soundId","some","soundFromQueue","index","soundSource","bestSource","sources","i","soundUrl","isCodecSupported","_checkCodecSupport","isPreferred","mediaMimeTypes","_checkMimeTypesSupport","deviceAudio","isSupported","mediaMimeType","replace","pause","soundState","cancelAnimationFrame","previous","first","last","setVisibilityAutoMute","_handleVisibilityChange","getVisibilityAutoMute","hiddenKeyword","hidden","msHidden","webkitHidden"],"mappings":"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"}