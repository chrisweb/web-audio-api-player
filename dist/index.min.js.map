{"version":3,"file":"index.min.js","sources":["../src/library/sound.ts","../src/library/audio.ts","../src/library/request.ts","../src/library/core.ts"],"sourcesContent":["const SOUND_STATE_STOPPED = 'sound_state_stopped';\nconst SOUND_STATE_PAUSED = 'sound_state_paused';\nconst SOUND_STATE_PLAYING = 'sound_state_playing';\nconst SOUND_STATE_SEEKING = 'sound_state_seeking';\n\nexport type typeSoundStates = typeof SOUND_STATE_STOPPED | typeof SOUND_STATE_PAUSED | typeof SOUND_STATE_PLAYING | typeof SOUND_STATE_SEEKING;\n\nexport interface IOnProgress {\n    (playingPercentage: number, duration: number, playTime: number): void;\n}\n\nexport interface IOnEnded {\n    (willPlayNext: boolean): void;\n}\n\nexport interface IOnStarted {\n    (playTimeOffset: number): void;\n}\n\nexport interface IOnPaused {\n    (playTime: number): void;\n}\n\nexport interface IOnResumed {\n    (playTime: number): void;\n}\n\nexport interface IOnStopped {\n    (playTime: number): void;\n}\n\nexport interface IOnSeeking {\n    (seekingPercentage: number, duration: number, playTime: number): void;\n}\n\nexport interface ISoundSource {\n    url: string;\n    codec?: string;\n    isPreferred?: boolean;\n}\n\nexport interface ISoundAttributes {\n    // source(s) are NOT mandatory as user can provide an arrayBuffer\n    // and / or audioBuffer in which case the source url is not needed\n    source?: (ISoundSource)[] | ISoundSource;\n    id?: number | string;\n    loop?: boolean;\n    audioBuffer?: AudioBuffer;\n    arrayBuffer?: ArrayBuffer;\n    duration?: number;\n\n    // events\n    onLoading?: IOnProgress;\n    onPlaying?: IOnProgress;\n    onEnded?: IOnEnded;\n    onStarted?: IOnStarted;\n    onStopped?: IOnStopped;\n    onPaused?: IOnPaused;\n    onResumed?: IOnResumed;\n    onSeeking?: IOnSeeking;\n}\n\nexport interface ISound extends ISoundAttributes, ISoundSource {\n    sourceNode: AudioBufferSourceNode | MediaElementAudioSourceNode;\n    gainNode: GainNode;\n    isReadyToPLay: boolean;\n    isBuffered: boolean;\n    isBuffering: boolean;\n    audioElement: HTMLAudioElement;\n    audioBufferDate: Date;\n    playTimeOffset: number;\n    startTime: number;\n    playTime: number;\n    elapsedPlayTime: number;\n    playedTimePercentage: number;\n    state: typeSoundStates;\n    loadingProgress: number;\n    firstTimePlayed: boolean;\n    isConnectToPlayerGain: boolean;\n    durationSetManually: boolean;\n    getCurrentTime(): number;\n    getDuration(): number;\n    setDuration(duration: number): void;\n    setLoop(loop: boolean): void;\n    getLoop(): boolean;\n}\n\nexport class PlayerSound implements ISound {\n\n    // static constants\n    static readonly SOUND_STATE_STOPPED = 'sound_state_stopped';\n    static readonly SOUND_STATE_PAUSED = 'sound_state_paused';\n    static readonly SOUND_STATE_PLAYING = 'sound_state_playing';\n    static readonly SOUND_STATE_SEEKING = 'sound_state_seeking';\n\n    // properties\n    public source: (ISoundSource)[] | ISoundSource;\n    public url: string = null;\n    public codec: string = null;\n    public id: number | string;\n    public loop: boolean = false;\n    public sourceNode: AudioBufferSourceNode | MediaElementAudioSourceNode = null;\n    public gainNode: GainNode = null;\n    public isReadyToPLay = false;\n    public isBuffered = false;\n    public isBuffering = false;\n    public audioElement: HTMLAudioElement = null;\n    public audioBuffer: AudioBuffer = null;\n    public arrayBuffer: ArrayBuffer = null;\n    public audioBufferDate: Date = null;\n    public playTimeOffset = 0;\n    public startTime = 0;\n    // elapsedPlayTime is used to adjust the playtime\n    // when playing audio buffers\n    // on seek, pause or when there is a playTimeOffset\n    // see getCurrentTime function\n    public elapsedPlayTime = 0;\n    public playTime = 0;\n    public playedTimePercentage = 0;\n    public state: typeSoundStates = SOUND_STATE_STOPPED;\n    public loadingProgress = 0;\n    public duration: number = null;\n    public durationSetManually: boolean = false;\n    public firstTimePlayed = true;\n    public isConnectToPlayerGain = false;\n\n    // callbacks\n    public onLoading: IOnProgress;\n    public onPlaying: IOnProgress;\n    public onEnded: IOnEnded;\n    public onStarted: IOnStarted;\n    public onStopped: IOnStopped;\n    public onPaused: IOnPaused;\n    public onResumed: IOnResumed;\n    public onSeeking?: IOnSeeking;\n\n    constructor(soundAttributes: ISoundAttributes) {\n\n        if (!Array.isArray(soundAttributes.source)) {\n            this.source = [soundAttributes.source];\n        } else {\n            this.source = soundAttributes.source;\n        }\n\n        if (typeof soundAttributes.id !== 'undefined') {\n            this.id = soundAttributes.id;\n        } else {\n            this.id = this._generateSoundId()\n        }\n\n        this.loop = soundAttributes.loop || false;\n\n        // the user can set the duration manually\n        // this is usefull if we need to convert the position percentage into seconds but don't want to preload the song\n        // to get the duration the song has to get preloaded as the duration is a property of the audioBuffer\n        if (!isNaN(soundAttributes.duration)) {\n            this.duration = soundAttributes.duration;\n            this.durationSetManually = true;\n        }\n\n        if (typeof soundAttributes.onLoading === 'function') {\n            this.onLoading = soundAttributes.onLoading;\n        } else {\n            this.onLoading = null;\n        }\n\n        if (typeof soundAttributes.onPlaying === 'function') {\n            this.onPlaying = soundAttributes.onPlaying;\n        } else {\n            this.onPlaying = null;\n        }\n\n        if (typeof soundAttributes.onStarted === 'function') {\n            this.onStarted = soundAttributes.onStarted;\n        } else {\n            this.onStarted = null;\n        }\n\n        if (typeof soundAttributes.onEnded === 'function') {\n            this.onEnded = soundAttributes.onEnded;\n        } else {\n            this.onEnded = null;\n        }\n\n        if (typeof soundAttributes.onStopped === 'function') {\n            this.onStopped = soundAttributes.onStopped;\n        } else {\n            this.onStopped = null;\n        }\n\n        if (typeof soundAttributes.onPaused === 'function') {\n            this.onPaused = soundAttributes.onPaused;\n        } else {\n            this.onPaused = null;\n        }\n\n        if (typeof soundAttributes.onResumed === 'function') {\n            this.onResumed = soundAttributes.onResumed;\n        } else {\n            this.onResumed = null;\n        }\n\n        if (typeof soundAttributes.onSeeking === 'function') {\n            this.onSeeking = soundAttributes.onSeeking;\n        } else {\n            this.onSeeking = null;\n        }\n\n        if (soundAttributes.arrayBuffer instanceof ArrayBuffer) {\n            this.arrayBuffer = soundAttributes.arrayBuffer;\n        }\n\n        if (soundAttributes.audioBuffer instanceof AudioBuffer) {\n            this.audioBuffer = soundAttributes.audioBuffer;\n            this.isBuffering = false;\n            this.isBuffered = true;\n            this.audioBufferDate = new Date();\n            // only update duration if it did not get set manually\n            if (!this.durationSetManually) {\n                this.duration = this.audioBuffer.duration;\n            }\n        }\n\n    }\n\n    public getCurrentTime(): number {\n\n        let currentTime: number;\n\n        if (this.sourceNode !== null) {\n            if (this.sourceNode instanceof AudioBufferSourceNode) {\n                currentTime = (this.sourceNode.context.currentTime - this.startTime) + this.elapsedPlayTime;\n            } else if (this.sourceNode instanceof MediaElementAudioSourceNode) {\n                currentTime = this.audioElement.currentTime;\n            }\n        }\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n        const currentTimeRounded = Math.round((currentTime + Number.EPSILON) * 100) / 100;\n\n        return currentTimeRounded;\n\n    }\n\n    public getDuration(): number {\n\n        let duration: number;\n\n        if (this.sourceNode !== null) {\n            if (this.sourceNode instanceof AudioBufferSourceNode) {\n                duration = this.audioBuffer.duration;\n            } else if (this.sourceNode instanceof MediaElementAudioSourceNode) {\n                duration = this.audioElement.duration;\n            }\n        }\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n        const durationRounded = Math.round((duration + Number.EPSILON) * 100) / 100;\n\n        return durationRounded;\n\n    }\n\n    public setDuration(duration: number): void {\n\n        if (!isNaN(duration)) {\n            this.duration = duration;\n            this.durationSetManually = true;\n        }\n\n    }\n\n    public setLoop(loop: boolean): void {\n\n        this.loop = loop;\n\n        if (this.state === PlayerSound.SOUND_STATE_PLAYING) {\n\n            if (this.sourceNode !== null) {\n                if (this.sourceNode instanceof AudioBufferSourceNode) {\n                    this.sourceNode.loop = loop;\n                } else if (this.sourceNode instanceof MediaElementAudioSourceNode) {\n                    this.sourceNode.mediaElement.loop = loop;\n                }\n            }\n\n        }\n\n    }\n\n    public getLoop(): boolean {\n\n        return this.loop;\n\n    }\n\n    protected _generateSoundId() {\n\n        return Date.now().toString(36) + Math.random().toString(36).substring(2)\n\n    }\n\n}\n","import { ISound } from './sound';\n\ntype OnEndedCallbackType = (event: Event) => void\n\nexport interface IAudioOptions {\n    audioContext: AudioContext;\n    unlockAudioOnFirstUserInteraction: boolean;\n    volume: number;\n    persistVolume: boolean;\n    loadPlayerMode: string;\n    addAudioElementsToDom: boolean;\n    volumeTransitionTime: number;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/AudioNode\nexport interface IAudioNodes {\n    // https://developer.mozilla.org/en-US/docs/Web/API/GainNode\n    gainNode: GainNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\n    pannerNode?: PannerNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode\n    stereoPannerNode?: StereoPannerNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/DelayNode\n    delayNode?: DelayNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode\n    scriptProcessorNode?: ScriptProcessorNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode\n    analyserNode?: AnalyserNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\n    biquadFilterNode?: BiquadFilterNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode\n    channelMergeNode?: ChannelMergerNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode\n    channelSplitterNode?: ChannelSplitterNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode\n    convolverNode?: ConvolverNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode\n    dynamicCompressorNode?: DynamicsCompressorNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode\n    oscillatorNode?: OscillatorNode;\n    // https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode\n    waveShaperNode?: WaveShaperNode;\n}\n\nexport class PlayerAudio {\n\n    protected _options;\n    protected _audioContext: AudioContext = null;\n    protected _volume: number = null;\n    protected _audioNodes: IAudioNodes = {\n        gainNode: null,\n    };\n    protected _audioElement: HTMLAudioElement = null;\n    protected _mediaElementAudioSourceNode: MediaElementAudioSourceNode = null;\n    protected _isAudioUnlocked: boolean = false;\n    protected _isAudioUnlocking: boolean = false;\n\n    constructor(options: IAudioOptions) {\n\n        this._options = options;\n\n        this._initialize();\n\n    }\n\n    protected _initialize(): void {\n\n        // I was planning on using the \"first user interaction hack\" only (on mobile)\n        // to check if the autoplay policy prevents me from playing a sound\n        // programmatically (without user click)\n        // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getAutoplayPolicy\n        // but this feature is only implemented on firefox (as of 19.09.2023)\n\n        if (this._options.unlockAudioOnFirstUserInteraction) {\n            this._addFirstUserInteractionEventListeners();\n        }\n\n    }\n\n    public getAudioNodes() {\n        return this._audioNodes;\n    }\n\n    public async decodeAudio(arrayBuffer: ArrayBuffer): Promise<AudioBuffer> {\n\n        const audioContext = await this.getAudioContext();\n\n        // Note to self:\n        // the new decodeAudioData returns a promise, older versions accept as second\n        // and third parameter, which are a success and an error callback funtion\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData\n\n        return await audioContext.decodeAudioData(arrayBuffer);\n\n    }\n\n    protected _createAudioContext(): Promise<void> {\n\n        if (this._audioContext instanceof AudioContext) {\n            return;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const WebAudioContext: typeof AudioContext = window.AudioContext || (window as any).webkitAudioContext;\n\n        // initialize the audio context\n        if (this._options.audioContext !== null) {\n            this._audioContext = this._options.audioContext;\n        } else {\n            this._audioContext = new WebAudioContext();\n        }\n\n    }\n\n    protected _addFirstUserInteractionEventListeners(): void {\n\n        if (this._options.unlockAudioOnFirstUserInteraction) {\n            document.addEventListener('keydown', this.unlockAudio.bind(this));\n            document.addEventListener('mousedown', this.unlockAudio.bind(this));\n            document.addEventListener('pointerdown', this.unlockAudio.bind(this));\n            document.addEventListener('pointerup', this.unlockAudio.bind(this));\n            document.addEventListener('touchend', this.unlockAudio.bind(this));\n        }\n\n    }\n\n    protected _removeFirstUserInteractionEventListeners(): void {\n\n        if (this._options.unlockAudioOnFirstUserInteraction) {\n            document.removeEventListener('keydown', this.unlockAudio.bind(this));\n            document.removeEventListener('mousedown', this.unlockAudio.bind(this));\n            document.removeEventListener('pointerdown', this.unlockAudio.bind(this));\n            document.removeEventListener('pointerup', this.unlockAudio.bind(this));\n            document.removeEventListener('touchend', this.unlockAudio.bind(this));\n        }\n\n    }\n\n    public unlockAudio(): Promise<void> {\n\n        return new Promise((resolve, reject) => {\n\n            if (this._isAudioUnlocking) {\n                return resolve();\n            }\n\n            if (this._isAudioUnlocked) {\n                return resolve();\n            }\n\n            this._isAudioUnlocking = true;\n\n            // it is important to create the audio element before attempting\n            // to play the empty buffer, if creation is done after the\n            // element will get created but as no sound has been played\n            // it will not get unlocked\n            // meaning to unlock an audio element it is not enough to create\n            // one on user interaction but you also need to play a sound\n            if (this._options.loadPlayerMode === 'player_mode_audio') {\n\n                // force the creation to be sure we have a new audio element\n                // and don't use one that got created previously\n                const forceCreate = true;\n\n                // on iOS (mobile) the audio element you want to use needs to have been created\n                // as a direct result of an user interaction\n                // after it got unlocked we re-use that element for all sounds\n                this._createAudioElement(forceCreate).catch((error) => {\n                    console.error(error);\n                    this._isAudioUnlocking = false;\n                    return reject();\n                });\n\n            }\n\n            // make sure the audio context is not suspended\n            // on android this is what unlocks audio\n            this.getAudioContext().then(() => {\n\n                // create an (empty) buffer\n                const placeholderBuffer = this._audioContext.createBuffer(1, 1, 22050);\n\n                // https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBufferSource\n                let bufferSource = this._audioContext.createBufferSource();\n\n                bufferSource.onended = () => {\n\n                    bufferSource.disconnect(0);\n\n                    this._removeFirstUserInteractionEventListeners();\n\n                    bufferSource.disconnect(0);\n\n                    bufferSource.buffer = null;\n                    bufferSource = null;\n\n                    this._isAudioUnlocked = true;\n                    this._isAudioUnlocking = false;\n                    return resolve();\n\n                };\n\n                bufferSource.buffer = placeholderBuffer;\n                bufferSource.connect(this._audioContext.destination);\n                // attempt to play the empty buffer to check if there is an error\n                // or if it can be played, in which case audio is unlocked\n                bufferSource.start(0);\n\n            }).catch((error) => {\n                console.error(error);\n                this._isAudioUnlocking = false;\n                return reject();\n            });\n\n        });\n\n    }\n\n    protected async _createAudioElementAndSource(): Promise<void> {\n\n        await this._createAudioElement();\n\n        await this._createMediaElementAudioSourceNode();\n\n    }\n\n    protected async _createAudioElement(forceCreate?: boolean): Promise<void> {\n\n        if (this._audioElement === null || forceCreate === true) {\n\n            const audioElement = new Audio();\n\n            audioElement.controls = false;\n            audioElement.autoplay = false;\n            audioElement.preload = 'metadata';\n            audioElement.volume = 1;\n            audioElement.id = 'web-audio-api-player';\n\n            this._audioElement = audioElement;\n\n            if (this._options.addAudioElementsToDom) {\n                document.body.appendChild(audioElement);\n            }\n\n        }\n\n    }\n\n    public async getAudioElement(): Promise<HTMLAudioElement> {\n\n        if (this._audioElement === null) {\n            await this._createAudioElementAndSource();\n        }\n\n        return this._audioElement;\n\n    }\n\n    public async getAudioContext(): Promise<AudioContext> {\n\n        if (this._audioContext === null || this._audioContext.state === 'closed') {\n            await this._createAudioContext();\n        } else if (this._audioContext.state === 'suspended') {\n            await this.unfreezeAudioContext();\n        }\n\n        return this._audioContext;\n\n    }\n\n    public unfreezeAudioContext(): Promise<void> {\n\n        // did resume get implemented\n        if (typeof this._audioContext.resume === 'undefined') {\n\n            // this browser does not support resume\n            // just send back a promise as resume would do\n            return Promise.resolve();\n\n        } else {\n\n            // resume the audio hardware access\n            // audio context resume returns a promise\n            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume\n            return this._audioContext.resume();\n\n        }\n\n    }\n\n    public freezeAudioContext(): Promise<void> {\n\n        // did suspend get implemented\n        if (typeof this._audioContext.suspend === 'undefined') {\n\n            return Promise.resolve();\n\n        } else {\n\n            // halt the audio hardware access temporarily to reduce CPU and battery usage\n            // especially useful on mobile to prevent battery drain\n            return this._audioContext.suspend();\n\n        }\n\n    }\n\n    public isAudioContextFrozen(): boolean {\n\n        return this._audioContext.state === 'suspended' ? true : false;\n\n    }\n\n    public detectAudioContextSupport(): boolean {\n\n        // basic audio context detection\n        let audioContextSupported = false;\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (typeof (window as any).webkitAudioContext !== 'undefined') {\n            audioContextSupported = true;\n        } else if (typeof AudioContext !== 'undefined') {\n            audioContextSupported = true;\n        }\n\n        return audioContextSupported;\n\n    }\n\n    public detectAudioElementSupport(): boolean {\n\n        // basic audio element detection\n        return !!document.createElement('audio').canPlayType;\n\n    }\n\n    protected async _createAudioBufferSourceNode(): Promise<AudioBufferSourceNode> {\n\n        const audioContext = await this.getAudioContext();\n\n        return audioContext.createBufferSource();\n\n    }\n\n    protected async _createMediaElementAudioSourceNode(): Promise<void> {\n\n        if (this._mediaElementAudioSourceNode === null && this._audioElement !== null) {\n\n            const audioContext = await this.getAudioContext();\n\n            // createMediaElementSource: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaElementSource\n            this._mediaElementAudioSourceNode = audioContext.createMediaElementSource(this._audioElement);\n\n        }\n\n    }\n\n    protected _destroyMediaElementAudioSourceNode(): void {\n\n        if (this._mediaElementAudioSourceNode !== null) {\n\n            if (typeof this._mediaElementAudioSourceNode.mediaElement !== 'undefined') {\n                this._mediaElementAudioSourceNode.mediaElement.remove();\n            }\n\n            this._mediaElementAudioSourceNode.disconnect();\n            this._mediaElementAudioSourceNode = null;\n        }\n\n    }\n\n    protected _destroyAudioBufferSourceNode(): void {\n\n        if (this._mediaElementAudioSourceNode !== null) {\n\n            this._mediaElementAudioSourceNode.disconnect();\n\n        }\n\n    }\n\n    protected async _destroyAudioContext(): Promise<void> {\n\n        if (this._audioContext !== null && this._audioContext.state !== 'closed') {\n            await this._audioContext.close();\n            this._audioContext = null;\n        }\n\n    }\n\n    public async shutDown(songsQueue: ISound[]): Promise<void> {\n\n        this._removeFirstUserInteractionEventListeners();\n\n        songsQueue.forEach((sound) => {\n            this.disconnectSound(sound);\n        });\n\n        this._destroyMediaElementAudioSourceNode();\n        this._destroyAudioBufferSourceNode();\n\n        this._disconnectPlayerGainNode();\n\n        await this._destroyAudioContext();\n\n    }\n\n\n    protected async _getPlayerGainNode(): Promise<GainNode> {\n\n        // the player (master) gain node\n        let gainNode: GainNode;\n\n        if (this._audioNodes.gainNode instanceof GainNode) {\n\n            gainNode = this._audioNodes.gainNode;\n\n        } else {\n\n            const audioContext = await this.getAudioContext();\n\n            // Note: a volume control (GainNode) should always\n            // be the last node that gets connected\n            // so that volume changes take immediate effect\n            gainNode = audioContext.createGain();\n\n            this._initializeVolume(gainNode);\n\n            // final audio graph step: connect the gain node to the audio destination node\n            gainNode.connect(audioContext.destination);\n\n            this._audioNodes.gainNode = gainNode;\n\n        }\n\n        return gainNode;\n\n    }\n\n    protected _disconnectPlayerGainNode(): void {\n\n        if (this._audioNodes.gainNode !== null) {\n            this._audioNodes.gainNode.disconnect();\n            this._audioNodes.gainNode = null;\n        }\n\n    }\n\n    public async connectSound(sound: ISound, onEndedCallback: OnEndedCallbackType): Promise<void> {\n\n        if (sound.isConnectToPlayerGain) {\n            return;\n        }\n\n        if (this._options.loadPlayerMode === 'player_mode_ajax') {\n\n            // get a new audio buffer source node\n            // Note: remember these are \"one use\" only\n            // https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode\n            const audioBufferSourceNode = await this._createAudioBufferSourceNode();\n\n            // create the sound gain node\n            sound.gainNode = audioBufferSourceNode.context.createGain();\n\n            // connect the source to the sound gain node\n            audioBufferSourceNode.connect(sound.gainNode);\n\n            // do we loop this song?\n            audioBufferSourceNode.loop = sound.loop;\n\n            // NOTE: the source nodes onended handler won't have any effect if the loop property\n            // is set to true, as the audio won't stop playing\n            audioBufferSourceNode.onended = onEndedCallback;\n\n            sound.sourceNode = audioBufferSourceNode;\n\n        } else if (this._options.loadPlayerMode === 'player_mode_audio') {\n\n            await this._createAudioElementAndSource();\n\n            // create the sound gain node\n            sound.gainNode = this._mediaElementAudioSourceNode.context.createGain();\n\n            // connect the source to the sound gain node\n            this._mediaElementAudioSourceNode.connect(sound.gainNode);\n\n            // do we loop this song\n            this._mediaElementAudioSourceNode.mediaElement.loop = sound.loop;\n\n            // NOTE: the source nodes onended handler won't have any effect if the loop property\n            // is set to true, as the audio won't stop playing\n            this._mediaElementAudioSourceNode.mediaElement.onended = onEndedCallback;\n\n            sound.sourceNode = this._mediaElementAudioSourceNode;\n\n        }\n\n        // set the gain by default always to 1\n        sound.gainNode.gain.value = 1;\n\n        const playerGainNode = await this._getPlayerGainNode();\n\n        sound.gainNode.connect(playerGainNode);\n        sound.isConnectToPlayerGain = true;\n\n    }\n\n    public async disconnectSound(sound: ISound): Promise<void> {\n\n        if (!sound.isConnectToPlayerGain) {\n            return;\n        }\n\n        if (sound.sourceNode !== null) {\n            sound.sourceNode.disconnect();\n            // we set the source node to null, so that it can get garbage collected\n            // as specified in the specs: you can't reuse an audio buffer source node,\n            // after it got stopped\n            sound.sourceNode = null;\n        }\n\n        if (sound.gainNode !== null) {\n            sound.gainNode.disconnect();\n            sound.gainNode = null;\n            sound.isConnectToPlayerGain = false;\n        }\n\n        if (sound.audioElement !== null) {\n            sound.audioElement = null;\n        }\n\n    }\n\n    protected async _changePlayerGainValue(gainValue: number): Promise<void> {\n\n        if (this._audioNodes.gainNode instanceof GainNode) {\n            const audioContext = await this.getAudioContext();\n            const timeConstantInMilliseconds = (!isNaN(this._options.volumeTransitionTime) && this._options.volumeTransitionTime > 0) ? this._options.volumeTransitionTime : 100\n            const timeConstantInSeconds = timeConstantInMilliseconds / 1000;\n            this._audioNodes.gainNode.gain.setTargetAtTime(gainValue, audioContext.currentTime, timeConstantInSeconds);\n        }\n\n    }\n\n    public async setVolume(volume: number, forceUpdateUserVolume = true): Promise<number> {\n\n        // we sometimes change the volume, for a fade in/out or when muting, but\n        // in this cases we don't want to update the user's persisted volume, in\n        // which case forceUpdateUserVolume is false else it would be true\n        if (this._options.persistVolume && forceUpdateUserVolume) {\n            localStorage.setItem('WebAudioAPIPlayerVolume', volume.toString());\n        }\n\n        // the gain values we use range from 0 to 1\n        // so we need to divide the volume (in percent) by 100 to get the gain value\n        const newGainValue = volume / 100;\n\n        if (this._audioNodes.gainNode instanceof GainNode) {\n\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n            const currentGainRounded = Math.round((this._audioNodes.gainNode.gain.value + Number.EPSILON) * 100) / 100;\n\n            // check if the volume changed\n            if (newGainValue !== currentGainRounded) {\n\n                // Note to self: the gain value changes the amplitude of the sound wave\n                // a gain value set to 1 does nothing\n                // values between 0 and 1 reduce the loudness, above 1 they amplify the loudness\n                // negative values work too, but they invert the waveform\n                // so -1 is as loud as 1 but with -1 the waveform is inverted\n                await this._changePlayerGainValue(newGainValue);\n\n            }\n\n        }\n\n        this._volume = volume;\n\n        return volume;\n\n    }\n\n    public getVolume(): number {\n\n        let volume: number;\n\n        // check if volume has already been set\n        if (this._volume !== null) {\n            volume = this._volume;\n        } else {\n            if (this._options.persistVolume) {\n                // if persist volume is enabled\n                // check if there already is a user volume in localstorage\n                const userVolumeInPercent = parseInt(localStorage.getItem('WebAudioAPIPlayerVolume'));\n\n                if (!isNaN(userVolumeInPercent)) {\n                    volume = userVolumeInPercent;\n                }\n            }\n\n            // if volume is not persisted\n            // or the persited value has not been set yet\n            if (typeof volume === 'undefined') {\n                volume = this._options.volume;\n            }\n            this._volume = volume;\n        }\n\n        return volume;\n\n    }\n\n    protected _initializeVolume(gainNode: GainNode): void {\n\n        if (this._options.persistVolume) {\n            // if persist volume is enabled\n            // check if there already is a user volume in localstorage\n            const userVolumeInPercent = parseInt(localStorage.getItem('WebAudioAPIPlayerVolume'));\n            const gainValue = userVolumeInPercent / 100;\n\n            if (!isNaN(userVolumeInPercent)) {\n                gainNode.gain.value = gainValue;\n            }\n\n            this._volume = userVolumeInPercent;\n        }\n\n\n        // if no \"user volume\" got found\n        // take the default options volume\n        if (this._volume === null) {\n            const gainValue = this._options.volume / 100;\n            gainNode.gain.value = gainValue;\n            this._volume = this._options.volume;\n        }\n\n    }\n\n}\n","import { IOnProgress } from './sound';\n\nexport interface IRequested {\n    url: string;\n    loadingProgress: number;\n    onLoading?: IOnProgress;\n}\n\nexport class PlayerRequest {\n\n    public getArrayBuffer(requested: IRequested): Promise<ArrayBuffer> {\n\n        return new Promise(function (resolve, reject) {\n\n            const xhr = new XMLHttpRequest();\n\n            // third parameter is for \"async\", should already be \"true\" by default\n            // but who knows maybe a browser vendor decides to change it\n            // so I prefer to explicitly set it to \"true\" just in case\n            xhr.open('GET', requested.url, true);\n\n            // set the expected response type from the server to arraybuffer\n            xhr.responseType = 'arraybuffer';\n\n            xhr.onload = function (): void {\n\n                // gets called even for example a code 404, so check the status is in the 2xx range\n                if (xhr.status >= 200 && xhr.status <= 299) {\n                    resolve(xhr.response);\n                } else {\n                    // status code is not 2xx, reject with an error\n                    reject(new Error(xhr.statusText + '(status:' + xhr.status + ')'));\n                }\n\n            };\n\n            xhr.onprogress = function (event): void {\n\n                const loadingPercentageRaw = 100 / (event.total / event.loaded);\n                const loadingPercentage = Math.round(loadingPercentageRaw);\n\n                // update value on sound object\n                requested.loadingProgress = loadingPercentage;\n\n                if (requested.onLoading !== null) {\n                    requested.onLoading(loadingPercentage, event.total, event.loaded);\n                }\n\n            };\n\n            // also reject for any kind of network errors\n            xhr.onerror = function (error): void {\n\n                reject(error);\n\n            };\n\n            xhr.send();\n\n        });\n\n    }\n\n}\n","import { PlayerSound, ISound, ISoundAttributes, ISoundSource, typeSoundStates } from './sound';\nimport {\n    PlayerAudio,\n    IAudioOptions,\n} from './audio';\nimport { PlayerRequest } from './request';\n\nconst PLAYER_MODE_AUDIO = 'player_mode_audio';\nconst PLAYER_MODE_AJAX = 'player_mode_ajax';\nconst PLAYER_MODE_FETCH = 'player_mode_fetch';\n\nconst WHERE_IN_QUEUE_AT_START = 'prepend';\nconst WHERE_IN_QUEUE_AT_END = 'append';\n\ntype typePlayerMode = typeof PLAYER_MODE_AUDIO | typeof PLAYER_MODE_AJAX | typeof PLAYER_MODE_FETCH;\ntype typeWhereInQueue = typeof WHERE_IN_QUEUE_AT_START | typeof WHERE_IN_QUEUE_AT_END;\n\nexport interface ICoreOptions {\n    volume?: number;\n    loopQueue?: boolean;\n    loopSong?: boolean;\n    soundsBaseUrl?: string;\n    playingProgressIntervalTime?: number;\n    playNextOnEnded?: boolean;\n    stopOnReset?: boolean;\n    visibilityAutoMute?: boolean;\n    unlockAudioOnFirstUserInteraction?: boolean;\n    persistVolume?: boolean;\n    loadPlayerMode?: typePlayerMode;\n    audioContext?: AudioContext;\n    addAudioElementsToDom?: boolean;\n    volumeTransitionTime?: number;\n}\n\nexport interface ISoundsQueueOptions {\n    soundAttributes: ISoundAttributes;\n    whereInQueue?: typeWhereInQueue;\n}\n\ninterface IDecodeSoundOptions {\n    sound: ISound;\n}\n\nexport interface IPlayOptions {\n    whichSound?: number | string | undefined;\n    playTimeOffset?: number;\n}\n\ninterface IFindSoundById {\n    soundId: string | number;\n}\n\ninterface IFindBestSourceResponse {\n    url: string;\n    codec?: string;\n}\n\ninterface IGetSoundFromQueue {\n    whichSound?: string | number;\n    updateIndex?: boolean;\n}\n\ninterface IBestSource {\n    url: string;\n    codec?: string;\n}\n\nexport class PlayerCore {\n\n    // the sounds queue\n    protected _queue: ISound[];\n    // the queue index of the current sound\n    protected _currentIndex: number;\n    // instance of the audio library class\n    protected _playerAudio: PlayerAudio;\n    // playing progress animation frame request id\n    protected _playingProgressRequestId: number = null;\n    // time in milliseconds\n    protected _playingProgressPreviousTimestamp: DOMHighResTimeStamp;\n    // value of the volume before we muted\n    protected _postMuteVolume: number = null;\n    // user player options\n    protected _options: ICoreOptions;\n\n    // constants\n    static readonly WHERE_IN_QUEUE_AT_END = 'append';\n    static readonly WHERE_IN_QUEUE_AT_START = 'prepend';\n\n    static readonly PLAY_SOUND_NEXT = 'next';\n    static readonly PLAY_SOUND_PREVIOUS = 'previous';\n    static readonly PLAY_SOUND_FIRST = 'first';\n    static readonly PLAY_SOUND_LAST = 'last';\n\n    static readonly CURRENT_SOUND = 'current';\n\n    static readonly PLAYER_MODE_AUDIO = 'player_mode_audio';\n    static readonly PLAYER_MODE_AJAX = 'player_mode_ajax';\n    static readonly PLAYER_MODE_FETCH = 'player_mode_fetch';\n\n    constructor(playerOptions: ICoreOptions = {}) {\n\n        const defaultOptions: ICoreOptions = {\n            volume: 80,\n            loopQueue: false,\n            loopSong: false,\n            soundsBaseUrl: '',\n            playingProgressIntervalTime: 200,\n            playNextOnEnded: true,\n            stopOnReset: true,\n            visibilityAutoMute: false,\n            unlockAudioOnFirstUserInteraction: false,\n            persistVolume: true,\n            loadPlayerMode: PLAYER_MODE_AUDIO,\n            audioContext: null,\n            addAudioElementsToDom: false,\n            volumeTransitionTime: 100,\n        };\n\n        const options = Object.assign({}, defaultOptions, playerOptions);\n\n        this._queue = [];\n        this._currentIndex = 0;\n        this._options = options;\n        this._playingProgressPreviousTimestamp = 0;\n\n        this._initialize();\n\n    }\n\n    protected _initialize(): void {\n\n        const audioOptions = this._audioOptions();\n\n        this._playerAudio = new PlayerAudio(audioOptions);\n\n        switch (this._options.loadPlayerMode) {\n            case PlayerCore.PLAYER_MODE_AUDIO:\n                if (!this._playerAudio.detectAudioContextSupport()) {\n                    throw new Error('audio context is not supported by this device');\n                }\n                if (!this._playerAudio.detectAudioElementSupport()) {\n                    throw new Error('audio element is not supported by this device');\n                }\n                break;\n            case PlayerCore.PLAYER_MODE_AJAX:\n                if (!this._playerAudio.detectAudioContextSupport()) {\n                    throw new Error('audio context is not supported by this device');\n                }\n                break;\n        }\n\n    }\n\n    protected _audioOptions(): IAudioOptions {\n\n        const audioOptions: IAudioOptions = {\n            audioContext: this._options.audioContext,\n            unlockAudioOnFirstUserInteraction: this._options.unlockAudioOnFirstUserInteraction,\n            volume: this._options.volume,\n            persistVolume: this._options.persistVolume,\n            loadPlayerMode: this._options.loadPlayerMode,\n            addAudioElementsToDom: this._options.addAudioElementsToDom,\n            volumeTransitionTime: this._options.volumeTransitionTime,\n        };\n\n        return audioOptions;\n\n    }\n\n    public addSoundToQueue({ soundAttributes, whereInQueue = WHERE_IN_QUEUE_AT_END }: ISoundsQueueOptions): ISound {\n\n        const sound: ISound = new PlayerSound(soundAttributes);\n\n        switch (whereInQueue) {\n            case PlayerCore.WHERE_IN_QUEUE_AT_END:\n                this._appendSoundToQueue(sound);\n                break;\n            case PlayerCore.WHERE_IN_QUEUE_AT_START:\n                this._prependSoundToQueue(sound);\n                break;\n        }\n\n        return sound;\n\n    }\n\n    protected _appendSoundToQueue(sound: ISound): void {\n\n        this._queue.push(sound);\n\n    }\n\n    protected _prependSoundToQueue(sound: ISound): void {\n\n        this._queue.unshift(sound);\n\n    }\n\n    public async resetQueue(): Promise<void> {\n\n        if (this._options.stopOnReset) {\n            await this.stop();\n        }\n\n        this._queue.forEach((sound) => {\n            this._playerAudio.disconnectSound(sound);\n        });\n\n        this._queue = [];\n\n    }\n\n    public reset(): void {\n\n        this.resetQueue().catch((error) => {\n            console.error(error);\n        });\n\n    }\n\n    public getQueue(): ISound[] {\n\n        return this._queue;\n\n    }\n\n    public setVolume(volume: number): void {\n\n        this._playerAudio.setVolume(volume).catch((error) => {\n            console.error(error);\n        })\n\n    }\n\n    public getVolume(): number {\n\n        return this._playerAudio.getVolume();\n\n    }\n\n    public setLoopQueue(loppQueue: boolean): void {\n\n        this._options.loopQueue = loppQueue;\n\n    }\n\n    public getLoopQueue(): boolean {\n\n        return this._options.loopQueue;\n\n    }\n\n    public mute(): void {\n\n        const currentVolume = this.getVolume();\n\n        this._playerAudio.setVolume(0, false).catch((error) => {\n            console.error(error);\n        })\n\n        this._postMuteVolume = currentVolume;\n\n    }\n\n    public unMute(): void {\n\n        this._playerAudio.setVolume(this._postMuteVolume, false).catch((error) => {\n            console.error(error);\n        })\n\n        this._postMuteVolume = null;\n\n    }\n\n    public isMuted(): boolean {\n\n        return this._postMuteVolume === null ? false : true;\n\n    }\n\n    public async setPosition(soundPositionInPercent: number): Promise<void> {\n\n        if (soundPositionInPercent < 0 || soundPositionInPercent > 100) {\n            throw new Error('soundPositionInPercent must be a number >= 0 and <= 100');\n        }\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        if (currentSound !== null) {\n\n            let duration = currentSound.getDuration();\n\n            // if the duration did not get set manually or is not a number\n            if (duration === null || isNaN(duration)) {\n\n                // the user can set the sound duration manually but if he didn't the sound\n                // needs to get loaded first, to be able to know the duration it has\n                await this._loadSound(currentSound);\n\n                duration = currentSound.getDuration();\n\n            }\n\n            // calculate the position in seconds\n            const soundPositionInSeconds = (duration / 100) * soundPositionInPercent;\n\n            this.setPositionInSeconds(soundPositionInSeconds);\n\n        }\n\n    }\n\n    public async setPositionInSeconds(soundPositionInSeconds: number): Promise<void> {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        if (currentSound !== null) {\n\n            // round duration up as numbers are not integers\n            // so sometimes it is a tiny bit above\n            if (!isNaN(currentSound.duration) && (soundPositionInSeconds >  Math.ceil(currentSound.duration))) {\n                console.warn('soundPositionInSeconds > sound duration')\n            }\n\n            if (currentSound.onSeeking !== null) {\n\n                const playTime = soundPositionInSeconds;\n                const duration = currentSound.getDuration();\n                const seekingPercentageRaw = (playTime / duration) * 100;\n                const seekingPercentage = Math.round(seekingPercentageRaw);\n\n                currentSound.onSeeking(seekingPercentage, duration, playTime);\n\n            }\n\n            if (currentSound.state === PlayerSound.SOUND_STATE_PLAYING) {\n\n                // already playing so just change the position\n                currentSound.playTime = soundPositionInSeconds;\n\n                if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX) {\n                    // in ajax mode (when source is AudioBufferSourceNode) we\n                    // need to stop the song and start again at new position\n                    currentSound.elapsedPlayTime = soundPositionInSeconds;\n                    await this._stop(currentSound, PlayerSound.SOUND_STATE_SEEKING);\n                } else if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AUDIO) {\n                    // in audio (element) mode it is easier we can just change the position\n                    currentSound.state = PlayerSound.SOUND_STATE_SEEKING;\n                    await this._play(currentSound);\n                }\n\n            } else {\n\n                // only set the sound position but don't play yet\n                currentSound.playTime = soundPositionInSeconds;\n                currentSound.state = PlayerSound.SOUND_STATE_SEEKING;\n\n            }\n\n        }\n\n    }\n\n    protected async _loadSound(sound: ISound): Promise<void> {\n\n        switch (this._options.loadPlayerMode) {\n            case PlayerCore.PLAYER_MODE_AUDIO:\n                await this._loadSoundUsingAudioElement(sound);\n                break;\n            case PlayerCore.PLAYER_MODE_AJAX:\n                await this._loadSoundUsingRequest(sound);\n                break;\n            case PlayerCore.PLAYER_MODE_FETCH:\n                // TODO: implement fetch (?)\n                console.warn(PlayerCore.PLAYER_MODE_FETCH + ' is not implemented yet');\n        }\n\n    }\n\n    protected _loadSoundUsingAudioElement(sound: ISound): Promise<void> {\n\n        return new Promise((resolve, reject) => {\n\n            // extract the url and codec from sources\n            const { url, codec = null } = this._findBestSource(sound.source);\n\n            sound.url = url;\n            sound.codec = codec;\n\n            if (sound.url !== null) {\n\n                this._playerAudio.getAudioElement().then((audioElement) => {\n\n                    sound.audioElement = audioElement;\n\n                    const canPlayThroughHandler = async () => {\n\n                        // we don't need the listener anymore\n                        sound.audioElement.removeEventListener('canplaythrough', canPlayThroughHandler);\n                        sound.isReadyToPLay = true;\n                        // duration should now be available\n                        // if it got set manually don't overwrite it\n                        if (!isNaN(sound.audioElement.duration) && !sound.durationSetManually) {\n                            sound.duration = sound.audioElement.duration;\n                        }\n\n                        return resolve();\n\n                    }\n\n                    sound.audioElement.addEventListener('canplaythrough', canPlayThroughHandler);\n\n                    // loading progress\n                    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/progress_event\n                    sound.audioElement.onprogress = () => {\n\n                        if (sound.audioElement.buffered.length) {\n\n                            const duration = sound.getDuration()\n                            const buffered = sound.audioElement.buffered.end(0)\n                            const loadingPercentageRaw = 100 / (duration / buffered);\n                            const loadingPercentage = Math.round(loadingPercentageRaw);\n\n                            sound.loadingProgress = loadingPercentage;\n\n                            if (sound.onLoading !== null) {\n                                sound.onLoading(loadingPercentage, duration, buffered);\n                            }\n\n                            // only update duration if it did not get set manually\n                            if (!sound.durationSetManually) {\n                                sound.duration = sound.audioElement.duration;\n                            }\n\n                            if (loadingPercentage === 100) {\n                                sound.isBuffering = false;\n                                sound.isBuffered = true;\n                                sound.audioBufferDate = new Date();\n                            }\n\n                        }\n\n                    }\n\n                    // in chrome you will get this error message in the console:\n                    // \"MediaElementAudioSource outputs zeroes due to CORS access restrictions\"\n                    // to fix this put crossOrigin to anonymous or change the cors\n                    // Access-Control-Allow-Origin header of the server to *\n                    // \"crossOrigin\" has to be set before \"src\"\n                    sound.audioElement.crossOrigin = 'anonymous';\n\n                    sound.audioElement.src = sound.url;\n\n                    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/load\n                    sound.audioElement.load();\n\n                }).catch(reject);\n\n            } else {\n\n                reject(new Error('sound has no url'));\n\n            }\n\n        });\n\n    }\n\n    protected async _loadSoundUsingRequest(sound: ISound): Promise<void> {\n\n        // check for audio buffer before array buffer, because if one exist the other\n        // should exist too and is better for performance to reuse audio buffer then\n        // to redecode array buffer into an audio buffer\n        // user provided audio buffer\n        // decoding an array buffer is an expensive task even on modern hardware\n        // TODO: commented out for now, there is a weird bug when reusing the\n        // audio buffer, somehow the onended callback gets triggered in a loop\n        /*if (sound.audioBuffer !== null) {\n            return;\n        }*/\n\n        // user provided array buffer\n        if (sound.arrayBuffer !== null) {\n            return await this._decodeSound({ sound });\n        }\n\n        // extract the url and codec from sources\n        const { url, codec = null } = this._findBestSource(sound.source);\n\n        sound.url = url;\n        sound.codec = codec;\n\n        if (sound.url !== null) {\n\n            const request = new PlayerRequest();\n\n            sound.isBuffering = true;\n            const arrayBuffer = await request.getArrayBuffer(sound);\n            sound.arrayBuffer = arrayBuffer;\n\n            await this._decodeSound({ sound });\n\n        } else {\n\n            throw new Error('sound has no url');\n\n        }\n\n    }\n\n    protected async _decodeSound({ sound }: IDecodeSoundOptions): Promise<void> {\n\n        // make a copy of the array buffer first\n        // because the decoding will detach the array buffer\n        // https://github.com/WebAudio/web-audio-api/issues/1175\n        const arrayBufferCopy = sound.arrayBuffer.slice(0);\n\n        const audioBuffer = await this._playerAudio.decodeAudio(arrayBufferCopy);\n\n        // only update duration if it did not get set manually\n        if (!sound.durationSetManually) {\n            sound.duration = audioBuffer.duration;\n        }\n\n        sound.audioBuffer = audioBuffer;\n        sound.isBuffering = false;\n        sound.isBuffered = true;\n        sound.audioBufferDate = new Date();\n        sound.isReadyToPLay = true;\n\n    }\n\n    public async manuallyUnlockAudio() {\n        await this._playerAudio.unlockAudio();\n    }\n\n    public async play({ whichSound, playTimeOffset }: IPlayOptions = {}): Promise<ISound> {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        // whichSound is optional, if set it can be the sound id (string or number)\n        // or it can be these 4 constants: PLAY_SOUND_NEXT, PLAY_SOUND_PREVIOUS,\n        // PLAY_SOUND_FIRST, PLAY_SOUND_LAST\n        const sound = this._getSoundFromQueue({ whichSound, updateIndex: true });\n\n        // if there is no sound we could play, do nothing\n        if (sound === null) {\n            console.warn('no more sounds in array');\n            return sound;\n        }\n\n        // if there is a sound currently being played\n        // AND the current sound is the same sound as the one that will now be played\n        if (\n            currentSound !== null\n            && (currentSound.state === PlayerSound.SOUND_STATE_PLAYING)\n            && (currentSound.id === sound.id)\n        ) {\n            if (!isNaN(playTimeOffset)) {\n                // sound is already playing but a playTimeOffset got set\n                // so we just need to seek\n                this.setPositionInSeconds(playTimeOffset);\n                return sound;\n            } else {\n                // sound is already playing, do nothing\n                return sound;\n            }\n        }\n\n        // if there is a sound currently being played OR paused\n        // AND the current sound is NOT the same sound as the one that will now be played\n        if (\n            currentSound !== null\n            && (currentSound.state === PlayerSound.SOUND_STATE_PLAYING || currentSound.state === PlayerSound.SOUND_STATE_PAUSED)\n            && (currentSound.id !== sound.id)\n        ) {\n            // stop the current sound\n            await this._stop(currentSound, PlayerSound.SOUND_STATE_STOPPED);\n        }\n\n        // if the user wants to play the sound from a certain position\n        // then playTimeOffset should be a number and not undefined\n        if (!isNaN(playTimeOffset)) {\n            sound.playTimeOffset = playTimeOffset;\n        } else {\n            sound.playTimeOffset = 0;\n        }\n\n        if (sound.sourceNode === null) {\n            // connect the source to the gain (graph) node\n            await this._playerAudio.connectSound(sound, () => {\n                this._onEnded();\n            });\n        }\n\n        if (!sound.isReadyToPLay) {\n\n            await this._loadSound(sound);\n\n            await this._play(sound);\n\n        } else {\n\n            await this._play(sound);\n\n        }\n\n        return sound;\n\n    }\n\n    protected async _play(sound: ISound): Promise<void> {\n\n        if (this._playerAudio.isAudioContextFrozen()) {\n            await this._playerAudio.unfreezeAudioContext();\n        }\n\n        if (sound.playTimeOffset > 0) {\n            sound.playTime = sound.playTimeOffset;\n        }\n\n        if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX) {\n            await this._playAudioBuffer(sound);\n        } else if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AUDIO) {\n            await this._playMediaElementAudio(sound);\n        }\n\n        sound.state = PlayerSound.SOUND_STATE_PLAYING;\n\n        this._triggerSoundCallbacks(sound);\n\n    }\n\n    protected async _playAudioBuffer(sound: ISound): Promise<void> {\n\n        // AudioBufferSourceNode type guard\n        if (sound.sourceNode instanceof AudioBufferSourceNode) {\n\n            // on play, seek, pause, always reset the sound startTime (current context time)\n            sound.startTime = sound.sourceNode.context.currentTime;\n\n            // add the audio buffer to the source node\n            sound.sourceNode.buffer = sound.audioBuffer;\n\n            // start playback\n            // start(when, offset, duration)\n            try {\n                if (sound.state === PlayerSound.SOUND_STATE_SEEKING) {\n                    sound.sourceNode.start(0, sound.playTime);\n                } else if (sound.state === PlayerSound.SOUND_STATE_PAUSED && sound.playTimeOffset === 0) {\n                    sound.sourceNode.start(0, sound.playTime);\n                } else {\n                    if (sound.playTimeOffset > 0) {\n                        // round duration up as numbers are not integers\n                        // so sometimes it is a tiny bit above\n                        if (sound.playTimeOffset > Math.ceil(sound.duration)) {\n                            console.warn('playTimeOffset > sound duration');\n                        }\n                        // if an offset is defined start playing at that position\n                        sound.elapsedPlayTime = sound.playTimeOffset;\n                        sound.sourceNode.start(0, sound.playTimeOffset);\n                    } else {\n                        sound.sourceNode.start();\n                    }\n                }\n            } catch (error) {\n                throw new Error(error);\n            }\n        }\n\n    }\n\n    protected async _playMediaElementAudio(sound: ISound): Promise<void> {\n\n        // MediaElementAudioSourceNode type guard\n        if (sound.sourceNode instanceof MediaElementAudioSourceNode) {\n\n            if (sound.state === PlayerSound.SOUND_STATE_SEEKING) {\n                sound.audioElement.currentTime = sound.playTime;\n            } else if (sound.state === PlayerSound.SOUND_STATE_PAUSED && sound.playTimeOffset === 0) {\n                sound.audioElement.currentTime = sound.playTime;\n            } else {\n                // if an offset is defined start playing at that position\n                if (sound.playTimeOffset > 0) {\n                    // round duration up as numbers are not integers\n                    // so sometimes it is a tiny bit above\n                    if (sound.playTimeOffset > Math.ceil(sound.duration)) {\n                        console.warn('playTimeOffset > duration');\n                    }\n                    sound.audioElement.currentTime = sound.playTimeOffset;\n                } else {\n                    sound.audioElement.currentTime = 0;\n                }\n            }\n\n            return await sound.audioElement.play();\n\n        }\n\n    }\n\n    protected _triggerSoundCallbacks(sound: ISound) {\n\n        if (sound.onResumed !== null && !sound.firstTimePlayed) {\n            sound.onResumed(sound.playTime);\n        }\n\n        if (sound.onStarted !== null && sound.firstTimePlayed) {\n            sound.firstTimePlayed = false;\n            sound.onStarted(sound.playTimeOffset);\n        }\n\n        if (sound.onPlaying !== null) {\n            // reset progress timestamp\n            this._playingProgressPreviousTimestamp = 0;\n            // \"request animation frame\" callback has an argument, which\n            // is the timestamp when the callback gets called\n            // as this is the first call set timestamp manually to zero\n            this._progressTrigger(sound, 0);\n        } else {\n            this._playingProgressRequestId = null;\n        }\n\n        return;\n\n    }\n\n    protected _progressTrigger = (sound: ISound, timestamp: DOMHighResTimeStamp) => {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        // I had a lot of trouble cancelling the animation frame\n        // this is why I added this check\n        // often onended would get called by even though I do\n        // a cancel in _stop() the animation frame would still repeat\n        if (sound.id !== currentSound.id || currentSound.state !== PlayerSound.SOUND_STATE_PLAYING) {\n            return;\n        }\n\n        // throttle requests, use time set in options and\n        // make sure that at least that amount is elapsed \n        if ((timestamp - this._playingProgressPreviousTimestamp) >= this._options.playingProgressIntervalTime) {\n\n            const currentTime = sound.getCurrentTime();\n            const duration = sound.getDuration();\n\n            if (!isNaN(currentTime) && !isNaN(duration)) {\n\n                let playingPercentage = 0;\n\n                if (currentTime !== 0) {\n                    const playingPercentageRaw = (currentTime / duration) * 100;\n                    playingPercentage = Math.round(playingPercentageRaw);\n                }\n\n                sound.playedTimePercentage = playingPercentage;\n                sound.playTime = currentTime;\n\n                // execute playing progress callback\n                sound.onPlaying(playingPercentage, duration, currentTime);\n\n                this._playingProgressPreviousTimestamp = timestamp;\n            }\n\n        }\n\n        // request animation frame loop\n        this._playingProgressRequestId = window.requestAnimationFrame((timestamp) => {\n            this._progressTrigger(sound, timestamp);\n        });\n\n    }\n\n    protected async _onEnded(): Promise<void> {\n\n        if (this._options.playNextOnEnded) {\n\n            const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n            if (currentSound !== null) {\n\n                // when we set the sound to paused...\n                // audio buffer will trigger onEnded because we actually stop the song\n                // audio element will not trigger onEnded as we pause the song\n                // this is why, for audio buffer (ajax) sounds we check if they have\n                // the playing state before triggering the next sound\n                // if stopped, seeking or pause we do nothing\n                if (\n                    this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AUDIO ||\n                    (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX && currentSound.state === PlayerSound.SOUND_STATE_PLAYING)\n                ) {\n\n                    const nextSound = this._getSoundFromQueue({ whichSound: PlayerCore.PLAY_SOUND_NEXT });\n\n                    let willPlayNext = false;\n\n                    // check if there is another sound in the queue\n                    if (nextSound !== null) {\n                        willPlayNext = true;\n                    }\n\n                    if (!willPlayNext) {\n                        await this._playerAudio.freezeAudioContext();\n                    }\n\n                    if (currentSound.onEnded !== null) {\n                        currentSound.onEnded(willPlayNext);\n                    }\n\n                    try {\n                        await this.next();\n                    } catch (error) {\n                        console.error(error)\n                    }\n\n                }\n\n                if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX && currentSound.state === PlayerSound.SOUND_STATE_SEEKING) {\n                    try {\n                        // audio buffer source nodes get destroyed on stop\n                        // this is why in ajax mode we need to do a fresh start when seeking\n                        await this.play(currentSound);\n                    } catch (error) {\n                        console.error(error)\n                    }\n                }\n\n            }\n\n        }\n\n    }\n\n    protected _getSoundFromQueue({ whichSound, updateIndex = false }: IGetSoundFromQueue = {}): ISound {\n\n        let sound = null;\n        let soundIndex: number = null;\n\n        // check if the queue is empty\n        if (this._queue.length === 0) {\n            return sound;\n        }\n\n        // if which sound to play did not get specified\n        // we set it to the current sound by default\n        if (typeof whichSound === 'undefined') {\n            whichSound = PlayerCore.CURRENT_SOUND;\n        }\n\n        switch (whichSound) {\n            case PlayerCore.CURRENT_SOUND:\n                soundIndex = this._currentIndex\n                sound = this._queue[soundIndex];\n                break;\n            case PlayerCore.PLAY_SOUND_NEXT:\n                if (this._queue[this._currentIndex + 1] !== undefined) {\n                    soundIndex = this._currentIndex + 1;\n                    sound = this._queue[soundIndex];\n                } else if (this._options.loopQueue) {\n                    // if last sound is playing and loop queue is enabled\n                    // then on onEnded we go from last to first sound\n                    soundIndex = 0;\n                    sound = this._queue[soundIndex];\n                }\n                break;\n            case PlayerCore.PLAY_SOUND_PREVIOUS:\n                if (this._queue[this._currentIndex - 1] !== undefined) {\n                    soundIndex = this._currentIndex - 1;\n                    sound = this._queue[soundIndex];\n                } else if (this._options.loopQueue) {\n                    // if first sound of the queue is playing and loop queue is enabled\n                    // then if previous() gets used, we jump to last sound in queue\n                    soundIndex = this._queue.length - 1;\n                    sound = this._queue[soundIndex];\n                }\n                break;\n            case PlayerCore.PLAY_SOUND_FIRST:\n                if (this._queue.length > 0) {\n                    soundIndex = 0;\n                    sound = this._queue[soundIndex];\n                }\n                break;\n            case PlayerCore.PLAY_SOUND_LAST:\n                if (this._queue.length > 0) {\n                    soundIndex = this._queue.length - 1;\n                    sound = this._queue[soundIndex];\n                }\n                break;\n            default:\n                // if \"which sound to play\" is a soundId\n                // Note: soundId can be a string or number\n                [sound, soundIndex] = this._findSoundById({ soundId: whichSound });\n        }\n\n        if (soundIndex !== null && updateIndex) {\n            this._currentIndex = soundIndex;\n        }\n\n        return sound;\n\n    }\n\n    protected _findSoundById({ soundId }: IFindSoundById): [ISound, number] {\n\n        let sound: ISound = null;\n        let soundIndex = 0;\n\n        this._queue.some((soundFromQueue, index) => {\n\n            if (soundFromQueue.id === soundId) {\n                sound = soundFromQueue;\n                soundIndex = index;\n                return true;\n            }\n\n        });\n\n        return [sound, soundIndex];\n\n    }\n\n    protected _findBestSource(soundSource: (ISoundSource)[] | ISoundSource): IFindBestSourceResponse {\n\n        const bestSource: IBestSource = {\n            url: null,\n            codec: null\n        };\n\n        let sources: (ISoundSource)[];\n\n        // if the source is not an array but a single source object\n        // we first transform it into an array\n        if (!Array.isArray(soundSource)) {\n            sources = [soundSource];\n        } else {\n            sources = soundSource;\n        }\n\n        let i = 0;\n\n        while (i < sources.length) {\n\n            const source = sources[i]\n            let soundUrl = '';\n\n            // if the player has set the baseUrl option for sounds, use it now\n            if (this._options.soundsBaseUrl !== '') {\n                soundUrl = this._options.soundsBaseUrl;\n            }\n\n            soundUrl += source.url;\n\n            // check if the codec (if any got specified) is supported\n            // by the device\n            let isCodecSupported = true;\n\n            if (source.codec !== null) {\n                isCodecSupported = this._checkCodecSupport(source.codec);\n            }\n\n            if (isCodecSupported) {\n\n                if (source.isPreferred) {\n                    // if multiple sources but this one if preferred and if previous\n                    // sources also had a supported codec we still overwrite the\n                    // previous match\n                    bestSource.url = soundUrl;\n                    bestSource.codec = source.codec;\n                    // as the source is marked as preferred and it is supported\n                    // so we can exit early\n                    break;\n                } else {\n                    // if no best source has been found so far, we don't\n                    // care if it's preferred it's automatically chosen\n                    // as being the best\n                    bestSource.url = soundUrl;\n                    bestSource.codec = source.codec;\n                    // source is supported, but maybe there is preferred & supported\n                    // so we don't exit the loop just yet and continue searching\n                }\n\n            }\n\n            i++;\n\n        }\n\n        return bestSource;\n\n    }\n\n    protected _checkCodecSupport(codec: string): boolean {\n\n        let mediaMimeTypes: string[];\n        let error = '';\n\n        switch (codec) {\n            case 'ogg':\n                mediaMimeTypes = ['audio/ogg; codecs=\"vorbis\"'];\n                break;\n            case 'oga':\n                mediaMimeTypes = ['audio/ogg; codecs=\"vorbis\"'];\n                break;\n            case 'mp3':\n                mediaMimeTypes = ['audio/mpeg; codecs=\"mp3\"'];\n                break;\n            case 'opus':\n                mediaMimeTypes = ['audio/ogg; codecs=\"opus\"', 'audio/webm; codecs=\"opus\"'];\n                break;\n            case 'wav':\n                mediaMimeTypes = ['audio/wav; codecs=\"1\"'];\n                break;\n            case 'm4a':\n                mediaMimeTypes = ['audio/m4a;', 'audio/x-m4a;'];\n                break;\n            case 'm4p':\n                mediaMimeTypes = ['audio/m4p;', 'audio/x-m4p;'];\n                break;\n            case 'caf':\n                mediaMimeTypes = ['audio/x-caf;'];\n                break;\n            case 'aac':\n                mediaMimeTypes = ['audio/aac;'];\n                break;\n            case 'weba':\n            case 'webm':\n                mediaMimeTypes = ['audio/webm; codecs=\"vorbis\"'];\n                break;\n            case 'flac':\n                mediaMimeTypes = ['audio/flac;', 'audio/x-flac;'];\n                break;\n            default:\n                error = 'unrecognised codec';\n                break;\n        }\n\n        if (error) {\n            throw new Error(error);\n        }\n\n        return this._checkMimeTypesSupport(mediaMimeTypes);\n\n    }\n\n    protected _checkMimeTypesSupport(mediaMimeTypes: string[]): boolean {\n\n        const deviceAudio = new Audio();\n\n        let isSupported = false;\n\n        mediaMimeTypes.forEach((mediaMimeType) => {\n\n            const isMediaTypeSupported: string = deviceAudio.canPlayType(mediaMimeType).replace(/^no$/, '');\n\n            if (isMediaTypeSupported) {\n                isSupported = true;\n            }\n\n        });\n\n        return isSupported;\n\n    }\n\n    public async pause(): Promise<ISound> {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        if (currentSound === null) {\n            return;\n        }\n\n        if (currentSound.state === PlayerSound.SOUND_STATE_PAUSED) {\n            return;\n        }\n\n        const currentTime = currentSound.getCurrentTime();\n\n        currentSound.playTime = currentTime;\n\n        if (this._options.loadPlayerMode === PlayerCore.PLAYER_MODE_AJAX) {\n            currentSound.elapsedPlayTime = currentTime;\n        }\n\n        if (currentSound.onPaused !== null) {\n            currentSound.onPaused(currentSound.playTime);\n        }\n\n        await this._stop(currentSound, PlayerSound.SOUND_STATE_PAUSED);\n\n        return currentSound;\n\n    }\n\n    public async stop(): Promise<ISound> {\n\n        const currentSound = this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n        if (currentSound === null) {\n            return;\n        }\n\n        if (currentSound.state === PlayerSound.SOUND_STATE_STOPPED) {\n            return;\n        }\n\n        // on stop we freeze the audio context\n        // as we assume it won't be needed right away\n        await this._playerAudio.freezeAudioContext();\n\n        if (currentSound.onStopped !== null) {\n            currentSound.onStopped(currentSound.playTime);\n        }\n\n        await this._stop(currentSound, PlayerSound.SOUND_STATE_STOPPED);\n\n        return currentSound;\n\n    }\n\n    protected async _stop(sound: ISound, soundState: typeSoundStates): Promise<void> {\n\n        if (this._playingProgressRequestId !== null) {\n            cancelAnimationFrame(this._playingProgressRequestId);\n            this._playingProgressRequestId = null;\n        }\n\n        sound.state = soundState;\n\n        if (sound.sourceNode !== null) {\n\n            if (sound.sourceNode instanceof AudioBufferSourceNode) {\n                // if using the AudioBufferSourceNode use the stop method\n                sound.sourceNode.stop(0);\n                // the \"audio buffer\" CAN be reused for multiple plays\n                // however the \"audio buffer source\" CAN NOT, so we disconnect\n                await this._playerAudio.disconnectSound(sound);\n            }\n\n            if (sound.sourceNode instanceof MediaElementAudioSourceNode) {\n                // if using the MediaElementAudioSourceNode use the pause method\n                sound.audioElement.pause();\n            }\n\n        }\n\n        // if it is fully stopped, not just paused\n        if (soundState === PlayerSound.SOUND_STATE_STOPPED) {\n            // reset sound values\n            sound.isReadyToPLay = false;\n            sound.firstTimePlayed = true;\n            sound.startTime = 0;\n            sound.elapsedPlayTime = 0;\n            sound.playTime = 0;\n            sound.playedTimePercentage = 0;\n            // disconnect the sound\n            await this._playerAudio.disconnectSound(sound);\n        }\n\n    }\n\n    public async next(): Promise<ISound> {\n\n        return await this.play({ whichSound: PlayerCore.PLAY_SOUND_NEXT });\n\n    }\n\n    public async previous(): Promise<ISound> {\n\n        return await this.play({ whichSound: PlayerCore.PLAY_SOUND_PREVIOUS });\n\n    }\n\n    public async first(): Promise<ISound> {\n\n        return await this.play({ whichSound: PlayerCore.PLAY_SOUND_FIRST });\n\n    }\n\n    public async last(): Promise<ISound> {\n\n        return await this.play({ whichSound: PlayerCore.PLAY_SOUND_LAST });\n\n    }\n\n    public setVisibilityAutoMute(visibilityAutoMute: boolean): void {\n\n        this._options.visibilityAutoMute = visibilityAutoMute;\n\n        if (visibilityAutoMute) {\n            document.addEventListener('visibilitychange', this._handleVisibilityChange.bind(this), false);\n        } else {\n            document.removeEventListener('visibilitychange', this._handleVisibilityChange.bind(this), false);\n        }\n\n    }\n\n    public getVisibilityAutoMute(): boolean {\n        return this._options.visibilityAutoMute;\n    }\n\n    protected _handleVisibilityChange(): void {\n\n        let hiddenKeyword: string;\n\n        if (typeof document.hidden !== 'undefined') {\n            // Opera 12.10 and Firefox 18 and later support\n            hiddenKeyword = 'hidden';\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } else if (typeof (document as any).msHidden !== 'undefined') {\n            hiddenKeyword = 'msHidden';\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } else if (typeof (document as any).webkitHidden !== 'undefined') {\n            hiddenKeyword = 'webkitHidden';\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if ((document as any)[hiddenKeyword]) {\n            this.mute();\n        } else {\n            this.unMute();\n        }\n    }\n\n    public async disconnect(): Promise<void> {\n\n        // adding another check here to cancel animation frame because:\n        // a player can be disconnect while song is paused or playing\n        // which means the cancelAnimationFrame in _stop would never get triggered\n        if (this._playingProgressRequestId !== null) {\n            cancelAnimationFrame(this._playingProgressRequestId);\n            this._playingProgressRequestId = null;\n        }\n\n        await this._playerAudio.shutDown(this._queue);\n\n    }\n\n    public async getAudioContext(): Promise<AudioContext> {\n\n        const audioContext = await this._playerAudio.getAudioContext();\n\n        return audioContext;\n\n    }\n\n    public getCurrentSound(): ISound {\n\n        return this._getSoundFromQueue({ whichSound: PlayerCore.CURRENT_SOUND });\n\n    }\n\n}\n"],"names":["PlayerSound","constructor","soundAttributes","this","url","codec","loop","sourceNode","gainNode","isReadyToPLay","isBuffered","isBuffering","audioElement","audioBuffer","arrayBuffer","audioBufferDate","playTimeOffset","startTime","elapsedPlayTime","playTime","playedTimePercentage","state","loadingProgress","duration","durationSetManually","firstTimePlayed","isConnectToPlayerGain","Array","isArray","source","id","_generateSoundId","isNaN","onLoading","onPlaying","onStarted","onEnded","onStopped","onPaused","onResumed","onSeeking","ArrayBuffer","AudioBuffer","Date","getCurrentTime","currentTime","AudioBufferSourceNode","context","MediaElementAudioSourceNode","Math","round","Number","EPSILON","getDuration","setDuration","setLoop","SOUND_STATE_PLAYING","mediaElement","getLoop","now","toString","random","substring","SOUND_STATE_STOPPED","SOUND_STATE_PAUSED","SOUND_STATE_SEEKING","PlayerAudio","options","_audioContext","_volume","_audioNodes","_audioElement","_mediaElementAudioSourceNode","_isAudioUnlocked","_isAudioUnlocking","_options","_initialize","unlockAudioOnFirstUserInteraction","_addFirstUserInteractionEventListeners","getAudioNodes","decodeAudio","audioContext","getAudioContext","decodeAudioData","_createAudioContext","AudioContext","WebAudioContext","window","webkitAudioContext","document","addEventListener","unlockAudio","bind","_removeFirstUserInteractionEventListeners","removeEventListener","Promise","resolve","reject","loadPlayerMode","forceCreate","_createAudioElement","catch","error","then","placeholderBuffer","createBuffer","bufferSource","createBufferSource","onended","disconnect","buffer","connect","destination","start","_createAudioElementAndSource","_createMediaElementAudioSourceNode","Audio","controls","autoplay","preload","volume","addAudioElementsToDom","body","appendChild","getAudioElement","unfreezeAudioContext","resume","freezeAudioContext","suspend","isAudioContextFrozen","detectAudioContextSupport","audioContextSupported","detectAudioElementSupport","createElement","canPlayType","_createAudioBufferSourceNode","createMediaElementSource","_destroyMediaElementAudioSourceNode","remove","_destroyAudioBufferSourceNode","_destroyAudioContext","close","shutDown","songsQueue","forEach","sound","disconnectSound","_disconnectPlayerGainNode","_getPlayerGainNode","GainNode","createGain","_initializeVolume","connectSound","onEndedCallback","audioBufferSourceNode","gain","value","playerGainNode","_changePlayerGainValue","gainValue","timeConstantInSeconds","volumeTransitionTime","setTargetAtTime","setVolume","forceUpdateUserVolume","persistVolume","localStorage","setItem","newGainValue","getVolume","userVolumeInPercent","parseInt","getItem","PlayerRequest","getArrayBuffer","requested","xhr","XMLHttpRequest","open","responseType","onload","status","response","Error","statusText","onprogress","event","loadingPercentageRaw","total","loaded","loadingPercentage","onerror","send","PlayerCore","playerOptions","_playingProgressRequestId","_postMuteVolume","_progressTrigger","timestamp","currentSound","_getSoundFromQueue","whichSound","CURRENT_SOUND","_playingProgressPreviousTimestamp","playingProgressIntervalTime","playingPercentage","playingPercentageRaw","requestAnimationFrame","defaultOptions","loopQueue","loopSong","soundsBaseUrl","playNextOnEnded","stopOnReset","visibilityAutoMute","Object","assign","_queue","_currentIndex","audioOptions","_audioOptions","_playerAudio","PLAYER_MODE_AUDIO","PLAYER_MODE_AJAX","addSoundToQueue","whereInQueue","WHERE_IN_QUEUE_AT_END","_appendSoundToQueue","WHERE_IN_QUEUE_AT_START","_prependSoundToQueue","push","unshift","resetQueue","stop","reset","getQueue","setLoopQueue","loppQueue","getLoopQueue","mute","currentVolume","unMute","isMuted","setPosition","soundPositionInPercent","_loadSound","soundPositionInSeconds","setPositionInSeconds","ceil","seekingPercentageRaw","seekingPercentage","_stop","_play","_loadSoundUsingAudioElement","_loadSoundUsingRequest","PLAYER_MODE_FETCH","_findBestSource","canPlayThroughHandler","__awaiter","buffered","length","end","crossOrigin","src","load","_decodeSound","request","arrayBufferCopy","slice","manuallyUnlockAudio","play","updateIndex","_onEnded","_playAudioBuffer","_playMediaElementAudio","_triggerSoundCallbacks","willPlayNext","PLAY_SOUND_NEXT","next","soundIndex","undefined","PLAY_SOUND_PREVIOUS","PLAY_SOUND_FIRST","PLAY_SOUND_LAST","_findSoundById","soundId","some","soundFromQueue","index","soundSource","bestSource","sources","i","soundUrl","isCodecSupported","_checkCodecSupport","isPreferred","mediaMimeTypes","_checkMimeTypesSupport","deviceAudio","isSupported","mediaMimeType","replace","pause","soundState","cancelAnimationFrame","previous","first","last","setVisibilityAutoMute","_handleVisibilityChange","getVisibilityAutoMute","hiddenKeyword","hidden","msHidden","webkitHidden","getCurrentSound"],"mappings":"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"}